import java_cup.runtime;
import java.util.*;
import java.math.*;
import ast.*;

/* Setup */
scan with {: return getScanner().next_token(); :};
parser code {: @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			:}

/* Terminals - Keywords*/

terminal START, END;
terminal CLASS, ENDCLASS, EXTENDS;
terminal SUBROUTINE, ENDSUBR;
/* terminal MOCK, ENDMOCK; */
/* terminal STUB, ENDSTUB; */
terminal VOID, INT, FLOAT, BOOLEAN, HASHMAP, STRING, ARRAY;
terminal IF, ELSE, ENDIF;
terminal WHILE, ENDWHILE;
terminal RETURN;
terminal AND, OR, NAND, NOR, EQUALS;
terminal TRUE, FALSE;
terminal THIS, NIL;
terminal ASSERT, CREATE, EXIT;
terminal GETINT, GETFLOAT, GETBOOLEAN, GETSTRING;

/* Terminals - Non Keywords */
terminal POINTER, AT, COMMA;
terminal PLUS, MINUS, MULT, DIV, POWER;
terminal GTHANE, LTHANE, LTHAN, GTHAN, EQUAL, BANG;
terminal LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal DOT, SEMICOLON, COLON;
terminal String STRINGLITERAL, IDENTIFIER;
terminal BigInteger INTLITERAL
terminal BigDecimal FLOATLITERAL;

/* Non Terminals */
non terminal Program program;
non terminal StatementList statementlist;
non terminal DefList deflist;
non terminal ClassDef classdef;
non terminal MethodDef methoddef;
/* non terminal MOCKDEF; */
/* non terminal STUBDEF; */
non terminal VarDeclList vardeclist;
non terminal VarDecl vardec;
non terminal ArgList arglist;
non terminal Type type;
non terminal RetType returntype;
non terminal Statement statement;
non terminal Expression expression;
non terminal ParamList paramlist;
non terminal Identifer identifier;

/* Precedence */
precedence left BANG;
precedence left DIV, MULT;
precedence left MINUS, PLUS;
precedence left AND, OR, NAND, NOR;
precedence left GTHANE, LTHANE, GTHAN, LTHAN;
precedence left EQUALS;

/* Productions */
program ::=	START statementlist:s END deflist:d;

statemenlist ::= statementlist:l statement:s 
		| 
		;

deflist ::= deflist:d classdef:c
		|
		deflist:d methoddef:m
		|
		;

classdef ::= CLASS identifer:i COLON vardeclist:v deflist:d ENDCLASS
		|
		CLASS identifier:i1 EXTENDS identifer:i2 COLON vardeclist:v deflist:d ENDCLASS
		;

methoddef ::= SUBROUTINE returntype:r identifier:i RPAREN arglist:a LPAREN COLON statementlist:l ENDSUBR;

vardeclist ::= vardeclist:l vardec:v 
		|
		;
vardec ::= type:t identifier:i SEMICOLON;

arglist ::= ;
type ::= ;
returntype ::= ;
statement ::= ;
expression ::= ;
paramlist ::= ;
identifier ::= ;
