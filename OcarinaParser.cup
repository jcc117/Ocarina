import java_cup.runtime;
import java.util.*;
import ast.*;

/* Setup */
scan with {: return getScanner().next_token(); :};
parser code {: @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			:}

/* Terminals - Keywords*/

terminal START, END;
terminal CLASS, ENDCLASS, EXTENDS;
terminal SUBROUTINE, ENDSUBR;
/* terminal MOCK, ENDMOCK; */
/* terminal STUB, ENDSTUB; */
terminal VOID, INT, FLOAT, BOOLEAN, HASHMAP, STRING, ARRAY;
terminal IF, ELSE, ENDIF;
terminal WHILE, ENDWHILE;
terminal RETURN;
terminal AND, OR, NAND, NOR, EQUALS;
terminal TRUE, FALSE;
terminal THIS, NIL;
terminal ASSERT, CREATE, EXIT;
terminal GETINT, GETFLOAT, GETBOOLEAN, GETSTRING;

/* Terminals - Non Keywords */
terminal POINTER, AT, COMMA;
terminal PLUS, MINUS, MULT, DIV, POWER;
terminal GTHANE, LTHANE, LTHAN, GTHAN, EQUAL, BANG;
terminal LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal DOT, SEMICOLON, COLON;
terminal STRINGLITERAL, IDENTIFIER;
terminal INTLITERAL, FLOATLITERAL;

/* Non Terminals */
non terminal Program PROGRAM;
non terminal StatementList STATEMENTLIST;
non terminal DefList DEFLIST;
non terminal ClassDef CLASSDEF;
non terminal MethodDef METHODDEF;
/* non terminal MOCKDEF; */
/* non terminal STUBDEF; */
non terminal VarDeclList VARDECLIST;
non terminal ArgList ARGLIST;
non terminal Type TYPE;
non terminal RetType RETURNTYPE;
non terminal Statement STATEMENT;
non terminal Expression EXPRESSION;
non terminal ParamList PARAMLIST;

/* Precedence */
precedence left BANG;
precedence left DIV, MULT;
precedence left MINUS, PLUS;
precedence left AND, OR, NAND, NOR;
precedence left GTHANE, LTHANE, GTHAN, LTHAN;
precedence left EQUALS;

/* Productions */
PROGRAM ::=	;
STATEMENTLIST ::= ;
DEFLIST ::= ;
CLASSDEF ::= ;
METHODDEF ::= ;
VARDECLIST ::= ;
ARGLIST ::= ;
TYPE ::= ;
RETURNTYPE ::= ;
STATEMENT ::= ;
EXPRESSION ::= ;
PARAMLIST ::= ;
