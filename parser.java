
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 25 20:28:17 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 25 20:28:17 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\006\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\002\000\002" +
    "\007\012\000\002\007\014\000\002\007\014\000\002\007" +
    "\012\000\002\007\013\000\002\007\011\000\002\007\014" +
    "\000\002\007\012\000\002\027\004\000\002\027\002\000" +
    "\002\026\011\000\002\010\014\000\002\010\014\000\002" +
    "\010\013\000\002\010\014\000\002\011\004\000\002\011" +
    "\002\000\002\013\005\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\012\005\000\002\014\005\000" +
    "\002\014\003\000\002\022\004\000\002\015\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\010\000\002\015\003\000\002\015\003" +
    "\000\002\030\011\000\002\031\005\000\002\031\002\000" +
    "\002\016\003\000\002\016\004\000\002\025\005\000\002" +
    "\025\011\000\002\025\010\000\002\025\007\000\002\025" +
    "\014\000\002\025\010\000\002\025\007\000\002\025\007" +
    "\000\002\025\006\000\002\025\011\000\002\025\011\000" +
    "\002\025\005\000\002\025\007\000\002\025\007\000\002" +
    "\025\004\000\002\025\004\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\004\000\002\023\007" +
    "\000\002\023\002\000\002\024\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\017\006\000\002" +
    "\017\005\000\002\017\003\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\017\003\000\002\017\007\000\002\017\011\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\007\000\002\017\010" +
    "\000\002\017\003\000\002\020\005\000\002\020\002\000" +
    "\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\004\006\004\001\002\000\004\116\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\113\011\001\002\000\106\010\uff90\011\uff90\012" +
    "\uff90\014\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\063\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90" +
    "\101\uff90\102\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110" +
    "\uff90\111\uff90\112\uff90\113\uff90\114\uff90\116\uff90\001\002" +
    "\000\024\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\016\ufffd\057\ufffd\001\002\000\024\002\ufff6" +
    "\004\017\007\015\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016" +
    "\ufff6\057\013\001\002\000\004\004\u0156\001\002\000\004" +
    "\002\001\001\002\000\004\116\010\001\002\000\016\002" +
    "\uffff\010\240\011\241\012\234\013\236\016\235\001\002" +
    "\000\054\005\ufff9\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\025\034\027\037\031\030\032\046\033\036" +
    "\034\032\046\027\050\021\056\045\060\044\061\022\062" +
    "\020\064\033\116\010\001\002\000\004\116\010\001\002" +
    "\000\004\110\u014a\001\002\000\004\113\u0149\001\002\000" +
    "\004\113\u0148\001\002\000\060\005\ufff9\017\047\020\026" +
    "\021\042\022\040\023\043\024\041\025\034\026\ufff9\027" +
    "\037\030\ufff9\031\030\032\046\033\036\034\032\046\027" +
    "\050\021\056\045\060\044\061\022\062\020\064\033\116" +
    "\010\001\002\000\016\074\u0137\075\u0135\102\u0136\104\u0138" +
    "\106\u0134\116\uffd6\001\002\000\020\010\uffdb\011\uffdb\012" +
    "\uffdb\065\uffdb\104\uffdb\107\uffdb\116\uffdb\001\002\000\004" +
    "\110\u0130\001\002\000\044\023\071\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\062\020\103\075\110\062\115\066\116\010\117\072\120" +
    "\065\001\002\000\006\104\155\116\010\001\002\000\044" +
    "\023\071\042\061\043\073\044\064\045\063\047\067\051" +
    "\060\052\057\053\074\054\056\062\020\103\075\110\062" +
    "\115\066\116\010\117\072\120\065\001\002\000\050\017" +
    "\047\020\026\021\042\022\040\023\043\024\041\025\034" +
    "\027\037\031\030\032\046\033\036\034\032\046\027\050" +
    "\021\056\045\060\044\061\022\062\020\116\010\001\002" +
    "\000\044\023\071\042\061\043\073\044\064\045\063\047" +
    "\067\051\060\052\057\053\074\054\056\062\020\103\075" +
    "\110\062\115\066\116\010\117\072\120\065\001\002\000" +
    "\004\005\231\001\002\000\054\005\ufff9\017\047\020\026" +
    "\021\042\022\040\023\043\024\041\025\034\027\037\031" +
    "\030\032\046\033\036\034\032\046\027\050\021\056\045" +
    "\060\044\061\022\062\020\064\033\116\010\001\002\000" +
    "\054\005\ufff9\017\047\020\026\021\042\022\040\023\043" +
    "\024\041\025\034\027\037\031\030\032\046\033\036\034" +
    "\032\046\027\050\021\056\045\060\044\061\022\062\020" +
    "\064\033\116\010\001\002\000\020\010\uffd9\011\uffd9\012" +
    "\uffd9\065\uffd9\104\uffd9\107\uffd9\116\uffd9\001\002\000\020" +
    "\010\uffd8\011\uffd8\012\uffd8\065\uffd8\104\uffd8\107\uffd8\116" +
    "\uffd8\001\002\000\020\010\uffda\011\uffda\012\uffda\065\uffda" +
    "\104\uffda\107\uffda\116\uffda\001\002\000\004\106\215\001" +
    "\002\000\004\113\214\001\002\000\004\110\210\001\002" +
    "\000\004\110\052\001\002\000\020\010\uffd5\011\uffd5\012" +
    "\uffd5\065\uffd5\104\uffd5\107\uffd5\116\uffd5\001\002\000\116" +
    "\005\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\056\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\103\uffbd\110" +
    "\uffbd\111\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\001\002" +
    "\000\116\005\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\056\uffd1\060\uffd1\061\uffd1\062\uffd1\064\uffd1\103" +
    "\uffd1\110\uffd1\111\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1" +
    "\001\002\000\052\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\025\034\027\037\031\030\032\046\033\036" +
    "\034\032\046\027\050\021\056\045\060\044\061\022\062" +
    "\020\064\033\116\010\001\002\000\044\023\071\042\061" +
    "\043\073\044\064\045\063\047\067\051\060\052\057\053" +
    "\074\054\056\062\020\103\075\110\062\115\066\116\010" +
    "\117\072\120\065\001\002\000\062\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\073\uffa6\076\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\111\uffa6\112\uffa6" +
    "\113\uffa6\114\uffa6\001\002\000\062\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\076\uff9d\077\uff9d\100\uff9d\101" +
    "\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\111\uff9d\112\uff9d" +
    "\113\uff9d\114\uff9d\001\002\000\062\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\065\uff96\066\uff96\067\uff96\070\uff96" +
    "\071\uff96\072\uff96\073\uff96\076\uff96\077\uff96\100\uff96\101" +
    "\uff96\104\uff96\105\uff96\106\uff96\107\uff96\111\uff96\112\uff96" +
    "\113\uff96\114\uff96\001\002\000\062\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\065\uff98\066\uff98\067\uff98\070\uff98" +
    "\071\uff98\072\uff98\073\uff98\076\uff98\077\uff98\100\uff98\101" +
    "\uff98\104\uff98\105\uff98\106\uff98\107\uff98\111\uff98\112\uff98" +
    "\113\uff98\114\uff98\001\002\000\062\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\072\uff99\073\uff99\076\uff99\077\uff99\100\uff99\101" +
    "\uff99\104\uff99\105\uff99\106\uff99\107\uff99\111\uff99\112\uff99" +
    "\113\uff99\114\uff99\001\002\000\062\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\076\uffa2\077\uffa2\100\uffa2\101" +
    "\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\114\uffa2\001\002\000\044\023\071\042\061\043" +
    "\073\044\064\045\063\047\067\051\060\052\057\053\074" +
    "\054\056\062\020\103\075\110\062\115\066\116\010\117" +
    "\072\120\065\001\002\000\062\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\107\uffa0\111\uffa0\112\uffa0\113" +
    "\uffa0\114\uffa0\001\002\000\062\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\073\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a" +
    "\104\uff9a\105\uff9a\106\uff9a\107\uff9a\111\uff9a\112\uff9a\113" +
    "\uff9a\114\uff9a\001\002\000\062\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3" +
    "\104\uffa3\105\uffa3\106\uffa3\107\uffa3\111\uffa3\112\uffa3\113" +
    "\uffa3\114\uffa3\001\002\000\062\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071" +
    "\uff93\072\uff93\073\uff93\076\uff93\077\uff93\100\uff93\101\uff93" +
    "\104\uff93\105\uff93\106\uff93\107\uff93\111\uff93\112\uff93\113" +
    "\uff93\114\uff93\001\002\000\020\017\047\020\026\021\042" +
    "\022\040\023\043\024\041\116\010\001\002\000\050\035" +
    "\100\036\102\037\113\040\103\041\106\066\101\067\115" +
    "\070\107\071\111\072\120\073\077\076\112\077\117\100" +
    "\114\101\110\104\105\106\104\112\116\113\161\001\002" +
    "\000\004\106\151\001\002\000\062\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\076\uffa4\077\uffa4\100\uffa4\101" +
    "\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\111\uffa4\112\uffa4" +
    "\113\uffa4\114\uffa4\001\002\000\062\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\073\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\111\uffa1\112\uffa1" +
    "\113\uffa1\114\uffa1\001\002\000\062\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\065\uff97\066\uff97\067\uff97\070\uff97" +
    "\071\uff97\072\uff97\073\uff97\076\uff97\077\uff97\100\uff97\101" +
    "\uff97\104\uff97\105\uff97\106\uff97\107\uff97\111\uff97\112\uff97" +
    "\113\uff97\114\uff97\001\002\000\044\023\071\042\061\043" +
    "\073\044\064\045\063\047\067\051\060\052\057\053\074" +
    "\054\056\062\020\103\075\110\062\115\066\116\010\117" +
    "\072\120\065\001\002\000\062\035\100\036\102\037\113" +
    "\040\103\041\106\065\uff9e\066\101\067\115\070\107\071" +
    "\111\072\120\073\077\076\112\077\117\100\114\101\110" +
    "\104\105\105\uff9e\106\104\107\uff9e\111\uff9e\112\116\113" +
    "\uff9e\114\uff9e\001\002\000\044\023\071\042\061\043\073" +
    "\044\064\045\063\047\067\051\060\052\057\053\074\054" +
    "\056\062\020\103\075\110\062\115\066\116\010\117\072" +
    "\120\065\001\002\000\044\023\071\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\062\020\103\075\110\062\115\066\116\010\117\072\120" +
    "\065\001\002\000\044\023\071\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\062" +
    "\020\103\075\110\062\115\066\116\010\117\072\120\065" +
    "\001\002\000\044\023\071\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\062\020" +
    "\103\075\110\062\115\066\116\010\117\072\120\065\001" +
    "\002\000\044\023\071\042\061\043\073\044\064\045\063" +
    "\047\067\051\060\052\057\053\074\054\056\062\020\103" +
    "\075\110\062\115\066\116\010\117\072\120\065\001\002" +
    "\000\044\023\071\042\061\043\073\044\064\045\063\047" +
    "\067\051\060\052\057\053\074\054\056\062\020\103\075" +
    "\110\062\115\066\116\010\117\072\120\065\001\002\000" +
    "\044\023\071\042\061\043\073\044\064\045\063\047\067" +
    "\051\060\052\057\053\074\054\056\062\020\103\075\110" +
    "\062\115\066\116\010\117\072\120\065\001\002\000\044" +
    "\023\071\042\061\043\073\044\064\045\063\047\067\051" +
    "\060\052\057\053\074\054\056\062\020\103\075\110\062" +
    "\115\066\116\010\117\072\120\065\001\002\000\044\023" +
    "\071\042\061\043\073\044\064\045\063\047\067\051\060" +
    "\052\057\053\074\054\056\062\020\103\075\110\062\115" +
    "\066\116\010\117\072\120\065\001\002\000\044\023\071" +
    "\042\061\043\073\044\064\045\063\047\067\051\060\052" +
    "\057\053\074\054\056\062\020\103\075\110\062\115\066" +
    "\116\010\117\072\120\065\001\002\000\044\023\071\042" +
    "\061\043\073\044\064\045\063\047\067\051\060\052\057" +
    "\053\074\054\056\062\020\103\075\110\062\115\066\116" +
    "\010\117\072\120\065\001\002\000\044\023\071\042\061" +
    "\043\073\044\064\045\063\047\067\051\060\052\057\053" +
    "\074\054\056\062\020\103\075\110\062\115\066\116\010" +
    "\117\072\120\065\001\002\000\044\023\071\042\061\043" +
    "\073\044\064\045\063\047\067\051\060\052\057\053\074" +
    "\054\056\062\020\103\075\110\062\115\066\116\010\117" +
    "\072\120\065\001\002\000\044\023\071\042\061\043\073" +
    "\044\064\045\063\047\067\051\060\052\057\053\074\054" +
    "\056\062\020\103\075\110\062\115\066\116\010\117\072" +
    "\120\065\001\002\000\044\023\071\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\062\020\103\075\110\062\115\066\116\010\117\072\120" +
    "\065\001\002\000\064\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\055\124\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2" +
    "\104\uffd2\105\uffd2\106\uffd2\107\uffd2\111\uffd2\112\125\113" +
    "\uffd2\114\uffd2\001\002\000\044\023\071\042\061\043\073" +
    "\044\064\045\063\047\067\051\060\052\057\053\074\054" +
    "\056\062\020\103\075\110\062\115\066\116\010\117\072" +
    "\120\065\001\002\000\044\023\071\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\062\020\103\075\110\062\115\066\116\010\117\072\120" +
    "\065\001\002\000\062\035\100\036\102\037\113\040\103" +
    "\041\106\065\uffb0\066\101\067\115\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\076\112\077\117\100\114\101\110\104\uffb0" +
    "\105\uffb0\106\uffb0\107\uffb0\111\uffb0\112\uffb0\113\uffb0\114" +
    "\uffb0\001\002\000\062\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\106\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072" +
    "\uffac\073\uffac\076\uffac\077\uffac\100\uffac\101\uffac\104\uffac" +
    "\105\uffac\106\uffac\107\uffac\111\uffac\112\uffac\113\uffac\114" +
    "\uffac\001\002\000\062\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\107\uffa7\111\uffa7\112\uffa7\113\uffa7\114" +
    "\uffa7\001\002\000\062\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\073\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\111\uffa5\112\uffa5\113\uffa5\114" +
    "\uffa5\001\002\000\004\116\010\001\002\000\064\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\063\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\076\uffd2" +
    "\077\uffd2\100\uffd2\101\uffd2\104\uffd2\105\uffd2\106\uffd2\107" +
    "\uffd2\111\uffd2\112\125\113\uffd2\114\uffd2\001\002\000\064" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\063\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\076\uffd3\077\uffd3\100\uffd3\101\uffd3\104\uffd3\105\uffd3\106" +
    "\uffd3\107\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\001\002" +
    "\000\062\035\100\036\102\037\113\040\103\041\106\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\076\112\077\117\100\114\101\110\104\uffb2\105\uffb2\106" +
    "\uffb2\107\uffb2\111\uffb2\112\uffb2\113\uffb2\114\uffb2\001\002" +
    "\000\062\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\106\065" +
    "\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\101\uffaa\104\uffaa\105\uffaa\106" +
    "\uffaa\107\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa\001\002" +
    "\000\062\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\106\065" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\076\112\077\117\100\114\101\110\104\uffb6\105\uffb6\106" +
    "\uffb6\107\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\001\002" +
    "\000\062\035\uffad\036\uffad\037\uffad\040\uffad\041\106\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\uffad\104\uffad\105\uffad\106" +
    "\uffad\107\uffad\111\uffad\112\uffad\113\uffad\114\uffad\001\002" +
    "\000\062\035\100\036\102\037\113\040\103\041\106\065" +
    "\uffaf\066\101\067\115\070\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\076\112\077\117\100\114\101\110\104\uffaf\105\uffaf\106" +
    "\uffaf\107\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\001\002" +
    "\000\062\035\uffab\036\uffab\037\uffab\040\uffab\041\106\065" +
    "\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab" +
    "\076\uffab\077\uffab\100\uffab\101\uffab\104\uffab\105\uffab\106" +
    "\uffab\107\uffab\111\uffab\112\uffab\113\uffab\114\uffab\001\002" +
    "\000\062\035\100\036\102\037\113\040\103\041\106\065" +
    "\uffb1\066\101\067\115\070\uffb1\071\uffb1\072\uffb1\073\uffb1" +
    "\076\112\077\117\100\114\101\110\104\uffb1\105\uffb1\106" +
    "\uffb1\107\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\001\002" +
    "\000\062\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\101\uffb4\104\uffb4\105\uffb4\106" +
    "\uffb4\107\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\001\002" +
    "\000\050\035\100\036\102\037\113\040\103\041\106\066" +
    "\101\067\115\070\107\071\111\072\120\073\077\076\112" +
    "\077\117\100\114\101\110\104\105\105\141\106\104\112" +
    "\116\001\002\000\062\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072" +
    "\uffa9\073\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\111\uffa9\112\uffa9\113\uffa9\114" +
    "\uffa9\001\002\000\050\035\100\036\102\037\113\040\103" +
    "\041\106\066\101\067\115\070\107\071\111\072\120\073" +
    "\077\076\112\077\117\100\114\101\110\104\105\106\104" +
    "\107\143\112\116\001\002\000\062\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\076\uffa8\077\uffa8\100\uffa8\101" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\111\uffa8\112\uffa8" +
    "\113\uffa8\114\uffa8\001\002\000\062\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\106\065\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\073\uffb5\076\112\077\117\100\114\101" +
    "\110\104\uffb5\105\uffb5\106\uffb5\107\uffb5\111\uffb5\112\uffb5" +
    "\113\uffb5\114\uffb5\001\002\000\062\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\106\065\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\076\112\077\117\100\114\101" +
    "\110\104\uffb7\105\uffb7\106\uffb7\107\uffb7\111\uffb7\112\uffb7" +
    "\113\uffb7\114\uffb7\001\002\000\062\035\100\036\102\037" +
    "\113\040\103\041\106\065\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\076\112\077\117\100\114\101" +
    "\110\104\uffb3\105\uffb3\106\uffb3\107\uffb3\111\uffb3\112\uffb3" +
    "\113\uffb3\114\uffb3\001\002\000\062\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\106\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\076\112\077\117\100\114\101" +
    "\110\104\uffb8\105\uffb8\106\uffb8\107\uffb8\111\uffb8\112\uffb8" +
    "\113\uffb8\114\uffb8\001\002\000\062\035\100\036\102\037" +
    "\113\040\103\041\106\065\uffae\066\101\067\115\070\uffae" +
    "\071\uffae\072\uffae\073\uffae\076\112\077\117\100\114\101" +
    "\110\104\uffae\105\uffae\106\uffae\107\uffae\111\uffae\112\uffae" +
    "\113\uffae\114\uffae\001\002\000\020\017\047\020\026\021" +
    "\042\022\040\023\043\024\041\116\010\001\002\000\020" +
    "\010\uffd6\011\uffd6\012\uffd6\065\uffd6\104\uffd6\107\uffd6\116" +
    "\uffd6\001\002\000\006\065\154\104\155\001\002\000\020" +
    "\017\047\020\026\021\042\022\040\023\043\024\041\116" +
    "\010\001\002\000\004\105\156\001\002\000\020\010\uffdc" +
    "\011\uffdc\012\uffdc\065\uffdc\104\uffdc\107\uffdc\116\uffdc\001" +
    "\002\000\006\104\155\107\160\001\002\000\062\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\041\uff94\065\uff94\066\uff94\067" +
    "\uff94\070\uff94\071\uff94\072\uff94\073\uff94\076\uff94\077\uff94" +
    "\100\uff94\101\uff94\104\uff94\105\uff94\106\uff94\107\uff94\111" +
    "\uff94\112\uff94\113\uff94\114\uff94\001\002\000\052\017\047" +
    "\020\026\021\042\022\040\023\043\024\041\025\034\027" +
    "\037\031\030\032\046\033\036\034\032\046\027\050\021" +
    "\056\045\060\044\061\022\062\020\064\033\116\010\001" +
    "\002\000\004\111\163\001\002\000\004\114\164\001\002" +
    "\000\054\005\ufff9\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\025\034\027\037\031\030\032\046\033\036" +
    "\034\032\046\027\050\021\056\045\060\044\061\022\062" +
    "\020\064\033\116\010\001\002\000\004\005\166\001\002" +
    "\000\116\005\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb\064\uffcb\103" +
    "\uffcb\110\uffcb\111\uffcb\115\uffcb\116\uffcb\117\uffcb\120\uffcb" +
    "\001\002\000\006\104\uffd6\110\203\001\002\000\004\104" +
    "\171\001\002\000\046\023\071\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\062" +
    "\020\103\075\105\172\110\062\115\066\116\010\117\072" +
    "\120\065\001\002\000\006\104\uffdc\106\175\001\002\000" +
    "\050\035\100\036\102\037\113\040\103\041\106\066\101" +
    "\067\115\070\107\071\111\072\120\073\077\076\112\077" +
    "\117\100\114\101\110\104\105\105\174\106\104\112\116" +
    "\001\002\000\062\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95" +
    "\073\uff95\076\uff95\077\uff95\100\uff95\101\uff95\104\uff95\105" +
    "\uff95\106\uff95\107\uff95\111\uff95\112\uff95\113\uff95\114\uff95" +
    "\001\002\000\046\023\071\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\062\020" +
    "\103\075\107\uff91\110\062\115\066\116\010\117\072\120" +
    "\065\001\002\000\050\035\100\036\102\037\113\040\103" +
    "\041\106\065\201\066\101\067\115\070\107\071\111\072" +
    "\120\073\077\076\112\077\117\100\114\101\110\104\105" +
    "\106\104\112\116\001\002\000\004\107\200\001\002\000" +
    "\062\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\065\uff9b" +
    "\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\076" +
    "\uff9b\077\uff9b\100\uff9b\101\uff9b\104\uff9b\105\uff9b\106\uff9b" +
    "\107\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\001\002\000" +
    "\050\023\071\042\061\043\073\044\064\045\063\047\067" +
    "\051\060\052\057\053\074\054\056\062\020\103\075\107" +
    "\uff91\110\062\111\uff91\115\066\116\010\117\072\120\065" +
    "\001\002\000\006\107\uff92\111\uff92\001\002\000\046\023" +
    "\071\042\061\043\073\044\064\045\063\047\067\051\060" +
    "\052\057\053\074\054\056\062\020\103\075\110\062\111" +
    "\uff91\115\066\116\010\117\072\120\065\001\002\000\004" +
    "\111\205\001\002\000\062\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\107\uff9c\111\uff9c\112\uff9c\113\uff9c" +
    "\114\uff9c\001\002\000\050\035\100\036\102\037\113\040" +
    "\103\041\106\066\101\067\115\070\107\071\111\072\120" +
    "\073\077\076\112\077\117\100\114\101\110\104\105\106" +
    "\104\111\207\112\116\001\002\000\062\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\065\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\076\uff9f\077\uff9f\100\uff9f" +
    "\101\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\111\uff9f\112" +
    "\uff9f\113\uff9f\114\uff9f\001\002\000\044\023\071\042\061" +
    "\043\073\044\064\045\063\047\067\051\060\052\057\053" +
    "\074\054\056\062\020\103\075\110\062\115\066\116\010" +
    "\117\072\120\065\001\002\000\050\035\100\036\102\037" +
    "\113\040\103\041\106\066\101\067\115\070\107\071\111" +
    "\072\120\073\077\076\112\077\117\100\114\101\110\104" +
    "\105\106\104\111\212\112\116\001\002\000\004\113\213" +
    "\001\002\000\116\005\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\056\uffc9\060\uffc9\061\uffc9\062\uffc9\064" +
    "\uffc9\103\uffc9\110\uffc9\111\uffc9\115\uffc9\116\uffc9\117\uffc9" +
    "\120\uffc9\001\002\000\116\005\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\056\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\064\uffc0\103\uffc0\110\uffc0\111\uffc0\115\uffc0\116\uffc0" +
    "\117\uffc0\120\uffc0\001\002\000\020\017\047\020\026\021" +
    "\042\022\040\023\043\024\041\116\010\001\002\000\006" +
    "\065\217\104\155\001\002\000\020\017\047\020\026\021" +
    "\042\022\040\023\043\024\041\116\010\001\002\000\006" +
    "\104\155\107\221\001\002\000\020\010\uffd7\011\uffd7\012" +
    "\uffd7\065\uffd7\104\uffd7\107\uffd7\116\uffd7\001\002\000\004" +
    "\005\223\001\002\000\116\005\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\056\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\064\uffcf\103\uffcf\110\uffcf\111\uffcf\115\uffcf\116\uffcf" +
    "\117\uffcf\120\uffcf\001\002\000\004\005\225\001\002\000" +
    "\004\031\226\001\002\000\044\023\071\042\061\043\073" +
    "\044\064\045\063\047\067\051\060\052\057\053\074\054" +
    "\056\062\020\103\075\110\062\115\066\116\010\117\072" +
    "\120\065\001\002\000\050\035\100\036\102\037\113\040" +
    "\103\041\106\066\101\067\115\070\107\071\111\072\120" +
    "\073\077\076\112\077\117\100\114\101\110\104\105\106" +
    "\104\112\116\113\230\001\002\000\116\005\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\056\uffca\060\uffca" +
    "\061\uffca\062\uffca\064\uffca\103\uffca\110\uffca\111\uffca\115" +
    "\uffca\116\uffca\117\uffca\120\uffca\001\002\000\016\002\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\001\002\000" +
    "\016\002\ufffc\010\240\011\241\012\234\013\236\016\235" +
    "\001\002\000\020\002\ufff7\005\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\016\ufff7\001\002\000\006\013\u0100\016\377" +
    "\001\002\000\020\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\116\010\001\002\000\004\116\010\001\002" +
    "\000\020\002\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\016\ufff8\001\002\000\006\013\324\016\323\001\002" +
    "\000\006\013\243\016\242\001\002\000\020\017\047\020" +
    "\026\021\042\022\040\023\043\024\041\116\010\001\002" +
    "\000\004\116\010\001\002\000\006\014\245\114\246\001" +
    "\002\000\004\116\010\001\002\000\036\005\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\116\uffe5\001\002" +
    "\000\036\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015" +
    "\uffec\016\uffec\017\047\020\026\021\042\022\040\023\043" +
    "\024\041\116\010\001\002\000\036\005\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\116\uffe6\001\002\000" +
    "\014\010\274\011\275\012\272\104\155\116\010\001\002" +
    "\000\020\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\253\016\ufff6\001\002\000\004\111\257\001\002\000\020" +
    "\005\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016" +
    "\uffed\001\002\000\016\005\256\010\240\011\241\012\234" +
    "\013\236\016\235\001\002\000\020\002\ufff2\005\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2\001\002\000\020" +
    "\017\047\020\026\021\042\022\040\023\043\024\041\116" +
    "\010\001\002\000\006\065\264\110\265\001\002\000\006" +
    "\104\155\116\010\001\002\000\010\065\uffde\110\uffde\111" +
    "\uffde\001\002\000\010\065\uffdd\110\uffdd\111\uffdd\001\002" +
    "\000\020\017\047\020\026\021\042\022\040\023\043\024" +
    "\041\116\010\001\002\000\004\114\266\001\002\000\054" +
    "\005\ufff9\017\047\020\026\021\042\022\040\023\043\024" +
    "\041\025\034\027\037\031\030\032\046\033\036\034\032" +
    "\046\027\050\021\056\045\060\044\061\022\062\020\064" +
    "\033\116\010\001\002\000\004\005\270\001\002\000\020" +
    "\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016" +
    "\uffeb\001\002\000\010\065\uffdf\110\uffdf\111\uffdf\001\002" +
    "\000\004\116\010\001\002\000\004\113\302\001\002\000" +
    "\004\116\010\001\002\000\004\116\010\001\002\000\004" +
    "\113\277\001\002\000\036\005\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\116\uffe3\001\002\000\004\113" +
    "\301\001\002\000\036\005\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\116\uffe1\001\002\000\036\005\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\116\uffe4" +
    "\001\002\000\004\113\304\001\002\000\036\005\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\116\uffe2\001" +
    "\002\000\004\114\306\001\002\000\036\005\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\116\uffe5\001\002" +
    "\000\036\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015" +
    "\uffec\016\uffec\017\047\020\026\021\042\022\040\023\043" +
    "\024\041\116\010\001\002\000\020\005\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\015\253\016\ufff6\001\002\000\016" +
    "\005\312\010\240\011\241\012\234\013\236\016\235\001" +
    "\002\000\020\002\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\016\ufff3\001\002\000\006\104\155\116\010\001" +
    "\002\000\004\110\315\001\002\000\020\017\047\020\026" +
    "\021\042\022\040\023\043\024\041\116\010\001\002\000" +
    "\006\065\264\111\317\001\002\000\004\114\320\001\002" +
    "\000\054\005\ufff9\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\025\034\027\037\031\030\032\046\033\036" +
    "\034\032\046\027\050\021\056\045\060\044\061\022\062" +
    "\020\064\033\116\010\001\002\000\004\005\322\001\002" +
    "\000\020\002\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\016\uffe9\001\002\000\020\017\047\020\026\021\042" +
    "\022\040\023\043\024\041\116\010\001\002\000\004\116" +
    "\010\001\002\000\006\014\326\114\327\001\002\000\004" +
    "\116\010\001\002\000\036\005\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\116\uffe5\001\002\000\036\005" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec" +
    "\017\047\020\026\021\042\022\040\023\043\024\041\116" +
    "\010\001\002\000\020\005\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\253\016\ufff6\001\002\000\016\005\333\010" +
    "\240\011\241\012\234\013\236\016\235\001\002\000\020" +
    "\002\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\016" +
    "\ufff5\001\002\000\004\114\335\001\002\000\036\005\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\116\uffe5" +
    "\001\002\000\036\005\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\015\uffec\016\uffec\017\047\020\026\021\042\022\040" +
    "\023\043\024\041\116\010\001\002\000\020\005\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\015\253\016\ufff6\001\002" +
    "\000\016\005\341\010\240\011\241\012\234\013\236\016" +
    "\235\001\002\000\020\002\ufff4\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\016\ufff4\001\002\000\006\104\155\116" +
    "\010\001\002\000\004\110\344\001\002\000\020\017\047" +
    "\020\026\021\042\022\040\023\043\024\041\116\010\001" +
    "\002\000\006\065\264\111\346\001\002\000\004\114\347" +
    "\001\002\000\054\005\ufff9\017\047\020\026\021\042\022" +
    "\040\023\043\024\041\025\034\027\037\031\030\032\046" +
    "\033\036\034\032\046\027\050\021\056\045\060\044\061" +
    "\022\062\020\064\033\116\010\001\002\000\004\005\351" +
    "\001\002\000\020\002\uffea\005\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\016\uffea\001\002\000\006\014\353\114\354" +
    "\001\002\000\004\116\010\001\002\000\036\005\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\116\uffe5\001" +
    "\002\000\036\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\016\uffec\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\116\010\001\002\000\020\005\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\253\016\ufff6\001\002\000" +
    "\016\005\360\010\240\011\241\012\234\013\236\016\235" +
    "\001\002\000\020\002\ufff0\005\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\016\ufff0\001\002\000\004\114\362\001\002" +
    "\000\036\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\116\uffe5\001\002\000\036\005\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\015\uffec\016\uffec\017\047\020\026" +
    "\021\042\022\040\023\043\024\041\116\010\001\002\000" +
    "\020\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\253" +
    "\016\ufff6\001\002\000\016\005\366\010\240\011\241\012" +
    "\234\013\236\016\235\001\002\000\020\002\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\016\ufff1\001\002\000" +
    "\006\104\155\116\010\001\002\000\004\110\371\001\002" +
    "\000\020\017\047\020\026\021\042\022\040\023\043\024" +
    "\041\116\010\001\002\000\006\065\264\111\373\001\002" +
    "\000\004\114\374\001\002\000\054\005\ufff9\017\047\020" +
    "\026\021\042\022\040\023\043\024\041\025\034\027\037" +
    "\031\030\032\046\033\036\034\032\046\027\050\021\056" +
    "\045\060\044\061\022\062\020\064\033\116\010\001\002" +
    "\000\004\005\376\001\002\000\020\002\uffe8\005\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\016\uffe8\001\002\000\020" +
    "\017\047\020\026\021\042\022\040\023\043\024\041\116" +
    "\010\001\002\000\004\116\010\001\002\000\006\014\u0102" +
    "\114\u0103\001\002\000\004\116\010\001\002\000\036\005" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\116" +
    "\uffe5\001\002\000\036\005\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\015\uffec\016\uffec\017\047\020\026\021\042\022" +
    "\040\023\043\024\041\116\010\001\002\000\020\005\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\253\016\ufff6\001" +
    "\002\000\016\005\u0107\010\240\011\241\012\234\013\236" +
    "\016\235\001\002\000\020\002\uffee\005\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\016\uffee\001\002\000\004\114\u0109" +
    "\001\002\000\036\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\116\uffe5\001\002\000\036\005\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec\017\047" +
    "\020\026\021\042\022\040\023\043\024\041\116\010\001" +
    "\002\000\020\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\015\253\016\ufff6\001\002\000\016\005\u010d\010\240\011" +
    "\241\012\234\013\236\016\235\001\002\000\020\002\uffef" +
    "\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\016\uffef\001" +
    "\002\000\006\104\155\116\010\001\002\000\004\110\u0110" +
    "\001\002\000\020\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\116\010\001\002\000\006\065\264\111\u0112" +
    "\001\002\000\004\114\u0113\001\002\000\054\005\ufff9\017" +
    "\047\020\026\021\042\022\040\023\043\024\041\025\034" +
    "\027\037\031\030\032\046\033\036\034\032\046\027\050" +
    "\021\056\045\060\044\061\022\062\020\064\033\116\010" +
    "\001\002\000\004\005\u0115\001\002\000\020\002\uffe7\005" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\016\uffe7\001\002" +
    "\000\050\035\100\036\102\037\113\040\103\041\106\066" +
    "\101\067\115\070\107\071\111\072\120\073\077\076\112" +
    "\077\117\100\114\101\110\104\105\106\104\112\116\114" +
    "\u0117\001\002\000\060\005\ufff9\017\047\020\026\021\042" +
    "\022\040\023\043\024\041\025\034\026\ufff9\027\037\030" +
    "\ufff9\031\030\032\046\033\036\034\032\046\027\050\021" +
    "\056\045\060\044\061\022\062\020\064\033\116\010\001" +
    "\002\000\010\005\uffba\026\uffba\030\uffba\001\002\000\010" +
    "\005\u011d\026\u011b\030\u011a\001\002\000\044\023\071\042" +
    "\061\043\073\044\064\045\063\047\067\051\060\052\057" +
    "\053\074\054\056\062\020\103\075\110\062\115\066\116" +
    "\010\117\072\120\065\001\002\000\004\114\u011f\001\002" +
    "\000\004\005\u011e\001\002\000\116\005\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\056\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\064\uffcd\103\uffcd\110\uffcd\111\uffcd\115\uffcd" +
    "\116\uffcd\117\uffcd\120\uffcd\001\002\000\116\005\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\056\uffce\060" +
    "\uffce\061\uffce\062\uffce\064\uffce\103\uffce\110\uffce\111\uffce" +
    "\115\uffce\116\uffce\117\uffce\120\uffce\001\002\000\054\005" +
    "\ufff9\017\047\020\026\021\042\022\040\023\043\024\041" +
    "\025\034\027\037\031\030\032\046\033\036\034\032\046" +
    "\027\050\021\056\045\060\044\061\022\062\020\064\033" +
    "\116\010\001\002\000\004\005\uffb9\001\002\000\050\035" +
    "\100\036\102\037\113\040\103\041\106\066\101\067\115" +
    "\070\107\071\111\072\120\073\077\076\112\077\117\100" +
    "\114\101\110\104\105\106\104\112\116\114\u0122\001\002" +
    "\000\060\005\ufff9\017\047\020\026\021\042\022\040\023" +
    "\043\024\041\025\034\026\ufff9\027\037\030\ufff9\031\030" +
    "\032\046\033\036\034\032\046\027\050\021\056\045\060" +
    "\044\061\022\062\020\064\033\116\010\001\002\000\010" +
    "\005\uffbb\026\uffbb\030\uffbb\001\002\000\116\005\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\064\uffd0\103\uffd0\110\uffd0\111\uffd0" +
    "\115\uffd0\116\uffd0\117\uffd0\120\uffd0\001\002\000\050\035" +
    "\100\036\102\037\113\040\103\041\106\066\101\067\115" +
    "\070\107\071\111\072\120\073\077\076\112\077\117\100" +
    "\114\101\110\104\105\106\104\112\116\113\u0126\001\002" +
    "\000\116\005\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4\064\uffc4\103" +
    "\uffc4\110\uffc4\111\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4" +
    "\001\002\000\006\102\u0129\113\u0128\001\002\000\116\005" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\064\uffe0\103\uffe0\110\uffe0" +
    "\111\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\001\002\000" +
    "\044\023\071\042\061\043\073\044\064\045\063\047\067" +
    "\051\060\052\057\053\074\054\056\062\020\103\075\110" +
    "\062\115\066\116\010\117\072\120\065\001\002\000\050" +
    "\035\100\036\102\037\113\040\103\041\106\066\101\067" +
    "\115\070\107\071\111\072\120\073\077\076\112\077\117" +
    "\100\114\101\110\104\105\106\104\112\116\113\u012b\001" +
    "\002\000\116\005\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\056\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8" +
    "\103\uffc8\110\uffc8\111\uffc8\115\uffc8\116\uffc8\117\uffc8\120" +
    "\uffc8\001\002\000\050\035\100\036\102\037\113\040\103" +
    "\041\106\066\101\067\115\070\107\071\111\072\120\073" +
    "\077\076\112\077\117\100\114\101\110\104\105\106\104" +
    "\112\116\114\u012d\001\002\000\054\005\ufff9\017\047\020" +
    "\026\021\042\022\040\023\043\024\041\025\034\027\037" +
    "\031\030\032\046\033\036\034\032\046\027\050\021\056" +
    "\045\060\044\061\022\062\020\064\033\116\010\001\002" +
    "\000\004\005\u012f\001\002\000\116\005\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\064\uffcc\103\uffcc\110\uffcc\111\uffcc\115\uffcc" +
    "\116\uffcc\117\uffcc\120\uffcc\001\002\000\044\023\071\042" +
    "\061\043\073\044\064\045\063\047\067\051\060\052\057" +
    "\053\074\054\056\062\020\103\075\110\062\115\066\116" +
    "\010\117\072\120\065\001\002\000\050\035\100\036\102" +
    "\037\113\040\103\041\106\066\101\067\115\070\107\071" +
    "\111\072\120\073\077\076\112\077\117\100\114\101\110" +
    "\104\105\106\104\111\u0132\112\116\001\002\000\004\113" +
    "\u0133\001\002\000\116\005\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\056\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\064\uffc3\103\uffc3\110\uffc3\111\uffc3\115\uffc3\116\uffc3\117" +
    "\uffc3\120\uffc3\001\002\000\044\023\071\042\061\043\073" +
    "\044\064\045\063\047\067\051\060\052\057\053\074\054" +
    "\056\062\020\103\075\110\062\115\066\116\010\117\072" +
    "\120\065\001\002\000\004\113\u0141\001\002\000\044\023" +
    "\071\042\061\043\073\044\064\045\063\047\067\051\060" +
    "\052\057\053\074\054\056\062\020\103\075\110\062\115" +
    "\066\116\010\117\072\120\065\001\002\000\004\113\u013e" +
    "\001\002\000\044\023\071\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\062\020" +
    "\103\075\110\062\115\066\116\010\117\072\120\065\001" +
    "\002\000\050\035\100\036\102\037\113\040\103\041\106" +
    "\066\101\067\115\070\107\071\111\072\120\073\077\076" +
    "\112\077\117\100\114\101\110\104\105\105\u013a\106\104" +
    "\112\116\001\002\000\004\102\u013b\001\002\000\044\023" +
    "\071\042\061\043\073\044\064\045\063\047\067\051\060" +
    "\052\057\053\074\054\056\062\020\103\075\110\062\115" +
    "\066\116\010\117\072\120\065\001\002\000\050\035\100" +
    "\036\102\037\113\040\103\041\106\066\101\067\115\070" +
    "\107\071\111\072\120\073\077\076\112\077\117\100\114" +
    "\101\110\104\105\106\104\112\116\113\u013d\001\002\000" +
    "\116\005\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\056\uffc5\060\uffc5\061\uffc5\062\uffc5\064\uffc5\103\uffc5" +
    "\110\uffc5\111\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\001" +
    "\002\000\116\005\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\064\uffbf" +
    "\103\uffbf\110\uffbf\111\uffbf\115\uffbf\116\uffbf\117\uffbf\120" +
    "\uffbf\001\002\000\050\035\100\036\102\037\113\040\103" +
    "\041\106\066\101\067\115\070\107\071\111\072\120\073" +
    "\077\076\112\077\117\100\114\101\110\104\105\106\104" +
    "\112\116\113\u0140\001\002\000\116\005\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\064\uffc7\103\uffc7\110\uffc7\111\uffc7\115\uffc7" +
    "\116\uffc7\117\uffc7\120\uffc7\001\002\000\116\005\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\056\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\064\uffbe\103\uffbe\110\uffbe\111\uffbe" +
    "\115\uffbe\116\uffbe\117\uffbe\120\uffbe\001\002\000\050\035" +
    "\100\036\102\037\113\040\103\041\106\066\101\067\115" +
    "\070\107\071\111\072\120\073\077\076\112\077\117\100" +
    "\114\101\110\104\105\106\104\107\u0143\112\116\001\002" +
    "\000\004\102\u0144\001\002\000\044\023\071\042\061\043" +
    "\073\044\064\045\063\047\067\051\060\052\057\053\074" +
    "\054\056\062\020\103\075\110\062\115\066\116\010\117" +
    "\072\120\065\001\002\000\050\035\100\036\102\037\113" +
    "\040\103\041\106\066\101\067\115\070\107\071\111\072" +
    "\120\073\077\076\112\077\117\100\114\101\110\104\105" +
    "\106\104\112\116\113\u0146\001\002\000\116\005\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\056\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\064\uffc6\103\uffc6\110\uffc6\111\uffc6" +
    "\115\uffc6\116\uffc6\117\uffc6\120\uffc6\001\002\000\010\005" +
    "\ufffa\026\ufffa\030\ufffa\001\002\000\116\005\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\056\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\064\uffbc\103\uffbc\110\uffbc\111\uffbc\115" +
    "\uffbc\116\uffbc\117\uffbc\120\uffbc\001\002\000\116\005\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\056\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\064\uffc1\103\uffc1\110\uffc1\111" +
    "\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1\001\002\000\044" +
    "\023\071\042\061\043\073\044\064\045\063\047\067\051" +
    "\060\052\057\053\074\054\056\062\020\103\075\110\062" +
    "\115\066\116\010\117\072\120\065\001\002\000\050\035" +
    "\100\036\102\037\113\040\103\041\106\066\101\067\115" +
    "\070\107\071\111\072\120\073\077\076\112\077\117\100" +
    "\114\101\110\104\105\106\104\111\u014c\112\116\001\002" +
    "\000\004\113\u014d\001\002\000\116\005\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\056\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\064\uffc2\103\uffc2\110\uffc2\111\uffc2\115\uffc2" +
    "\116\uffc2\117\uffc2\120\uffc2\001\002\000\006\063\uffd2\112" +
    "\125\001\002\000\004\063\u0150\001\002\000\004\110\u0151" +
    "\001\002\000\046\023\071\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\062\020" +
    "\103\075\110\062\111\uff91\115\066\116\010\117\072\120" +
    "\065\001\002\000\004\111\u0153\001\002\000\062\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\101\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\111" +
    "\uffd4\112\uffd4\113\uffd4\114\uffd4\001\002\000\004\113\u0155" +
    "\001\002\000\024\002\ufffe\004\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\016\ufffe\057\ufffe\001\002\000\054" +
    "\005\ufff9\017\047\020\026\021\042\022\040\023\043\024" +
    "\041\025\034\027\037\031\030\032\046\033\036\034\032" +
    "\046\027\050\021\056\045\060\044\061\022\062\020\064" +
    "\033\116\010\001\002\000\004\005\u0158\001\002\000\016" +
    "\002\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\001" +
    "\002\000\016\002\ufffb\010\240\011\241\012\234\013\236" +
    "\016\235\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\004\002\004\001\001\000\004\021\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0153\001\001\000\006\007\236\010\232\001" +
    "\001\000\020\005\034\012\047\015\030\016\023\021\024" +
    "\025\050\030\022\001\001\000\004\021\u014d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u0146\012\047\015\030\016\023\021\024\025\050\030" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\u012b\021\054\030\053\001\001\000" +
    "\004\021\u0126\001\001\000\010\017\u0124\021\054\030\053" +
    "\001\001\000\014\012\047\015\030\021\024\025\u0123\030" +
    "\022\001\001\000\010\017\u0115\021\054\030\053\001\001" +
    "\000\002\001\001\000\020\005\223\012\047\015\030\016" +
    "\023\021\024\025\050\030\022\001\001\000\020\005\221" +
    "\012\047\015\030\016\023\021\024\025\050\030\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\047\015\030\016\052\021\024\025" +
    "\050\030\022\001\001\000\010\017\067\021\054\030\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\205\021\054\030\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\167\021\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\075\021\054\030\053\001\001\000" +
    "\002\001\001\000\010\017\147\021\054\030\053\001\001" +
    "\000\010\017\146\021\054\030\053\001\001\000\010\017" +
    "\145\021\054\030\053\001\001\000\010\017\144\021\054" +
    "\030\053\001\001\000\010\017\143\021\054\030\053\001" +
    "\001\000\010\017\141\021\054\030\053\001\001\000\010" +
    "\017\137\021\054\030\053\001\001\000\010\017\136\021" +
    "\054\030\053\001\001\000\010\017\135\021\054\030\053" +
    "\001\001\000\010\017\134\021\054\030\053\001\001\000" +
    "\010\017\133\021\054\030\053\001\001\000\010\017\132" +
    "\021\054\030\053\001\001\000\010\017\131\021\054\030" +
    "\053\001\001\000\010\017\130\021\054\030\053\001\001" +
    "\000\010\017\127\021\054\030\053\001\001\000\004\031" +
    "\122\001\001\000\010\017\121\021\054\030\053\001\001" +
    "\000\010\017\120\021\054\030\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\125\001\001\000\004\031\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\152\021\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\156" +
    "\021\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\047\015\030" +
    "\016\161\021\024\025\050\030\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\164\012\047\015\030" +
    "\016\023\021\024\025\050\030\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\172\021\054\030\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\175" +
    "\020\176\021\054\030\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\175\020\201" +
    "\021\054\030\053\001\001\000\002\001\001\000\012\017" +
    "\175\020\203\021\054\030\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\210\021\054\030\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\215\021\151\001\001\000\002\001\001\000\006" +
    "\015\217\021\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\226\021\054\030\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\231" +
    "\001\001\000\006\007\236\010\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\366\021\151\001\001" +
    "\000\004\021\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\312\021\151\001\001" +
    "\000\004\021\243\001\001\000\002\001\001\000\004\021" +
    "\304\001\001\000\004\011\246\001\001\000\012\013\247" +
    "\015\250\021\151\027\251\001\001\000\002\001\001\000" +
    "\004\021\272\001\001\000\006\006\254\026\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\236\010" +
    "\232\001\001\000\002\001\001\000\012\014\257\015\260" +
    "\021\151\022\261\001\001\000\002\001\001\000\004\021" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\260\021\151\022\270\001\001\000\002\001\001\000" +
    "\020\005\266\012\047\015\030\016\023\021\024\025\050" +
    "\030\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\302\001\001\000\002\001\001" +
    "\000\004\021\277\001\001\000\004\021\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\306\001\001\000\012" +
    "\013\247\015\250\021\151\027\307\001\001\000\006\006" +
    "\310\026\253\001\001\000\006\007\236\010\232\001\001" +
    "\000\002\001\001\000\004\021\313\001\001\000\002\001" +
    "\001\000\012\014\315\015\260\021\151\022\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\320\012" +
    "\047\015\030\016\023\021\024\025\050\030\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\341\021" +
    "\151\001\001\000\004\021\324\001\001\000\002\001\001" +
    "\000\004\021\333\001\001\000\004\011\327\001\001\000" +
    "\012\013\247\015\250\021\151\027\330\001\001\000\006" +
    "\006\331\026\253\001\001\000\006\007\236\010\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\335" +
    "\001\001\000\012\013\247\015\250\021\151\027\336\001" +
    "\001\000\006\006\337\026\253\001\001\000\006\007\236" +
    "\010\232\001\001\000\002\001\001\000\004\021\342\001" +
    "\001\000\002\001\001\000\012\014\344\015\260\021\151" +
    "\022\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\347\012\047\015\030\016\023\021\024\025\050" +
    "\030\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\360\001\001\000\004\011\354" +
    "\001\001\000\012\013\247\015\250\021\151\027\355\001" +
    "\001\000\006\006\356\026\253\001\001\000\006\007\236" +
    "\010\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\362\001\001\000\012\013\247\015\250\021\151" +
    "\027\363\001\001\000\006\006\364\026\253\001\001\000" +
    "\006\007\236\010\232\001\001\000\002\001\001\000\004" +
    "\021\367\001\001\000\002\001\001\000\012\014\371\015" +
    "\260\021\151\022\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\374\012\047\015\030\016\023\021" +
    "\024\025\050\030\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u010d\021\151\001\001\000\004\021" +
    "\u0100\001\001\000\002\001\001\000\004\021\u0107\001\001" +
    "\000\004\011\u0103\001\001\000\012\013\247\015\250\021" +
    "\151\027\u0104\001\001\000\006\006\u0105\026\253\001\001" +
    "\000\006\007\236\010\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u0109\001\001\000\012\013\247" +
    "\015\250\021\151\027\u010a\001\001\000\006\006\u010b\026" +
    "\253\001\001\000\006\007\236\010\232\001\001\000\002" +
    "\001\001\000\004\021\u010e\001\001\000\002\001\001\000" +
    "\012\014\u0110\015\260\021\151\022\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\u0113\012\047\015" +
    "\030\016\023\021\024\025\050\030\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\u0117\012\047\015\030\016\023\021\024\025\050\030\022" +
    "\001\001\000\004\023\u0118\001\001\000\004\024\u011b\001" +
    "\001\000\010\017\u0120\021\054\030\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\u011f\012\047\015\030\016\023\021\024" +
    "\025\050\030\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\u0122\012\047\015\030\016\023\021\024" +
    "\025\050\030\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\u0129\021\054\030\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\u012d\012\047\015\030\016\023\021\024\025" +
    "\050\030\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u0130\021\054\030\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u0141" +
    "\021\054\030\053\001\001\000\002\001\001\000\010\017" +
    "\u013e\021\054\030\053\001\001\000\002\001\001\000\010" +
    "\017\u0138\021\054\030\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u013b\021\054\030\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\u0144\021\054\030" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u014a\021\054\030\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u014e\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\175\020\u0151" +
    "\021\054\030\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u0156" +
    "\012\047\015\030\016\023\021\024\025\050\030\022\001" +
    "\001\000\002\001\001\000\004\006\u0158\001\001\000\006" +
    "\007\236\010\232\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // paramlist ::= 
            {
              ParamList RESULT =null;
		 ParamList p  = new ParamList(); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // paramlist ::= expression COMMA paramlist 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= GETSTRING 
            {
              Expression RESULT =null;
		 RESULT = new GetString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= GETBOOLEAN 
            {
              Expression RESULT =null;
		 RESULT = new GetBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= GETFLOAT 
            {
              Expression RESULT =null;
		 RESULT = new GetFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= GETINT 
            {
              Expression RESULT =null;
		 RESULT = new GetInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= CREATE type LBRACKET RBRACKET LBRACE paramlist RBRACE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLiteral(t, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= CREATE identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjectCreate(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= identifier 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= NIL 
            {
              Expression RESULT =null;
		 RESULT = new Nil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression DOT idchain 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simple_statement ::= methodcall SEMICOLON 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCallStatement(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_statement ::= identifier DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_statement ::= identifier INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simple_statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_statement ::= type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_statement ::= FOR LPAREN statement expression SEMICOLON statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // methodcall ::= EXEC identifier idchain WITH LPAREN paramlist RPAREN 
            {
              MethodCall RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall(i1, i2, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arglist ::= parameter 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArgList l = new ArgList(); l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arglist ::= arglist COMMA parameter 
            {
              ArgList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // classvardec ::= type PUBLIC identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classvardec ::= type PROTECTED identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classvardec ::= type PRIVATE identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classvardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vardeclist ::= vardeclist classvardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // methoddef ::= PROTECTED SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // methoddef ::= SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // methoddef ::= PRIVATE SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // methoddef ::= PUBLIC SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constructor ::= CONSTRUCTOR RPAREN arglist LPAREN COLON statementlist END 
            {
              Constructor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constructorlist ::= 
            {
              ConstructorList RESULT =null;
		 RESULT = new ConstructorList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constructorlist ::= constructorlist constructor 
            {
              ConstructorList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstructorList l = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classdef ::= PROTECTED CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classdef ::= PROTECTED CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 1, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 1, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classdef ::= PRIVATE CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classdef ::= PUBLIC CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

