
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 13 23:35:45 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 13 23:35:45 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\005\010\000\002\005\012\000" +
    "\002\006\013\000\002\007\004\000\002\007\002\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\017" +
    "\004\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\010\000" +
    "\002\012\003\000\002\012\003\000\002\022\002\000\002" +
    "\013\015\000\002\013\010\000\002\013\006\000\002\013" +
    "\007\000\002\013\006\000\002\013\011\000\002\013\011" +
    "\000\002\013\003\000\002\013\005\000\002\013\007\000" +
    "\002\013\007\000\002\020\007\000\002\020\002\000\002" +
    "\021\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\006\000\002\014" +
    "\006\000\002\014\005\000\002\014\010\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\014\004\000\002\014\003\000\002\014\007\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\007\000\002\014\010\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\004\005\001\002\000\004\002\307\001" +
    "\002\000\040\005\ufffe\013\027\014\011\015\024\016\022" +
    "\017\025\020\023\022\020\024\021\026\014\027\015\041" +
    "\012\043\006\051\026\102\016\001\002\000\004\074\303" +
    "\001\002\000\042\005\ufffe\012\ufffe\013\027\014\011\015" +
    "\024\016\022\017\025\020\023\022\020\024\021\026\014" +
    "\027\015\041\012\043\006\051\026\102\016\001\002\000" +
    "\012\066\264\070\265\072\263\102\uffeb\001\002\000\012" +
    "\054\ufff0\070\ufff0\073\ufff0\102\ufff0\001\002\000\004\074" +
    "\257\001\002\000\006\070\144\102\016\001\002\000\044" +
    "\017\046\021\053\035\036\036\050\037\041\040\040\042" +
    "\044\044\035\045\034\046\051\047\033\067\052\074\037" +
    "\101\043\102\016\103\047\104\042\001\002\000\044\017" +
    "\046\021\053\035\036\036\050\037\041\040\040\042\044" +
    "\044\035\045\034\046\051\047\033\067\052\074\037\101" +
    "\043\102\016\103\047\104\042\001\002\000\074\010\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\100\uffb4\102\uffb4\001\002\000\004\005\211\001\002\000" +
    "\044\017\046\021\053\035\036\036\050\037\041\040\040" +
    "\042\044\044\035\045\034\046\051\047\033\067\052\074" +
    "\037\101\043\102\016\103\047\104\042\001\002\000\040" +
    "\005\ufffe\013\027\014\011\015\024\016\022\017\025\020" +
    "\023\022\020\024\021\026\014\027\015\041\012\043\006" +
    "\051\026\102\016\001\002\000\012\054\uffee\070\uffee\073" +
    "\uffee\102\uffee\001\002\000\012\054\uffed\070\uffed\073\uffed" +
    "\102\uffed\001\002\000\012\054\uffef\070\uffef\073\uffef\102" +
    "\uffef\001\002\000\004\072\157\001\002\000\004\074\031" +
    "\001\002\000\012\054\uffea\070\uffea\073\uffea\102\uffea\001" +
    "\002\000\046\005\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\041\uffe1\043\uffe1\051\uffe1\102\uffe1" +
    "\001\002\000\044\017\046\021\053\035\036\036\050\037" +
    "\041\040\040\042\044\044\035\045\034\046\051\047\033" +
    "\067\052\074\037\101\043\102\016\103\047\104\042\001" +
    "\002\000\064\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\070\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\001\002\000\064\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\075\uffba\076\uffba\077" +
    "\uffba\100\uffba\001\002\000\064\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\001\002\000\064\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\100\uffbd\001\002\000\064\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\070\uffc5\071\uffc5\072\uffc5\073" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\001\002\000\044" +
    "\017\046\021\053\035\036\036\050\037\041\040\040\042" +
    "\044\044\035\045\034\046\051\047\033\067\052\074\037" +
    "\101\043\102\016\103\047\104\042\001\002\000\064\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\070\uffc3\071\uffc3\072\uffc3" +
    "\073\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\001\002\000" +
    "\064\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\001" +
    "\002\000\064\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\075\uffc6\076\uffc6\077\uffc6\100" +
    "\uffc6\001\002\000\064\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\001\002\000\004\102\016\001\002\000\052" +
    "\030\061\031\063\032\076\033\064\034\071\052\102\053" +
    "\065\055\062\056\100\057\072\060\074\061\104\062\075" +
    "\063\103\064\077\065\073\070\066\072\067\075\147\076" +
    "\101\001\002\000\004\072\141\001\002\000\064\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\070\uffc7\071\uffc7\072\uffc7\073" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\001\002\000\064" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\070\uffc4\071\uffc4\072" +
    "\uffc4\073\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\001\002" +
    "\000\064\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb" +
    "\001\002\000\044\017\046\021\053\035\036\036\050\037" +
    "\041\040\040\042\044\044\035\045\034\046\051\047\033" +
    "\067\052\074\037\101\043\102\016\103\047\104\042\001" +
    "\002\000\020\013\027\014\011\015\024\016\022\017\025" +
    "\020\023\102\016\001\002\000\012\054\uffeb\070\uffeb\073" +
    "\uffeb\102\uffeb\001\002\000\004\070\056\001\002\000\046" +
    "\017\046\021\053\035\036\036\050\037\041\040\040\042" +
    "\044\044\035\045\034\046\051\047\033\067\052\071\057" +
    "\074\037\101\043\102\016\103\047\104\042\001\002\000" +
    "\012\054\ufff1\070\ufff1\073\ufff1\102\ufff1\001\002\000\052" +
    "\030\061\031\063\032\076\033\064\034\071\052\102\053" +
    "\065\055\062\056\100\057\072\060\074\061\104\062\075" +
    "\063\103\064\077\065\073\070\066\071\070\072\067\076" +
    "\101\001\002\000\044\017\046\021\053\035\036\036\050" +
    "\037\041\040\040\042\044\044\035\045\034\046\051\047" +
    "\033\067\052\074\037\101\043\102\016\103\047\104\042" +
    "\001\002\000\044\017\046\021\053\035\036\036\050\037" +
    "\041\040\040\042\044\044\035\045\034\046\051\047\033" +
    "\067\052\074\037\101\043\102\016\103\047\104\042\001" +
    "\002\000\044\017\046\021\053\035\036\036\050\037\041" +
    "\040\040\042\044\044\035\045\034\046\051\047\033\067" +
    "\052\074\037\101\043\102\016\103\047\104\042\001\002" +
    "\000\044\017\046\021\053\035\036\036\050\037\041\040" +
    "\040\042\044\044\035\045\034\046\051\047\033\067\052" +
    "\074\037\101\043\102\016\103\047\104\042\001\002\000" +
    "\004\102\016\001\002\000\044\017\046\021\053\035\036" +
    "\036\050\037\041\040\040\042\044\044\035\045\034\046" +
    "\051\047\033\067\052\074\037\101\043\102\016\103\047" +
    "\104\042\001\002\000\044\017\046\021\053\035\036\036" +
    "\050\037\041\040\040\042\044\044\035\045\034\046\051" +
    "\047\033\067\052\074\037\101\043\102\016\103\047\104" +
    "\042\001\002\000\064\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\073\uffb9\075\uffb9\076\uffb9\077" +
    "\uffb9\100\uffb9\001\002\000\044\017\046\021\053\035\036" +
    "\036\050\037\041\040\040\042\044\044\035\045\034\046" +
    "\051\047\033\067\052\074\037\101\043\102\016\103\047" +
    "\104\042\001\002\000\044\017\046\021\053\035\036\036" +
    "\050\037\041\040\040\042\044\044\035\045\034\046\051" +
    "\047\033\067\052\074\037\101\043\102\016\103\047\104" +
    "\042\001\002\000\044\017\046\021\053\035\036\036\050" +
    "\037\041\040\040\042\044\044\035\045\034\046\051\047" +
    "\033\067\052\074\037\101\043\102\016\103\047\104\042" +
    "\001\002\000\044\017\046\021\053\035\036\036\050\037" +
    "\041\040\040\042\044\044\035\045\034\046\051\047\033" +
    "\067\052\074\037\101\043\102\016\103\047\104\042\001" +
    "\002\000\044\017\046\021\053\035\036\036\050\037\041" +
    "\040\040\042\044\044\035\045\034\046\051\047\033\067" +
    "\052\074\037\101\043\102\016\103\047\104\042\001\002" +
    "\000\044\017\046\021\053\035\036\036\050\037\041\040" +
    "\040\042\044\044\035\045\034\046\051\047\033\067\052" +
    "\074\037\101\043\102\016\103\047\104\042\001\002\000" +
    "\044\017\046\021\053\035\036\036\050\037\041\040\040" +
    "\042\044\044\035\045\034\046\051\047\033\067\052\074" +
    "\037\101\043\102\016\103\047\104\042\001\002\000\044" +
    "\017\046\021\053\035\036\036\050\037\041\040\040\042" +
    "\044\044\035\045\034\046\051\047\033\067\052\074\037" +
    "\101\043\102\016\103\047\104\042\001\002\000\004\050" +
    "\110\001\002\000\004\102\016\001\002\000\044\017\046" +
    "\021\053\035\036\036\050\037\041\040\040\042\044\044" +
    "\035\045\034\046\051\047\033\067\052\074\037\101\043" +
    "\102\016\103\047\104\042\001\002\000\044\017\046\021" +
    "\053\035\036\036\050\037\041\040\040\042\044\044\035" +
    "\045\034\046\051\047\033\067\052\074\037\101\043\102" +
    "\016\103\047\104\042\001\002\000\064\030\061\031\063" +
    "\032\076\033\064\034\071\052\uffd2\053\uffd2\054\uffd2\055" +
    "\062\056\100\057\uffd2\060\uffd2\061\uffd2\062\075\063\103" +
    "\064\077\065\073\070\uffd2\071\uffd2\072\uffd2\073\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\100\uffd2\001\002\000\064\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\071\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\070\uffcf\071\uffcf\072\uffcf\073" +
    "\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\001\002\000\064" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\075\uffca\076\uffca\077\uffca\100\uffca\001\002" +
    "\000\064\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\001\002\000\064\030\061\031\063\032\076\033\064\034" +
    "\071\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\075\063\103\064\077\065\073\070" +
    "\uffd4\071\uffd4\072\uffd4\073\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\001\002\000\064\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\071\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\100\uffcd\001\002\000\064\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\071\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\075\063\103\064" +
    "\077\065\073\070\uffd8\071\uffd8\072\uffd8\073\uffd8\075\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\001\002\000\064\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\071\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\075\uffd0\076\uffd0\077\uffd0\100\uffd0\001\002\000\064\030" +
    "\061\031\063\032\076\033\064\034\071\052\uffd1\053\uffd1" +
    "\054\uffd1\055\062\056\100\057\uffd1\060\uffd1\061\uffd1\062" +
    "\075\063\103\064\077\065\073\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\001\002\000" +
    "\064\030\uffce\031\uffce\032\uffce\033\uffce\034\071\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\070\uffce\071\uffce" +
    "\072\uffce\073\uffce\075\uffce\076\uffce\077\uffce\100\uffce\001" +
    "\002\000\064\030\061\031\063\032\076\033\064\034\071" +
    "\052\uffd3\053\uffd3\054\uffd3\055\062\056\100\057\uffd3\060" +
    "\uffd3\061\uffd3\062\075\063\103\064\077\065\073\070\uffd3" +
    "\071\uffd3\072\uffd3\073\uffd3\075\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\001\002\000\064\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\073\uffd6\075\uffd6\076\uffd6\077" +
    "\uffd6\100\uffd6\001\002\000\052\030\061\031\063\032\076" +
    "\033\064\034\071\052\102\053\065\055\062\056\100\057" +
    "\072\060\074\061\104\062\075\063\103\064\077\065\073" +
    "\070\066\072\067\073\122\076\101\001\002\000\064\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\070\uffcb\071\uffcb\072\uffcb" +
    "\073\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\001\002\000" +
    "\052\030\061\031\063\032\076\033\064\034\071\052\102" +
    "\053\065\055\062\056\100\057\072\060\074\061\104\062" +
    "\075\063\103\064\077\065\073\070\066\071\124\072\067" +
    "\076\101\001\002\000\064\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\100\uffcc\001\002\000\004\074\126\001\002\000" +
    "\044\017\046\021\053\035\036\036\050\037\041\040\040" +
    "\042\044\044\035\045\034\046\051\047\033\067\052\074" +
    "\037\101\043\102\016\103\047\104\042\001\002\000\054" +
    "\030\061\031\063\032\076\033\064\034\071\052\102\053" +
    "\065\054\132\055\062\056\100\057\072\060\074\061\104" +
    "\062\075\063\103\064\077\065\073\070\066\072\067\075" +
    "\uffb5\076\101\001\002\000\004\075\131\001\002\000\064" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\070\uffc9\071\uffc9\072" +
    "\uffc9\073\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\001\002" +
    "\000\044\017\046\021\053\035\036\036\050\037\041\040" +
    "\040\042\044\044\035\045\034\046\051\047\033\067\052" +
    "\074\037\101\043\102\016\103\047\104\042\001\002\000" +
    "\004\075\uffb6\001\002\000\064\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\071\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\075\063\103\064\077" +
    "\065\073\070\uffd7\071\uffd7\072\uffd7\073\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\100\uffd7\001\002\000\064\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\071\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\075\063\103" +
    "\064\077\065\073\070\uffd9\071\uffd9\072\uffd9\073\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\001\002\000\064\030\061" +
    "\031\063\032\076\033\064\034\071\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\075" +
    "\063\103\064\077\065\073\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\001\002\000\064" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\071\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\075\063\103\064\077\065\073\070\uffda\071\uffda\072" +
    "\uffda\073\uffda\075\uffda\076\uffda\077\uffda\100\uffda\001\002" +
    "\000\064\030\061\031\063\032\076\033\064\034\071\052" +
    "\102\053\065\054\uffc1\055\062\056\100\057\072\060\074" +
    "\061\104\062\075\063\103\064\077\065\073\070\066\071" +
    "\uffc1\072\067\073\uffc1\075\uffc1\076\101\077\uffc1\100\uffc1" +
    "\001\002\000\020\013\027\014\011\015\024\016\022\017" +
    "\025\020\023\102\016\001\002\000\006\054\143\070\144" +
    "\001\002\000\020\013\027\014\011\015\024\016\022\017" +
    "\025\020\023\102\016\001\002\000\004\071\057\001\002" +
    "\000\006\070\144\073\146\001\002\000\064\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8" +
    "\075\uffb8\076\uffb8\077\uffb8\100\uffb8\001\002\000\004\077" +
    "\150\001\002\000\046\005\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\041\uffe5\043\uffe5\051\uffe5" +
    "\102\uffe5\001\002\000\004\074\152\001\002\000\044\017" +
    "\046\021\053\035\036\036\050\037\041\040\040\042\044" +
    "\044\035\045\034\046\051\047\033\067\052\074\037\101" +
    "\043\102\016\103\047\104\042\001\002\000\004\075\154" +
    "\001\002\000\064\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\070" +
    "\uffbf\071\uffbf\072\uffbf\073\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\001\002\000\052\030\061\031\063\032\076\033" +
    "\064\034\071\052\102\053\065\055\062\056\100\057\072" +
    "\060\074\061\104\062\075\063\103\064\077\065\073\070" +
    "\066\072\067\075\156\076\101\001\002\000\064\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\064\uffc2\065\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\001\002\000\020" +
    "\013\027\014\011\015\024\016\022\017\025\020\023\102" +
    "\016\001\002\000\006\054\161\070\144\001\002\000\020" +
    "\013\027\014\011\015\024\016\022\017\025\020\023\102" +
    "\016\001\002\000\006\070\144\073\163\001\002\000\012" +
    "\054\uffec\070\uffec\073\uffec\102\uffec\001\002\000\004\005" +
    "\165\001\002\000\004\022\uffe9\001\002\000\004\022\167" +
    "\001\002\000\044\017\046\021\053\035\036\036\050\037" +
    "\041\040\040\042\044\044\035\045\034\046\051\047\033" +
    "\067\052\074\037\101\043\102\016\103\047\104\042\001" +
    "\002\000\052\030\061\031\063\032\076\033\064\034\071" +
    "\052\102\053\065\055\062\056\100\057\072\060\074\061" +
    "\104\062\075\063\103\064\077\065\073\070\066\072\067" +
    "\076\101\100\171\001\002\000\036\013\027\014\011\015" +
    "\024\016\022\017\025\020\023\022\020\024\021\026\014" +
    "\027\015\041\012\043\006\051\026\102\016\001\002\000" +
    "\006\023\uffdc\025\uffdc\001\002\000\006\023\175\025\174" +
    "\001\002\000\044\017\046\021\053\035\036\036\050\037" +
    "\041\040\040\042\044\044\035\045\034\046\051\047\033" +
    "\067\052\074\037\101\043\102\016\103\047\104\042\001" +
    "\002\000\036\013\027\014\011\015\024\016\022\017\025" +
    "\020\023\022\020\024\021\026\014\027\015\041\012\043" +
    "\006\051\026\102\016\001\002\000\004\005\177\001\002" +
    "\000\046\005\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\041\uffe8\043\uffe8\051\uffe8\102\uffe8\001" +
    "\002\000\004\005\uffdb\001\002\000\052\030\061\031\063" +
    "\032\076\033\064\034\071\052\102\053\065\055\062\056" +
    "\100\057\072\060\074\061\104\062\075\063\103\064\077" +
    "\065\073\070\066\072\067\076\101\100\202\001\002\000" +
    "\036\013\027\014\011\015\024\016\022\017\025\020\023" +
    "\022\020\024\021\026\014\027\015\041\012\043\006\051" +
    "\026\102\016\001\002\000\010\005\uffdd\023\uffdd\025\uffdd" +
    "\001\002\000\052\030\061\031\063\032\076\033\064\034" +
    "\071\052\102\053\065\055\062\056\100\057\072\060\074" +
    "\061\104\062\075\063\103\064\077\065\073\070\066\072" +
    "\067\076\101\100\205\001\002\000\036\013\027\014\011" +
    "\015\024\016\022\017\025\020\023\022\020\024\021\026" +
    "\014\027\015\041\012\043\006\051\026\102\016\001\002" +
    "\000\006\005\uffdc\025\uffdc\001\002\000\006\005\210\025" +
    "\174\001\002\000\046\005\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\041\uffe7\043\uffe7\051\uffe7" +
    "\102\uffe7\001\002\000\010\002\ufffb\006\ufffb\011\ufffb\001" +
    "\002\000\010\002\001\006\215\011\214\001\002\000\012" +
    "\002\ufffc\006\ufffc\007\ufffc\011\ufffc\001\002\000\020\013" +
    "\027\014\011\015\024\016\022\017\025\020\023\102\016" +
    "\001\002\000\004\102\016\001\002\000\012\002\ufffd\006" +
    "\ufffd\007\ufffd\011\ufffd\001\002\000\006\010\220\100\221" +
    "\001\002\000\004\102\016\001\002\000\026\006\ufff6\007" +
    "\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\102\ufff6\001\002\000\026\006\ufffb\007\ufffb\011" +
    "\ufffb\013\027\014\011\015\024\016\022\017\025\020\023" +
    "\102\016\001\002\000\026\006\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\102\ufff7" +
    "\001\002\000\010\006\215\007\225\011\214\001\002\000" +
    "\012\002\ufffa\006\ufffa\007\ufffa\011\ufffa\001\002\000\004" +
    "\100\227\001\002\000\026\006\ufff6\007\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\102\ufff6" +
    "\001\002\000\026\006\ufffb\007\ufffb\011\ufffb\013\027\014" +
    "\011\015\024\016\022\017\025\020\023\102\016\001\002" +
    "\000\010\006\215\007\232\011\214\001\002\000\012\002" +
    "\ufff9\006\ufff9\007\ufff9\011\ufff9\001\002\000\006\070\144" +
    "\102\016\001\002\000\004\075\235\001\002\000\020\013" +
    "\027\014\011\015\024\016\022\017\025\020\023\102\016" +
    "\001\002\000\006\054\242\074\243\001\002\000\006\070" +
    "\144\102\016\001\002\000\006\054\ufff3\074\ufff3\001\002" +
    "\000\006\054\ufff2\074\ufff2\001\002\000\020\013\027\014" +
    "\011\015\024\016\022\017\025\020\023\102\016\001\002" +
    "\000\004\100\244\001\002\000\040\012\ufffe\013\027\014" +
    "\011\015\024\016\022\017\025\020\023\022\020\024\021" +
    "\026\014\027\015\041\012\043\006\051\026\102\016\001" +
    "\002\000\004\012\246\001\002\000\012\002\ufff8\006\ufff8" +
    "\007\ufff8\011\ufff8\001\002\000\006\054\ufff4\074\ufff4\001" +
    "\002\000\052\030\061\031\063\032\076\033\064\034\071" +
    "\052\102\053\065\055\062\056\100\057\072\060\074\061" +
    "\104\062\075\063\103\064\077\065\073\070\066\072\067" +
    "\076\101\077\251\001\002\000\046\005\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\041\uffe0\043" +
    "\uffe0\051\uffe0\102\uffe0\001\002\000\052\030\061\031\063" +
    "\032\076\033\064\034\071\052\102\053\065\055\062\056" +
    "\100\057\072\060\074\061\104\062\075\063\103\064\077" +
    "\065\073\070\066\072\067\076\101\100\253\001\002\000" +
    "\036\013\027\014\011\015\024\016\022\017\025\020\023" +
    "\022\020\024\021\026\014\027\015\041\012\043\006\051" +
    "\026\102\016\001\002\000\046\005\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\041\uffe6\043\uffe6" +
    "\051\uffe6\102\uffe6\001\002\000\004\077\256\001\002\000" +
    "\054\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\041\ufff5\043\ufff5" +
    "\051\ufff5\102\ufff5\001\002\000\044\017\046\021\053\035" +
    "\036\036\050\037\041\040\040\042\044\044\035\045\034" +
    "\046\051\047\033\067\052\074\037\101\043\102\016\103" +
    "\047\104\042\001\002\000\052\030\061\031\063\032\076" +
    "\033\064\034\071\052\102\053\065\055\062\056\100\057" +
    "\072\060\074\061\104\062\075\063\103\064\077\065\073" +
    "\070\066\072\067\075\261\076\101\001\002\000\004\077" +
    "\262\001\002\000\046\005\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\041\uffdf\043\uffdf\051\uffdf" +
    "\102\uffdf\001\002\000\044\017\046\021\053\035\036\036" +
    "\050\037\041\040\040\042\044\044\035\045\034\046\051" +
    "\047\033\067\052\074\037\101\043\102\016\103\047\104" +
    "\042\001\002\000\044\017\046\021\053\035\036\036\050" +
    "\037\041\040\040\042\044\044\035\045\034\046\051\047" +
    "\033\067\052\074\037\101\043\102\016\103\047\104\042" +
    "\001\002\000\044\017\046\021\053\035\036\036\050\037" +
    "\041\040\040\042\044\044\035\045\034\046\051\047\033" +
    "\067\052\074\037\101\043\102\016\103\047\104\042\001" +
    "\002\000\052\030\061\031\063\032\076\033\064\034\071" +
    "\052\102\053\065\055\062\056\100\057\072\060\074\061" +
    "\104\062\075\063\103\064\077\065\073\070\066\071\267" +
    "\072\067\076\101\001\002\000\004\066\270\001\002\000" +
    "\044\017\046\021\053\035\036\036\050\037\041\040\040" +
    "\042\044\044\035\045\034\046\051\047\033\067\052\074" +
    "\037\101\043\102\016\103\047\104\042\001\002\000\052" +
    "\030\061\031\063\032\076\033\064\034\071\052\102\053" +
    "\065\055\062\056\100\057\072\060\074\061\104\062\075" +
    "\063\103\064\077\065\073\070\066\072\067\076\101\077" +
    "\272\001\002\000\046\005\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\041\uffe2\043\uffe2\051\uffe2" +
    "\102\uffe2\001\002\000\052\030\061\031\063\032\076\033" +
    "\064\034\071\052\102\053\065\055\062\056\100\057\072" +
    "\060\074\061\104\062\075\063\103\064\077\065\073\070" +
    "\066\072\067\076\101\077\274\001\002\000\046\005\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\041\uffe4\043\uffe4\051\uffe4\102\uffe4\001\002\000\052\030" +
    "\061\031\063\032\076\033\064\034\071\052\102\053\065" +
    "\055\062\056\100\057\072\060\074\061\104\062\075\063" +
    "\103\064\077\065\073\070\066\072\067\073\276\076\101" +
    "\001\002\000\004\066\277\001\002\000\044\017\046\021" +
    "\053\035\036\036\050\037\041\040\040\042\044\044\035" +
    "\045\034\046\051\047\033\067\052\074\037\101\043\102" +
    "\016\103\047\104\042\001\002\000\052\030\061\031\063" +
    "\032\076\033\064\034\071\052\102\053\065\055\062\056" +
    "\100\057\072\060\074\061\104\062\075\063\103\064\077" +
    "\065\073\070\066\072\067\076\101\077\301\001\002\000" +
    "\046\005\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\041\uffe3\043\uffe3\051\uffe3\102\uffe3\001\002" +
    "\000\006\005\uffff\012\uffff\001\002\000\044\017\046\021" +
    "\053\035\036\036\050\037\041\040\040\042\044\044\035" +
    "\045\034\046\051\047\033\067\052\074\037\101\043\102" +
    "\016\103\047\104\042\001\002\000\052\030\061\031\063" +
    "\032\076\033\064\034\071\052\102\053\065\055\062\056" +
    "\100\057\072\060\074\061\104\062\075\063\103\064\077" +
    "\065\073\070\066\072\067\075\305\076\101\001\002\000" +
    "\004\077\306\001\002\000\046\005\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\041\uffde\043\uffde" +
    "\051\uffde\102\uffde\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\016\010\027\012\012\013\006\016\007\001\001" +
    "\000\002\001\001\000\014\003\301\010\027\012\012\013" +
    "\006\016\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\254\001\001\000\006\014" +
    "\251\016\031\001\001\000\006\014\247\016\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\203\016" +
    "\031\001\001\000\014\003\163\010\027\012\012\013\006" +
    "\016\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\044\016\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\154\016" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\137\016\031\001" +
    "\001\000\006\012\054\016\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\057\016\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\136\016\031" +
    "\001\001\000\006\014\135\016\031\001\001\000\006\014" +
    "\134\016\031\001\001\000\006\014\133\016\031\001\001" +
    "\000\004\016\124\001\001\000\006\014\122\016\031\001" +
    "\001\000\006\014\120\016\031\001\001\000\002\001\001" +
    "\000\006\014\117\016\031\001\001\000\006\014\116\016" +
    "\031\001\001\000\006\014\115\016\031\001\001\000\006" +
    "\014\114\016\031\001\001\000\006\014\113\016\031\001" +
    "\001\000\006\014\112\016\031\001\001\000\006\014\111" +
    "\016\031\001\001\000\006\014\110\016\031\001\001\000" +
    "\002\001\001\000\004\016\106\001\001\000\006\014\105" +
    "\016\031\001\001\000\006\014\104\016\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\126\015\127\016\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\126\015\132\016\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\141\016\053\001" +
    "\001\000\002\001\001\000\006\012\144\016\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\126\015\152\016\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\157\016\053\001\001\000\002\001\001\000\006\012" +
    "\161\016\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\165\001\001\000\002\001" +
    "\001\000\006\014\167\016\031\001\001\000\002\001\001" +
    "\000\012\010\027\012\012\013\171\016\007\001\001\000" +
    "\004\020\172\001\001\000\004\021\175\001\001\000\006" +
    "\014\200\016\031\001\001\000\012\010\027\012\012\013" +
    "\177\016\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\027\012" +
    "\012\013\202\016\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\027\012\012\013\205\016\007\001" +
    "\001\000\004\020\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\211\001\001\000\006\005\215\006" +
    "\212\001\001\000\002\001\001\000\006\012\232\016\053" +
    "\001\001\000\004\016\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\225\001\001\000\004\007\221" +
    "\001\001\000\012\004\223\010\222\012\012\016\053\001" +
    "\001\000\002\001\001\000\006\005\215\006\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\227\001" +
    "\001\000\012\004\230\010\222\012\012\016\053\001\001" +
    "\000\006\005\215\006\212\001\001\000\002\001\001\000" +
    "\004\016\233\001\001\000\002\001\001\000\012\011\235" +
    "\012\236\016\053\017\237\001\001\000\002\001\001\000" +
    "\004\016\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\236\016\053\017\246\001\001\000\002\001" +
    "\001\000\014\003\244\010\027\012\012\013\006\016\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\027\012\012\013\253\016\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\257\016\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\274\016\031\001\001" +
    "\000\006\014\272\016\031\001\001\000\006\014\265\016" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\270\016\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\277\016\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\303\016\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // paramlist ::= expression 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParamList p  = new ParamList(); p.add(e); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramlist ::= expression COMMA paramlist 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= ARRAY type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= GETSTRING 
            {
              Expression RESULT =null;
		 RESULT = new GetString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= GETBOOLEAN 
            {
              Expression RESULT =null;
		 RESULT = new GetBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= GETFLOAT 
            {
              Expression RESULT =null;
		 RESULT = new GetFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= GETINT 
            {
              Expression RESULT =null;
		 RESULT = new GetInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= CREATE identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjectCreate(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= identifier 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= NIL 
            {
              Expression RESULT =null;
		 RESULT = new Nil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression AT identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall(e, i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression POINTER identifier 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // else ::= ELSE statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ratherlist ::= ratherlist RATHER expression COLON statement 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= WHILE expression COLON statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement l = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF expression COLON statement ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= BEGIN statementlist END NT$0 IF expression COLON statement ratherlist else END 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = new Block(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arglist ::= parameter 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArgList l = new ArgList(); l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arglist ::= arglist COMMA parameter 
            {
              ArgList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vardeclist ::= vardeclist vardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methoddef ::= SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist ENDSUBR 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist deflist ENDCLASS 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classdef ::= CLASS identifier COLON vardeclist deflist ENDCLASS 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

