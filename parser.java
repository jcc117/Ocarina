
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 26 23:06:24 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 26 23:06:24 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\002\000\002" +
    "\007\012\000\002\007\014\000\002\007\014\000\002\007" +
    "\012\000\002\007\013\000\002\007\011\000\002\007\014" +
    "\000\002\007\012\000\002\007\013\000\002\007\015\000" +
    "\002\007\015\000\002\007\013\000\002\007\014\000\002" +
    "\007\012\000\002\007\015\000\002\007\013\000\002\027" +
    "\004\000\002\027\002\000\002\026\007\000\002\010\012" +
    "\000\002\010\012\000\002\010\011\000\002\010\012\000" +
    "\002\011\004\000\002\011\002\000\002\013\005\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\012" +
    "\005\000\002\014\006\000\002\014\004\000\002\034\005" +
    "\000\002\034\002\000\002\022\004\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\010\000\002\015\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\005\000\002\015\007\000\002\032\006\000\002" +
    "\030\007\000\002\030\007\000\002\031\005\000\002\031" +
    "\002\000\002\016\003\000\002\016\004\000\002\025\005" +
    "\000\002\025\011\000\002\025\010\000\002\025\007\000" +
    "\002\025\007\000\002\025\007\000\002\025\014\000\002" +
    "\025\010\000\002\025\007\000\002\025\007\000\002\025" +
    "\006\000\002\025\011\000\002\025\011\000\002\025\005" +
    "\000\002\025\007\000\002\025\007\000\002\025\004\000" +
    "\002\025\004\000\002\025\006\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\003\000\002\025" +
    "\004\000\002\025\006\000\002\023\007\000\002\023\002" +
    "\000\002\024\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\017\006\000\002" +
    "\017\004\000\002\017\003\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\017\005\000\002\017\007\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\007\000\002\017\010\000\002\017\003" +
    "\000\002\017\004\000\002\017\003\000\002\017\007\000" +
    "\002\020\006\000\002\020\004\000\002\033\005\000\002" +
    "\033\002\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\004\006\004\001\002\000\004\127\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\124\011\001\002\000\112\010\uff72\011\uff72\012" +
    "\uff72\014\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72" +
    "\050\uff72\072\uff72\073\uff72\075\uff72\077\uff72\100\uff72\101" +
    "\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72" +
    "\110\uff72\111\uff72\112\uff72\113\uff72\115\uff72\116\uff72\117" +
    "\uff72\120\uff72\121\uff72\122\uff72\123\uff72\124\uff72\125\uff72" +
    "\127\uff72\001\002\000\026\002\ufffd\004\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\017\ufffd\020\ufffd\066\ufffd" +
    "\001\002\000\026\002\ufff6\004\017\007\015\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\017\ufff6\020\ufff6\066\013\001\002" +
    "\000\004\004\u01c0\001\002\000\004\002\001\001\002\000" +
    "\004\127\010\001\002\000\020\002\uffff\010\320\011\321" +
    "\012\312\013\316\017\314\020\315\001\002\000\070\005" +
    "\ufff9\016\053\021\054\022\025\023\044\024\042\025\045" +
    "\026\043\027\057\030\047\031\034\033\040\035\036\036" +
    "\030\037\052\040\041\041\051\042\032\053\037\055\027" +
    "\057\020\065\050\067\046\070\023\071\021\074\033\127" +
    "\010\001\002\000\004\121\u01b9\001\002\000\006\053\u01b2" +
    "\127\010\001\002\000\004\124\u01b0\001\002\000\004\124" +
    "\u01af\001\002\000\076\005\ufff9\016\053\021\054\022\025" +
    "\023\044\024\042\025\045\026\043\027\057\030\047\031" +
    "\034\032\ufff9\033\040\034\ufff9\035\036\036\030\037\052" +
    "\040\041\041\051\042\032\053\037\055\027\057\020\065" +
    "\050\067\046\070\023\071\021\074\033\120\ufff9\127\010" +
    "\001\002\000\074\010\uffd1\011\uffd1\012\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\075\uffd1\077\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\107\uffd1\110" +
    "\uffd1\111\uffd1\112\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1" +
    "\122\uffd1\123\uffd1\124\uffd1\125\uffd1\127\uffd1\001\002\000" +
    "\020\105\uffbe\106\uffbe\113\u019c\115\u019d\117\u019a\123\201" +
    "\127\uffbe\001\002\000\004\121\u0196\001\002\000\046\025" +
    "\103\051\073\052\105\053\076\054\075\056\101\060\072" +
    "\061\071\062\106\063\070\071\021\100\107\114\110\121" +
    "\074\126\077\127\010\130\104\131\100\001\002\000\006" +
    "\115\174\127\010\001\002\000\046\025\103\051\073\052" +
    "\105\053\076\054\075\056\101\060\072\061\071\062\106" +
    "\063\070\071\021\100\107\114\110\121\074\126\077\127" +
    "\010\130\104\131\100\001\002\000\064\016\053\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\031\034\033\040\035\036\036\030\037\052\040\041" +
    "\041\051\042\032\053\037\055\027\057\020\065\050\067" +
    "\046\070\023\071\021\127\010\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\004\005" +
    "\310\001\002\000\046\025\103\051\073\052\105\053\076" +
    "\054\075\056\101\060\072\061\071\062\106\063\070\071" +
    "\021\100\107\114\110\121\074\126\077\127\010\130\104" +
    "\131\100\001\002\000\010\105\uffbe\106\uffbe\123\201\001" +
    "\002\000\070\005\ufff9\016\053\021\054\022\025\023\044" +
    "\024\042\025\045\026\043\027\057\030\047\031\034\033" +
    "\040\035\036\036\030\037\052\040\041\041\051\042\032" +
    "\053\037\055\027\057\020\065\050\067\046\070\023\071" +
    "\021\074\033\127\010\001\002\000\070\005\ufff9\016\053" +
    "\021\054\022\025\023\044\024\042\025\045\026\043\027" +
    "\057\030\047\031\034\033\040\035\036\036\030\037\052" +
    "\040\041\041\051\042\032\053\037\055\027\057\020\065" +
    "\050\067\046\070\023\071\021\074\033\127\010\001\002" +
    "\000\074\010\uffcf\011\uffcf\012\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\075\uffcf\077\uffcf\100\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\104\uffcf\107\uffcf\110\uffcf\111" +
    "\uffcf\112\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\122\uffcf" +
    "\123\uffcf\124\uffcf\125\uffcf\127\uffcf\001\002\000\074\010" +
    "\uffce\011\uffce\012\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\075\uffce\077\uffce\100\uffce\101\uffce\102" +
    "\uffce\103\uffce\104\uffce\107\uffce\110\uffce\111\uffce\112\uffce" +
    "\115\uffce\116\uffce\117\uffce\120\uffce\122\uffce\123\uffce\124" +
    "\uffce\125\uffce\127\uffce\001\002\000\074\010\uffd0\011\uffd0" +
    "\012\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\075\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\115\uffd0\116" +
    "\uffd0\117\uffd0\120\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0" +
    "\127\uffd0\001\002\000\004\117\263\001\002\000\004\124" +
    "\262\001\002\000\020\020\252\022\255\023\253\024\254" +
    "\026\250\027\247\127\010\001\002\000\004\121\243\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\004\121\063\001\002\000\004\121\060\001" +
    "\002\000\074\010\uffcb\011\uffcb\012\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\075\uffcb\077\uffcb\100" +
    "\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\107\uffcb\110\uffcb" +
    "\111\uffcb\112\uffcb\115\uffcb\116\uffcb\117\uffcb\120\uffcb\122" +
    "\uffcb\123\uffcb\124\uffcb\125\uffcb\127\uffcb\001\002\000\134" +
    "\005\uffa5\016\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\065\uffa5\067" +
    "\uffa5\070\uffa5\071\uffa5\074\uffa5\100\uffa5\114\uffa5\120\uffa5" +
    "\121\uffa5\122\uffa5\126\uffa5\127\uffa5\130\uffa5\131\uffa5\001" +
    "\002\000\134\005\uffbd\016\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\065\uffbd\067\uffbd\070\uffbd\071\uffbd\074\uffbd\100\uffbd\114" +
    "\uffbd\120\uffbd\121\uffbd\122\uffbd\126\uffbd\127\uffbd\130\uffbd" +
    "\131\uffbd\001\002\000\074\010\uffca\011\uffca\012\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\075\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\107" +
    "\uffca\110\uffca\111\uffca\112\uffca\115\uffca\116\uffca\117\uffca" +
    "\120\uffca\122\uffca\123\uffca\124\uffca\125\uffca\127\uffca\001" +
    "\002\000\004\122\061\001\002\000\004\124\062\001\002" +
    "\000\134\005\uffa3\016\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\065" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\074\uffa3\100\uffa3\114\uffa3" +
    "\120\uffa3\121\uffa3\122\uffa3\126\uffa3\127\uffa3\130\uffa3\131" +
    "\uffa3\001\002\000\066\016\053\021\054\022\025\023\044" +
    "\024\042\025\045\026\043\027\057\030\047\031\034\033" +
    "\040\035\036\036\030\037\052\040\041\041\051\042\032" +
    "\053\037\055\027\057\020\065\050\067\046\070\023\071" +
    "\021\074\033\127\010\001\002\000\046\025\103\051\073" +
    "\052\105\053\076\054\075\056\101\060\072\061\071\062" +
    "\106\063\070\071\021\100\107\114\110\121\074\126\077" +
    "\127\010\130\104\131\100\001\002\000\064\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\075\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\107\uff8c\110" +
    "\uff8c\111\uff8c\112\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c" +
    "\122\uff8c\123\uff8c\124\uff8c\125\uff8c\001\002\000\064\043" +
    "\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\075\uff78" +
    "\077\uff78\100\uff78\101\uff78\102\uff78\103\uff78\104\uff78\107" +
    "\uff78\110\uff78\111\uff78\112\uff78\115\uff78\116\uff78\117\uff78" +
    "\120\uff78\122\uff78\123\uff78\124\uff78\125\uff78\001\002\000" +
    "\066\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\073\uffbe\075\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103" +
    "\uffbe\104\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\115\uffbe" +
    "\116\uffbe\117\uffbe\120\uffbe\122\uffbe\123\201\124\uffbe\125" +
    "\uffbe\001\002\000\064\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\050\uff7d\075\uff7d\077\uff7d\100\uff7d\101\uff7d\102" +
    "\uff7d\103\uff7d\104\uff7d\107\uff7d\110\uff7d\111\uff7d\112\uff7d" +
    "\115\uff7d\116\uff7d\117\uff7d\120\uff7d\122\uff7d\123\uff7d\124" +
    "\uff7d\125\uff7d\001\002\000\064\043\uff7f\044\uff7f\045\uff7f" +
    "\046\uff7f\047\uff7f\050\uff7f\075\uff7f\077\uff7f\100\uff7f\101" +
    "\uff7f\102\uff7f\103\uff7f\104\uff7f\107\uff7f\110\uff7f\111\uff7f" +
    "\112\uff7f\115\uff7f\116\uff7f\117\uff7f\120\uff7f\122\uff7f\123" +
    "\uff7f\124\uff7f\125\uff7f\001\002\000\064\043\uff80\044\uff80" +
    "\045\uff80\046\uff80\047\uff80\050\uff80\075\uff80\077\uff80\100" +
    "\uff80\101\uff80\102\uff80\103\uff80\104\uff80\107\uff80\110\uff80" +
    "\111\uff80\112\uff80\115\uff80\116\uff80\117\uff80\120\uff80\122" +
    "\uff80\123\uff80\124\uff80\125\uff80\001\002\000\064\043\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\075\uff88\077" +
    "\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88\107\uff88" +
    "\110\uff88\111\uff88\112\uff88\115\uff88\116\uff88\117\uff88\120" +
    "\uff88\122\uff88\123\uff88\124\uff88\125\uff88\001\002\000\050" +
    "\025\103\051\073\052\105\053\076\054\075\056\101\060" +
    "\072\061\071\062\106\063\070\071\021\100\107\114\110" +
    "\121\074\122\222\126\077\127\010\130\104\131\100\001" +
    "\002\000\064\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86" +
    "\050\uff86\075\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103" +
    "\uff86\104\uff86\107\uff86\110\uff86\111\uff86\112\uff86\115\uff86" +
    "\116\uff86\117\uff86\120\uff86\122\uff86\123\uff86\124\uff86\125" +
    "\uff86\001\002\000\064\043\uff81\044\uff81\045\uff81\046\uff81" +
    "\047\uff81\050\uff81\075\uff81\077\uff81\100\uff81\101\uff81\102" +
    "\uff81\103\uff81\104\uff81\107\uff81\110\uff81\111\uff81\112\uff81" +
    "\115\uff81\116\uff81\117\uff81\120\uff81\122\uff81\123\uff81\124" +
    "\uff81\125\uff81\001\002\000\064\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\075\uff7a\077\uff7a\100\uff7a\101" +
    "\uff7a\102\uff7a\103\uff7a\104\uff7a\107\uff7a\110\uff7a\111\uff7a" +
    "\112\uff7a\115\uff7a\116\uff7a\117\uff7a\120\uff7a\122\uff7a\123" +
    "\uff7a\124\uff7a\125\uff7a\001\002\000\064\043\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\050\uff89\075\uff89\077\uff89\100" +
    "\uff89\101\uff89\102\uff89\103\uff89\104\uff89\107\uff89\110\uff89" +
    "\111\uff89\112\uff89\115\uff89\116\uff89\117\uff89\120\uff89\122" +
    "\uff89\123\uff89\124\uff89\125\uff89\001\002\000\024\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\127\010\001\002\000\052\043\120\044\122\045\134" +
    "\046\123\047\127\050\124\077\121\100\136\101\130\102" +
    "\132\103\141\104\117\107\133\110\140\111\135\112\131" +
    "\115\125\117\126\123\137\124\204\001\002\000\004\117" +
    "\170\001\002\000\064\043\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\050\uff8a\075\uff8a\077\uff8a\100\uff8a\101\uff8a\102" +
    "\uff8a\103\uff8a\104\uff8a\107\uff8a\110\uff8a\111\uff8a\112\uff8a" +
    "\115\uff8a\116\uff8a\117\uff8a\120\uff8a\122\uff8a\123\uff8a\124" +
    "\uff8a\125\uff8a\001\002\000\064\043\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\050\uff87\075\uff87\077\uff87\100\uff87\101" +
    "\uff87\102\uff87\103\uff87\104\uff87\107\uff87\110\uff87\111\uff87" +
    "\112\uff87\115\uff87\116\uff87\117\uff87\120\uff87\122\uff87\123" +
    "\uff87\124\uff87\125\uff87\001\002\000\064\043\uff7e\044\uff7e" +
    "\045\uff7e\046\uff7e\047\uff7e\050\uff7e\075\uff7e\077\uff7e\100" +
    "\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\107\uff7e\110\uff7e" +
    "\111\uff7e\112\uff7e\115\uff7e\116\uff7e\117\uff7e\120\uff7e\122" +
    "\uff7e\123\uff7e\124\uff7e\125\uff7e\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\046\025" +
    "\103\051\073\052\105\053\076\054\075\056\101\060\072" +
    "\061\071\062\106\063\070\071\021\100\107\114\110\121" +
    "\074\126\077\127\010\130\104\131\100\001\002\000\004" +
    "\076\112\001\002\000\004\117\113\001\002\000\070\016" +
    "\053\021\054\022\025\023\044\024\042\025\045\026\043" +
    "\027\057\030\047\031\034\033\040\035\036\036\030\037" +
    "\052\040\041\041\051\042\032\053\037\055\027\057\020" +
    "\065\050\067\046\070\023\071\021\074\033\120\ufff9\127" +
    "\010\001\002\000\004\120\115\001\002\000\064\043\uff77" +
    "\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\075\uff77\077" +
    "\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77\107\uff77" +
    "\110\uff77\111\uff77\112\uff77\115\uff77\116\uff77\117\uff77\120" +
    "\uff77\122\uff77\123\uff77\124\uff77\125\uff77\001\002\000\064" +
    "\043\120\044\122\045\134\046\123\047\127\050\124\075" +
    "\uff84\077\121\100\136\101\130\102\132\103\141\104\117" +
    "\107\133\110\140\111\135\112\131\115\125\116\uff84\117" +
    "\126\120\uff84\122\uff84\123\137\124\uff84\125\uff84\001\002" +
    "\000\046\025\103\051\073\052\105\053\076\054\075\056" +
    "\101\060\072\061\071\062\106\063\070\071\021\100\107" +
    "\114\110\121\074\126\077\127\010\130\104\131\100\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\046\025\103\051\073\052\105\053\076\054" +
    "\075\056\101\060\072\061\071\062\106\063\070\071\021" +
    "\100\107\114\110\121\074\126\077\127\010\130\104\131" +
    "\100\001\002\000\046\025\103\051\073\052\105\053\076" +
    "\054\075\056\101\060\072\061\071\062\106\063\070\071" +
    "\021\100\107\114\110\121\074\126\077\127\010\130\104" +
    "\131\100\001\002\000\046\025\103\051\073\052\105\053" +
    "\076\054\075\056\101\060\072\061\071\062\106\063\070" +
    "\071\021\100\107\114\110\121\074\126\077\127\010\130" +
    "\104\131\100\001\002\000\046\025\103\051\073\052\105" +
    "\053\076\054\075\056\101\060\072\061\071\062\106\063" +
    "\070\071\021\100\107\114\110\121\074\126\077\127\010" +
    "\130\104\131\100\001\002\000\046\025\103\051\073\052" +
    "\105\053\076\054\075\056\101\060\072\061\071\062\106" +
    "\063\070\071\021\100\107\114\110\121\074\126\077\127" +
    "\010\130\104\131\100\001\002\000\046\025\103\051\073" +
    "\052\105\053\076\054\075\056\101\060\072\061\071\062" +
    "\106\063\070\071\021\100\107\114\110\121\074\126\077" +
    "\127\010\130\104\131\100\001\002\000\046\025\103\051" +
    "\073\052\105\053\076\054\075\056\101\060\072\061\071" +
    "\062\106\063\070\071\021\100\107\114\110\121\074\126" +
    "\077\127\010\130\104\131\100\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\046\025" +
    "\103\051\073\052\105\053\076\054\075\056\101\060\072" +
    "\061\071\062\106\063\070\071\021\100\107\114\110\121" +
    "\074\126\077\127\010\130\104\131\100\001\002\000\046" +
    "\025\103\051\073\052\105\053\076\054\075\056\101\060" +
    "\072\061\071\062\106\063\070\071\021\100\107\114\110" +
    "\121\074\126\077\127\010\130\104\131\100\001\002\000" +
    "\046\025\103\051\073\052\105\053\076\054\075\056\101" +
    "\060\072\061\071\062\106\063\070\071\021\100\107\114" +
    "\110\121\074\126\077\127\010\130\104\131\100\001\002" +
    "\000\046\025\103\051\073\052\105\053\076\054\075\056" +
    "\101\060\072\061\071\062\106\063\070\071\021\100\107" +
    "\114\110\121\074\126\077\127\010\130\104\131\100\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\046\025\103\051\073\052\105\053\076\054" +
    "\075\056\101\060\072\061\071\062\106\063\070\071\021" +
    "\100\107\114\110\121\074\126\077\127\010\130\104\131" +
    "\100\001\002\000\004\064\144\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\046\025" +
    "\103\051\073\052\105\053\076\054\075\056\101\060\072" +
    "\061\071\062\106\063\070\071\021\100\107\114\110\121" +
    "\074\126\077\127\010\130\104\131\100\001\002\000\064" +
    "\043\120\044\122\045\134\046\123\047\127\050\124\075" +
    "\uff96\077\121\100\136\101\uff96\102\uff96\103\uff96\104\uff96" +
    "\107\133\110\140\111\135\112\131\115\uff96\116\uff96\117" +
    "\uff96\120\uff96\122\uff96\123\uff96\124\uff96\125\uff96\001\002" +
    "\000\064\043\uff92\044\uff92\045\uff92\046\uff92\047\127\050" +
    "\124\075\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92" +
    "\104\uff92\107\uff92\110\uff92\111\uff92\112\uff92\115\uff92\116" +
    "\uff92\117\uff92\120\uff92\122\uff92\123\uff92\124\uff92\125\uff92" +
    "\001\002\000\064\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\075\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\103\uff8b\104\uff8b\107\uff8b\110\uff8b\111\uff8b\112\uff8b\115" +
    "\uff8b\116\uff8b\117\uff8b\120\uff8b\122\uff8b\123\uff8b\124\uff8b" +
    "\125\uff8b\001\002\000\064\043\120\044\122\045\134\046" +
    "\123\047\127\050\124\075\uff98\077\uff98\100\uff98\101\uff98" +
    "\102\uff98\103\uff98\104\uff98\107\133\110\140\111\135\112" +
    "\131\115\uff98\116\uff98\117\uff98\120\uff98\122\uff98\123\uff98" +
    "\124\uff98\125\uff98\001\002\000\064\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\047\127\050\124\075\uff90\077\uff90\100\uff90" +
    "\101\uff90\102\uff90\103\uff90\104\uff90\107\uff90\110\uff90\111" +
    "\uff90\112\uff90\115\uff90\116\uff90\117\uff90\120\uff90\122\uff90" +
    "\123\uff90\124\uff90\125\uff90\001\002\000\064\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\127\050\124\075\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\107\133\110" +
    "\140\111\135\112\131\115\uff9d\116\uff9d\117\uff9d\120\uff9d" +
    "\122\uff9d\123\uff9d\124\uff9d\125\uff9d\001\002\000\064\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\127\050\124\075\uff93" +
    "\077\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\107" +
    "\uff93\110\uff93\111\uff93\112\uff93\115\uff93\116\uff93\117\uff93" +
    "\120\uff93\122\uff93\123\uff93\124\uff93\125\uff93\001\002\000" +
    "\064\043\120\044\122\045\134\046\123\047\127\050\124" +
    "\075\uff95\077\121\100\136\101\uff95\102\uff95\103\uff95\104" +
    "\uff95\107\133\110\140\111\135\112\131\115\uff95\116\uff95" +
    "\117\uff95\120\uff95\122\uff95\123\uff95\124\uff95\125\uff95\001" +
    "\002\000\064\043\uff91\044\uff91\045\uff91\046\uff91\047\127" +
    "\050\124\075\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103" +
    "\uff91\104\uff91\107\uff91\110\uff91\111\uff91\112\uff91\115\uff91" +
    "\116\uff91\117\uff91\120\uff91\122\uff91\123\uff91\124\uff91\125" +
    "\uff91\001\002\000\064\043\120\044\122\045\134\046\123" +
    "\047\127\050\124\075\uff97\077\121\100\136\101\uff97\102" +
    "\uff97\103\uff97\104\uff97\107\133\110\140\111\135\112\131" +
    "\115\uff97\116\uff97\117\uff97\120\uff97\122\uff97\123\uff97\124" +
    "\uff97\125\uff97\001\002\000\064\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\075\uff9b\077\uff9b\100\uff9b\101" +
    "\uff9b\102\uff9b\103\uff9b\104\uff9b\107\uff9b\110\uff9b\111\uff9b" +
    "\112\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b\122\uff9b\123" +
    "\uff9b\124\uff9b\125\uff9b\001\002\000\052\043\120\044\122" +
    "\045\134\046\123\047\127\050\124\077\121\100\136\101" +
    "\130\102\132\103\141\104\117\107\133\110\140\111\135" +
    "\112\131\115\125\117\126\120\156\123\137\001\002\000" +
    "\064\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\075\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104" +
    "\uff8e\107\uff8e\110\uff8e\111\uff8e\112\uff8e\115\uff8e\116\uff8e" +
    "\117\uff8e\120\uff8e\122\uff8e\123\uff8e\124\uff8e\125\uff8e\001" +
    "\002\000\052\043\120\044\122\045\134\046\123\047\127" +
    "\050\124\077\121\100\136\101\130\102\132\103\141\104" +
    "\117\107\133\110\140\111\135\112\131\115\125\116\160" +
    "\117\126\123\137\001\002\000\064\043\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\050\uff8f\075\uff8f\077\uff8f\100\uff8f" +
    "\101\uff8f\102\uff8f\103\uff8f\104\uff8f\107\uff8f\110\uff8f\111" +
    "\uff8f\112\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f\122\uff8f" +
    "\123\uff8f\124\uff8f\125\uff8f\001\002\000\064\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\075\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\107\uff9a\110" +
    "\uff9a\111\uff9a\112\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a" +
    "\122\uff9a\123\uff9a\124\uff9a\125\uff9a\001\002\000\064\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\127\050\124\075\uff9c" +
    "\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\107" +
    "\133\110\140\111\135\112\131\115\uff9c\116\uff9c\117\uff9c" +
    "\120\uff9c\122\uff9c\123\uff9c\124\uff9c\125\uff9c\001\002\000" +
    "\064\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\127\050\124" +
    "\075\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104" +
    "\uff9e\107\133\110\140\111\135\112\131\115\uff9e\116\uff9e" +
    "\117\uff9e\120\uff9e\122\uff9e\123\uff9e\124\uff9e\125\uff9e\001" +
    "\002\000\064\043\120\044\122\045\134\046\123\047\127" +
    "\050\124\075\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103" +
    "\uff99\104\uff99\107\133\110\140\111\135\112\131\115\uff99" +
    "\116\uff99\117\uff99\120\uff99\122\uff99\123\uff99\124\uff99\125" +
    "\uff99\001\002\000\064\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\127\050\124\075\uff9f\077\uff9f\100\uff9f\101\uff9f\102" +
    "\uff9f\103\uff9f\104\uff9f\107\133\110\140\111\135\112\131" +
    "\115\uff9f\116\uff9f\117\uff9f\120\uff9f\122\uff9f\123\uff9f\124" +
    "\uff9f\125\uff9f\001\002\000\064\043\120\044\122\045\134" +
    "\046\123\047\127\050\124\075\uff94\077\121\100\136\101" +
    "\uff94\102\uff94\103\uff94\104\uff94\107\133\110\140\111\135" +
    "\112\131\115\uff94\116\uff94\117\uff94\120\uff94\122\uff94\123" +
    "\uff94\124\uff94\125\uff94\001\002\000\064\043\120\044\122" +
    "\045\134\046\123\047\127\050\124\075\uff79\077\uff79\100" +
    "\uff79\101\uff79\102\uff79\103\uff79\104\uff79\107\133\110\140" +
    "\111\135\112\131\115\uff79\116\uff79\117\uff79\120\uff79\122" +
    "\uff79\123\uff79\124\uff79\125\uff79\001\002\000\024\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\127\010\001\002\000\074\010\uffbe\011\uffbe\012\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\075" +
    "\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe" +
    "\107\uffbe\110\uffbe\111\uffbe\112\uffbe\115\uffbe\116\uffbe\117" +
    "\uffbe\120\uffbe\122\uffbe\123\201\124\uffbe\125\uffbe\127\uffbe" +
    "\001\002\000\006\075\173\115\174\001\002\000\024\021" +
    "\054\022\025\023\044\024\042\025\045\026\043\027\057" +
    "\030\047\127\010\001\002\000\004\116\175\001\002\000" +
    "\074\010\uffd2\011\uffd2\012\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\075\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\104\uffd2\107\uffd2\110\uffd2\111\uffd2" +
    "\112\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2\122\uffd2\123" +
    "\uffd2\124\uffd2\125\uffd2\127\uffd2\001\002\000\006\115\174" +
    "\120\177\001\002\000\064\043\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\075\uff7b\077\uff7b\100\uff7b\101\uff7b" +
    "\102\uff7b\103\uff7b\104\uff7b\107\uff7b\110\uff7b\111\uff7b\112" +
    "\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\122\uff7b\123\uff7b" +
    "\124\uff7b\125\uff7b\001\002\000\074\010\uffcc\011\uffcc\012" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\075\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104" +
    "\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\115\uffcc\116\uffcc" +
    "\117\uffcc\120\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\127" +
    "\uffcc\001\002\000\004\127\010\001\002\000\104\010\uffbe" +
    "\011\uffbe\012\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\072\uffbe\073\uffbe\075\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107" +
    "\uffbe\110\uffbe\111\uffbe\112\uffbe\115\uffbe\116\uffbe\117\uffbe" +
    "\120\uffbe\122\uffbe\123\201\124\uffbe\125\uffbe\127\uffbe\001" +
    "\002\000\104\010\uffbf\011\uffbf\012\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\072\uffbf\073\uffbf\075" +
    "\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf" +
    "\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\115" +
    "\uffbf\116\uffbf\117\uffbf\120\uffbf\122\uffbf\123\uffbf\124\uffbf" +
    "\125\uffbf\127\uffbf\001\002\000\066\016\053\021\054\022" +
    "\025\023\044\024\042\025\045\026\043\027\057\030\047" +
    "\031\034\033\040\035\036\036\030\037\052\040\041\041" +
    "\051\042\032\053\037\055\027\057\020\065\050\067\046" +
    "\070\023\071\021\074\033\127\010\001\002\000\004\122" +
    "\206\001\002\000\004\125\207\001\002\000\070\005\ufff9" +
    "\016\053\021\054\022\025\023\044\024\042\025\045\026" +
    "\043\027\057\030\047\031\034\033\040\035\036\036\030" +
    "\037\052\040\041\041\051\042\032\053\037\055\027\057" +
    "\020\065\050\067\046\070\023\071\021\074\033\127\010" +
    "\001\002\000\004\005\211\001\002\000\134\005\uffb5\016" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\065\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\074\uffb5\100\uffb5\114\uffb5\120\uffb5\121\uffb5\122" +
    "\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5\001\002\000\010" +
    "\115\uffbe\121\221\123\201\001\002\000\004\115\214\001" +
    "\002\000\050\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\116\215\121\074\126\077\127\010\130\104" +
    "\131\100\001\002\000\006\115\uffd2\121\221\001\002\000" +
    "\052\043\120\044\122\045\134\046\123\047\127\050\124" +
    "\077\121\100\136\101\130\102\132\103\141\104\117\107" +
    "\133\110\140\111\135\112\131\115\125\116\217\117\126" +
    "\123\137\001\002\000\064\043\uff7c\044\uff7c\045\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\075\uff7c\077\uff7c\100\uff7c\101\uff7c" +
    "\102\uff7c\103\uff7c\104\uff7c\107\uff7c\110\uff7c\111\uff7c\112" +
    "\uff7c\115\uff7c\116\uff7c\117\uff7c\120\uff7c\122\uff7c\123\uff7c" +
    "\124\uff7c\125\uff7c\001\002\000\064\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\075\uff82\077\uff82\100\uff82" +
    "\101\uff82\102\uff82\103\uff82\104\uff82\107\uff82\110\uff82\111" +
    "\uff82\112\uff82\115\uff82\116\uff82\117\uff82\120\uff82\122\uff82" +
    "\123\uff82\124\uff82\125\uff82\001\002\000\050\025\103\051" +
    "\073\052\105\053\076\054\075\056\101\060\072\061\071" +
    "\062\106\063\070\071\021\100\107\114\110\121\074\122" +
    "\222\126\077\127\010\130\104\131\100\001\002\000\066" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\075" +
    "\uff75\076\uff75\077\uff75\100\uff75\101\uff75\102\uff75\103\uff75" +
    "\104\uff75\107\uff75\110\uff75\111\uff75\112\uff75\115\uff75\116" +
    "\uff75\117\uff75\120\uff75\122\uff75\123\uff75\124\uff75\125\uff75" +
    "\001\002\000\054\043\120\044\122\045\134\046\123\047" +
    "\127\050\124\075\224\077\121\100\136\101\130\102\132" +
    "\103\141\104\117\107\133\110\140\111\135\112\131\115" +
    "\125\117\126\122\uff73\123\137\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\004\122" +
    "\226\001\002\000\066\043\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\050\uff76\075\uff76\076\uff76\077\uff76\100\uff76\101" +
    "\uff76\102\uff76\103\uff76\104\uff76\107\uff76\110\uff76\111\uff76" +
    "\112\uff76\115\uff76\116\uff76\117\uff76\120\uff76\122\uff76\123" +
    "\uff76\124\uff76\125\uff76\001\002\000\054\043\120\044\122" +
    "\045\134\046\123\047\127\050\124\075\224\077\121\100" +
    "\136\101\130\102\132\103\141\104\117\107\133\110\140" +
    "\111\135\112\131\115\125\117\126\122\uff73\123\137\001" +
    "\002\000\004\122\uff74\001\002\000\064\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\050\uff83\075\uff83\077\uff83\100" +
    "\uff83\101\uff83\102\uff83\103\uff83\104\uff83\107\uff83\110\uff83" +
    "\111\uff83\112\uff83\115\uff83\116\uff83\117\uff83\120\uff83\122" +
    "\uff83\123\uff83\124\uff83\125\uff83\001\002\000\054\043\120" +
    "\044\122\045\134\046\123\047\127\050\124\075\224\077" +
    "\121\100\136\101\130\102\132\103\141\104\117\107\133" +
    "\110\140\111\135\112\131\115\125\117\126\122\233\123" +
    "\137\001\002\000\064\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\075\uff85\077\uff85\100\uff85\101\uff85\102" +
    "\uff85\103\uff85\104\uff85\107\uff85\110\uff85\111\uff85\112\uff85" +
    "\115\uff85\116\uff85\117\uff85\120\uff85\122\uff85\123\uff85\124" +
    "\uff85\125\uff85\001\002\000\066\043\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\073\235\075\uff8d\077\uff8d\100" +
    "\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\107\uff8d\110\uff8d" +
    "\111\uff8d\112\uff8d\115\uff8d\116\uff8d\117\uff8d\120\uff8d\122" +
    "\uff8d\123\uff8d\124\uff8d\125\uff8d\001\002\000\024\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\127\010\001\002\000\064\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\075\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\107\uffc2\110\uffc2\111\uffc2" +
    "\112\uffc2\115\174\116\uffc2\117\uffc2\120\uffc2\122\uffc2\123" +
    "\uffc2\124\uffc2\125\uffc2\001\002\000\052\043\120\044\122" +
    "\045\134\046\123\047\127\050\124\077\121\100\136\101" +
    "\130\102\132\103\141\104\117\107\133\110\140\111\135" +
    "\112\131\115\125\117\126\123\137\125\240\001\002\000" +
    "\070\005\ufff9\016\053\021\054\022\025\023\044\024\042" +
    "\025\045\026\043\027\057\030\047\031\034\033\040\035" +
    "\036\036\030\037\052\040\041\041\051\042\032\053\037" +
    "\055\027\057\020\065\050\067\046\070\023\071\021\074" +
    "\033\127\010\001\002\000\004\005\242\001\002\000\134" +
    "\005\uffb6\016\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6\067" +
    "\uffb6\070\uffb6\071\uffb6\074\uffb6\100\uffb6\114\uffb6\120\uffb6" +
    "\121\uffb6\122\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\052\043\120\044\122\045\134\046\123\047" +
    "\127\050\124\077\121\100\136\101\130\102\132\103\141" +
    "\104\117\107\133\110\140\111\135\112\131\115\125\117" +
    "\126\122\245\123\137\001\002\000\004\124\246\001\002" +
    "\000\134\005\uffb3\016\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\074\uffb3\100\uffb3\114\uffb3" +
    "\120\uffb3\121\uffb3\122\uffb3\126\uffb3\127\uffb3\130\uffb3\131" +
    "\uffb3\001\002\000\074\010\uffc9\011\uffc9\012\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\075\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\107\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\115\uffc9\116\uffc9\117\uffc9\120" +
    "\uffc9\122\uffc9\123\uffc9\124\uffc9\125\uffc9\127\uffc9\001\002" +
    "\000\074\010\uffc5\011\uffc5\012\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\075\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\104\uffc5\107\uffc5\110\uffc5\111" +
    "\uffc5\112\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\122\uffc5" +
    "\123\uffc5\124\uffc5\125\uffc5\127\uffc5\001\002\000\074\010" +
    "\uffbe\011\uffbe\012\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\075\uffbe\077\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\103\uffbe\104\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe" +
    "\115\uffbe\116\uffbe\117\uffbe\120\uffbe\122\uffbe\123\201\124" +
    "\uffbe\125\uffbe\127\uffbe\001\002\000\004\117\256\001\002" +
    "\000\074\010\uffc7\011\uffc7\012\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\075\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\115\uffc7\116\uffc7\117\uffc7\120\uffc7\122\uffc7" +
    "\123\uffc7\124\uffc7\125\uffc7\127\uffc7\001\002\000\074\010" +
    "\uffc6\011\uffc6\012\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\075\uffc6\077\uffc6\100\uffc6\101\uffc6\102" +
    "\uffc6\103\uffc6\104\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6" +
    "\115\uffc6\116\uffc6\117\uffc6\120\uffc6\122\uffc6\123\uffc6\124" +
    "\uffc6\125\uffc6\127\uffc6\001\002\000\074\010\uffc8\011\uffc8" +
    "\012\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\075\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\115\uffc8\116" +
    "\uffc8\117\uffc8\120\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8" +
    "\127\uffc8\001\002\000\024\021\054\022\025\023\044\024" +
    "\042\025\045\026\043\027\057\030\047\127\010\001\002" +
    "\000\006\115\174\120\260\001\002\000\074\010\uffc3\011" +
    "\uffc3\012\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\075\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\115\uffc3" +
    "\116\uffc3\117\uffc3\120\uffc3\122\uffc3\123\uffc3\124\uffc3\125" +
    "\uffc3\127\uffc3\001\002\000\074\010\uffc4\011\uffc4\012\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\075" +
    "\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4" +
    "\107\uffc4\110\uffc4\111\uffc4\112\uffc4\115\uffc4\116\uffc4\117" +
    "\uffc4\120\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\127\uffc4" +
    "\001\002\000\134\005\uffaa\016\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\065\uffaa\067\uffaa\070\uffaa\071\uffaa\074\uffaa\100\uffaa" +
    "\114\uffaa\120\uffaa\121\uffaa\122\uffaa\126\uffaa\127\uffaa\130" +
    "\uffaa\131\uffaa\001\002\000\024\021\054\022\025\023\044" +
    "\024\042\025\045\026\043\027\057\030\047\127\010\001" +
    "\002\000\006\075\265\115\174\001\002\000\024\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\127\010\001\002\000\006\115\174\120\267\001\002" +
    "\000\074\010\uffcd\011\uffcd\012\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\075\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\104\uffcd\107\uffcd\110\uffcd\111" +
    "\uffcd\112\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\122\uffcd" +
    "\123\uffcd\124\uffcd\125\uffcd\127\uffcd\001\002\000\004\005" +
    "\271\001\002\000\004\036\272\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\052\043" +
    "\120\044\122\045\134\046\123\047\127\050\124\077\121" +
    "\100\136\101\130\102\132\103\141\104\117\107\133\110" +
    "\140\111\135\112\131\115\125\117\126\123\137\124\274" +
    "\001\002\000\134\005\uffb4\016\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\065\uffb4\067\uffb4\070\uffb4\071\uffb4\074\uffb4\100\uffb4" +
    "\114\uffb4\120\uffb4\121\uffb4\122\uffb4\126\uffb4\127\uffb4\130" +
    "\uffb4\131\uffb4\001\002\000\004\005\276\001\002\000\134" +
    "\005\uffbb\016\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\065\uffbb\067" +
    "\uffbb\070\uffbb\071\uffbb\074\uffbb\100\uffbb\114\uffbb\120\uffbb" +
    "\121\uffbb\122\uffbb\126\uffbb\127\uffbb\130\uffbb\131\uffbb\001" +
    "\002\000\006\105\301\106\300\001\002\000\004\124\303" +
    "\001\002\000\004\124\302\001\002\000\134\005\uffa8\016" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\065\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\074\uffa8\100\uffa8\114\uffa8\120\uffa8\121\uffa8\122" +
    "\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8\001\002\000\134" +
    "\005\uffa6\016\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\065\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\074\uffa6\100\uffa6\114\uffa6\120\uffa6" +
    "\121\uffa6\122\uffa6\126\uffa6\127\uffa6\130\uffa6\131\uffa6\001" +
    "\002\000\052\043\120\044\122\045\134\046\123\047\127" +
    "\050\124\077\121\100\136\101\130\102\132\103\141\104" +
    "\117\107\133\110\140\111\135\112\131\115\125\117\126" +
    "\123\137\125\305\001\002\000\070\005\ufff9\016\053\021" +
    "\054\022\025\023\044\024\042\025\045\026\043\027\057" +
    "\030\047\031\034\033\040\035\036\036\030\037\052\040" +
    "\041\041\051\042\032\053\037\055\027\057\020\065\050" +
    "\067\046\070\023\071\021\074\033\127\010\001\002\000" +
    "\004\005\307\001\002\000\134\005\uffb8\016\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\065\uffb8\067\uffb8\070\uffb8\071\uffb8\074" +
    "\uffb8\100\uffb8\114\uffb8\120\uffb8\121\uffb8\122\uffb8\126\uffb8" +
    "\127\uffb8\130\uffb8\131\uffb8\001\002\000\020\002\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\017\ufff6\020\ufff6\001\002" +
    "\000\020\002\ufffc\010\320\011\321\012\312\013\316\017" +
    "\314\020\315\001\002\000\010\013\u015a\017\u0158\020\u0159" +
    "\001\002\000\022\002\ufff7\005\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\017\ufff7\020\ufff7\001\002\000\004\013\u014a" +
    "\001\002\000\024\021\054\022\025\023\044\024\042\025" +
    "\045\026\043\027\057\030\047\127\010\001\002\000\004" +
    "\127\010\001\002\000\022\002\ufff8\005\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\017\ufff8\020\ufff8\001\002\000\010" +
    "\013\u0115\017\u0113\020\u0114\001\002\000\010\013\324\017" +
    "\322\020\323\001\002\000\004\013\u0105\001\002\000\024" +
    "\021\054\022\025\023\044\024\042\025\045\026\043\027" +
    "\057\030\047\127\010\001\002\000\004\127\010\001\002" +
    "\000\006\014\326\125\327\001\002\000\004\127\010\001" +
    "\002\000\044\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\127\uffdd\001\002" +
    "\000\044\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\054\022\025\023\044\024\042" +
    "\025\045\026\043\027\057\030\047\127\010\001\002\000" +
    "\044\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\127\uffde\001\002\000\014" +
    "\010\360\011\361\012\356\115\174\127\010\001\002\000" +
    "\022\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\334" +
    "\017\ufff6\020\ufff6\001\002\000\004\121\341\001\002\000" +
    "\022\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\017\uffe5\020\uffe5\001\002\000\020\005\337\010\320\011" +
    "\321\012\312\013\316\017\314\020\315\001\002\000\022" +
    "\002\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\017" +
    "\ufff2\020\ufff2\001\002\000\004\125\353\001\002\000\026" +
    "\021\054\022\025\023\044\024\042\025\045\026\043\027" +
    "\057\030\047\122\343\127\010\001\002\000\006\115\174" +
    "\127\010\001\002\000\004\125\uffd6\001\002\000\006\075" +
    "\345\122\uffd4\001\002\000\024\021\054\022\025\023\044" +
    "\024\042\025\045\026\043\027\057\030\047\127\010\001" +
    "\002\000\004\122\347\001\002\000\004\125\uffd7\001\002" +
    "\000\006\075\345\122\uffd4\001\002\000\004\122\uffd5\001" +
    "\002\000\006\075\uffd3\122\uffd3\001\002\000\070\005\ufff9" +
    "\016\053\021\054\022\025\023\044\024\042\025\045\026" +
    "\043\027\057\030\047\031\034\033\040\035\036\036\030" +
    "\037\052\040\041\041\051\042\032\053\037\055\027\057" +
    "\020\065\050\067\046\070\023\071\021\074\033\127\010" +
    "\001\002\000\004\005\355\001\002\000\022\005\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\001\002\000\004\127\010\001\002\000\004\124\366\001" +
    "\002\000\004\127\010\001\002\000\004\127\010\001\002" +
    "\000\004\124\363\001\002\000\044\005\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\127\uffdb\001\002\000\004\124\365\001\002\000\044" +
    "\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\127\uffd9\001\002\000\044\005" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\127\uffdc\001\002\000\004\124\370" +
    "\001\002\000\044\005\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\127\uffda\001" +
    "\002\000\004\125\372\001\002\000\044\005\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\127\uffdd\001\002\000\044\005\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\127\010\001\002\000\022\005\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\015\334\017\ufff6\020\ufff6\001\002\000" +
    "\020\005\376\010\320\011\321\012\312\013\316\017\314" +
    "\020\315\001\002\000\022\002\ufff3\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\017\ufff3\020\ufff3\001\002\000\006" +
    "\115\174\127\010\001\002\000\004\121\341\001\002\000" +
    "\004\125\u0102\001\002\000\070\005\ufff9\016\053\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\031\034\033\040\035\036\036\030\037\052\040\041" +
    "\041\051\042\032\053\037\055\027\057\020\065\050\067" +
    "\046\070\023\071\021\074\033\127\010\001\002\000\004" +
    "\005\u0104\001\002\000\022\002\uffe1\005\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\017\uffe1\020\uffe1\001\002\000\004" +
    "\127\010\001\002\000\006\014\u0107\125\u0108\001\002\000" +
    "\004\127\010\001\002\000\044\005\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\127\uffdd\001\002\000\044\005\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\054\022\025" +
    "\023\044\024\042\025\045\026\043\027\057\030\047\127" +
    "\010\001\002\000\022\005\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\334\017\ufff6\020\ufff6\001\002\000\020\005" +
    "\u010c\010\320\011\321\012\312\013\316\017\314\020\315" +
    "\001\002\000\022\002\uffea\005\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\017\uffea\020\uffea\001\002\000\004\125\u010e" +
    "\001\002\000\044\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\127\uffdd\001" +
    "\002\000\044\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\015\uffe4\017\uffe4\020\uffe4\021\054\022\025\023\044\024" +
    "\042\025\045\026\043\027\057\030\047\127\010\001\002" +
    "\000\022\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\334\017\ufff6\020\ufff6\001\002\000\020\005\u0112\010\320" +
    "\011\321\012\312\013\316\017\314\020\315\001\002\000" +
    "\022\002\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\017\uffeb\020\uffeb\001\002\000\004\013\u0129\001\002\000" +
    "\024\021\054\022\025\023\044\024\042\025\045\026\043" +
    "\027\057\030\047\127\010\001\002\000\004\127\010\001" +
    "\002\000\006\014\u0117\125\u0118\001\002\000\004\127\010" +
    "\001\002\000\044\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\127\uffdd\001" +
    "\002\000\044\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\015\uffe4\017\uffe4\020\uffe4\021\054\022\025\023\044\024" +
    "\042\025\045\026\043\027\057\030\047\127\010\001\002" +
    "\000\022\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\334\017\ufff6\020\ufff6\001\002\000\020\005\u011c\010\320" +
    "\011\321\012\312\013\316\017\314\020\315\001\002\000" +
    "\022\002\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\017\ufff5\020\ufff5\001\002\000\004\125\u011e\001\002\000" +
    "\044\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\127\uffdd\001\002\000\044" +
    "\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\021\054\022\025\023\044\024\042\025\045" +
    "\026\043\027\057\030\047\127\010\001\002\000\022\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\334\017\ufff6" +
    "\020\ufff6\001\002\000\020\005\u0122\010\320\011\321\012" +
    "\312\013\316\017\314\020\315\001\002\000\022\002\ufff4" +
    "\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\017\ufff4\020" +
    "\ufff4\001\002\000\006\115\174\127\010\001\002\000\004" +
    "\121\341\001\002\000\004\125\u0126\001\002\000\070\005" +
    "\ufff9\016\053\021\054\022\025\023\044\024\042\025\045" +
    "\026\043\027\057\030\047\031\034\033\040\035\036\036" +
    "\030\037\052\040\041\041\051\042\032\053\037\055\027" +
    "\057\020\065\050\067\046\070\023\071\021\074\033\127" +
    "\010\001\002\000\004\005\u0128\001\002\000\022\002\uffe2" +
    "\005\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\017\uffe2\020" +
    "\uffe2\001\002\000\004\127\010\001\002\000\006\014\u012b" +
    "\125\u012c\001\002\000\004\127\010\001\002\000\044\005" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\127\uffdd\001\002\000\044\005\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020" +
    "\uffe4\021\054\022\025\023\044\024\042\025\045\026\043" +
    "\027\057\030\047\127\010\001\002\000\022\005\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\015\334\017\ufff6\020\ufff6" +
    "\001\002\000\020\005\u0130\010\320\011\321\012\312\013" +
    "\316\017\314\020\315\001\002\000\022\002\uffed\005\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\017\uffed\020\uffed\001" +
    "\002\000\004\125\u0132\001\002\000\044\005\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\127\uffdd\001\002\000\044\005\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\127\010\001\002\000\022\005\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\015\334\017\ufff6\020\ufff6\001\002\000" +
    "\020\005\u0136\010\320\011\321\012\312\013\316\017\314" +
    "\020\315\001\002\000\022\002\uffec\005\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\017\uffec\020\uffec\001\002\000\006" +
    "\014\u0138\125\u0139\001\002\000\004\127\010\001\002\000" +
    "\044\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\127\uffdd\001\002\000\044" +
    "\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\021\054\022\025\023\044\024\042\025\045" +
    "\026\043\027\057\030\047\127\010\001\002\000\022\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\334\017\ufff6" +
    "\020\ufff6\001\002\000\020\005\u013d\010\320\011\321\012" +
    "\312\013\316\017\314\020\315\001\002\000\022\002\ufff0" +
    "\005\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\017\ufff0\020" +
    "\ufff0\001\002\000\004\125\u013f\001\002\000\044\005\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\127\uffdd\001\002\000\044\005\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\021\054\022\025\023\044\024\042\025\045\026\043\027" +
    "\057\030\047\127\010\001\002\000\022\005\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\334\017\ufff6\020\ufff6\001" +
    "\002\000\020\005\u0143\010\320\011\321\012\312\013\316" +
    "\017\314\020\315\001\002\000\022\002\ufff1\005\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\017\ufff1\020\ufff1\001\002" +
    "\000\006\115\174\127\010\001\002\000\004\121\341\001" +
    "\002\000\004\125\u0147\001\002\000\070\005\ufff9\016\053" +
    "\021\054\022\025\023\044\024\042\025\045\026\043\027" +
    "\057\030\047\031\034\033\040\035\036\036\030\037\052" +
    "\040\041\041\051\042\032\053\037\055\027\057\020\065" +
    "\050\067\046\070\023\071\021\074\033\127\010\001\002" +
    "\000\004\005\u0149\001\002\000\022\002\uffe0\005\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\017\uffe0\020\uffe0\001\002" +
    "\000\004\127\010\001\002\000\006\014\u014c\125\u014d\001" +
    "\002\000\004\127\010\001\002\000\044\005\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\127\uffdd\001\002\000\044\005\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\127\010\001\002\000\022\005\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\015\334\017\ufff6\020\ufff6\001\002\000" +
    "\020\005\u0151\010\320\011\321\012\312\013\316\017\314" +
    "\020\315\001\002\000\022\002\uffe8\005\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\017\uffe8\020\uffe8\001\002\000\004" +
    "\125\u0153\001\002\000\044\005\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\127" +
    "\uffdd\001\002\000\044\005\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\054\022\025\023" +
    "\044\024\042\025\045\026\043\027\057\030\047\127\010" +
    "\001\002\000\022\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\015\334\017\ufff6\020\ufff6\001\002\000\020\005\u0157" +
    "\010\320\011\321\012\312\013\316\017\314\020\315\001" +
    "\002\000\022\002\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\017\uffe9\020\uffe9\001\002\000\004\013\u016e\001" +
    "\002\000\024\021\054\022\025\023\044\024\042\025\045" +
    "\026\043\027\057\030\047\127\010\001\002\000\004\127" +
    "\010\001\002\000\006\014\u015c\125\u015d\001\002\000\004" +
    "\127\010\001\002\000\044\005\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\127" +
    "\uffdd\001\002\000\044\005\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\054\022\025\023" +
    "\044\024\042\025\045\026\043\027\057\030\047\127\010" +
    "\001\002\000\022\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\015\334\017\ufff6\020\ufff6\001\002\000\020\005\u0161" +
    "\010\320\011\321\012\312\013\316\017\314\020\315\001" +
    "\002\000\022\002\uffee\005\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\017\uffee\020\uffee\001\002\000\004\125\u0163\001" +
    "\002\000\044\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\127\uffdd\001\002" +
    "\000\044\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\054\022\025\023\044\024\042" +
    "\025\045\026\043\027\057\030\047\127\010\001\002\000" +
    "\022\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\334" +
    "\017\ufff6\020\ufff6\001\002\000\020\005\u0167\010\320\011" +
    "\321\012\312\013\316\017\314\020\315\001\002\000\022" +
    "\002\uffef\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\017" +
    "\uffef\020\uffef\001\002\000\006\115\174\127\010\001\002" +
    "\000\004\121\341\001\002\000\004\125\u016b\001\002\000" +
    "\070\005\ufff9\016\053\021\054\022\025\023\044\024\042" +
    "\025\045\026\043\027\057\030\047\031\034\033\040\035" +
    "\036\036\030\037\052\040\041\041\051\042\032\053\037" +
    "\055\027\057\020\065\050\067\046\070\023\071\021\074" +
    "\033\127\010\001\002\000\004\005\u016d\001\002\000\022" +
    "\002\uffdf\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\017" +
    "\uffdf\020\uffdf\001\002\000\004\127\010\001\002\000\006" +
    "\014\u0170\125\u0171\001\002\000\004\127\010\001\002\000" +
    "\044\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\127\uffdd\001\002\000\044" +
    "\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\021\054\022\025\023\044\024\042\025\045" +
    "\026\043\027\057\030\047\127\010\001\002\000\022\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\334\017\ufff6" +
    "\020\ufff6\001\002\000\020\005\u0175\010\320\011\321\012" +
    "\312\013\316\017\314\020\315\001\002\000\022\002\uffe6" +
    "\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\017\uffe6\020" +
    "\uffe6\001\002\000\004\125\u0177\001\002\000\044\005\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\127\uffdd\001\002\000\044\005\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\021\054\022\025\023\044\024\042\025\045\026\043\027" +
    "\057\030\047\127\010\001\002\000\022\005\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\334\017\ufff6\020\ufff6\001" +
    "\002\000\020\005\u017b\010\320\011\321\012\312\013\316" +
    "\017\314\020\315\001\002\000\022\002\uffe7\005\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\017\uffe7\020\uffe7\001\002" +
    "\000\052\043\120\044\122\045\134\046\123\047\127\050" +
    "\124\077\121\100\136\101\130\102\132\103\141\104\117" +
    "\107\133\110\140\111\135\112\131\115\125\117\126\123" +
    "\137\125\u017d\001\002\000\074\005\ufff9\016\053\021\054" +
    "\022\025\023\044\024\042\025\045\026\043\027\057\030" +
    "\047\031\034\032\ufff9\033\040\034\ufff9\035\036\036\030" +
    "\037\052\040\041\041\051\042\032\053\037\055\027\057" +
    "\020\065\050\067\046\070\023\071\021\074\033\127\010" +
    "\001\002\000\010\005\uffa1\032\uffa1\034\uffa1\001\002\000" +
    "\010\005\u0183\032\u0181\034\u0180\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\004\125" +
    "\u0185\001\002\000\004\005\u0184\001\002\000\134\005\uffb9" +
    "\016\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\074\uffb9\100\uffb9\114\uffb9\120\uffb9\121\uffb9" +
    "\122\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9\001\002\000" +
    "\134\005\uffba\016\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\065\uffba" +
    "\067\uffba\070\uffba\071\uffba\074\uffba\100\uffba\114\uffba\120" +
    "\uffba\121\uffba\122\uffba\126\uffba\127\uffba\130\uffba\131\uffba" +
    "\001\002\000\070\005\ufff9\016\053\021\054\022\025\023" +
    "\044\024\042\025\045\026\043\027\057\030\047\031\034" +
    "\033\040\035\036\036\030\037\052\040\041\041\051\042" +
    "\032\053\037\055\027\057\020\065\050\067\046\070\023" +
    "\071\021\074\033\127\010\001\002\000\004\005\uffa0\001" +
    "\002\000\052\043\120\044\122\045\134\046\123\047\127" +
    "\050\124\077\121\100\136\101\130\102\132\103\141\104" +
    "\117\107\133\110\140\111\135\112\131\115\125\117\126" +
    "\123\137\125\u0188\001\002\000\074\005\ufff9\016\053\021" +
    "\054\022\025\023\044\024\042\025\045\026\043\027\057" +
    "\030\047\031\034\032\ufff9\033\040\034\ufff9\035\036\036" +
    "\030\037\052\040\041\041\051\042\032\053\037\055\027" +
    "\057\020\065\050\067\046\070\023\071\021\074\033\127" +
    "\010\001\002\000\010\005\uffa2\032\uffa2\034\uffa2\001\002" +
    "\000\134\005\uffbc\016\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\065" +
    "\uffbc\067\uffbc\070\uffbc\071\uffbc\074\uffbc\100\uffbc\114\uffbc" +
    "\120\uffbc\121\uffbc\122\uffbc\126\uffbc\127\uffbc\130\uffbc\131" +
    "\uffbc\001\002\000\052\043\120\044\122\045\134\046\123" +
    "\047\127\050\124\077\121\100\136\101\130\102\132\103" +
    "\141\104\117\107\133\110\140\111\135\112\131\115\125" +
    "\117\126\123\137\124\u018c\001\002\000\134\005\uffae\016" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\065\uffae\067\uffae\070\uffae" +
    "\071\uffae\074\uffae\100\uffae\114\uffae\120\uffae\121\uffae\122" +
    "\uffae\126\uffae\127\uffae\130\uffae\131\uffae\001\002\000\006" +
    "\113\u018f\124\u018e\001\002\000\134\005\uffd8\016\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\065\uffd8\067\uffd8\070\uffd8\071\uffd8" +
    "\074\uffd8\100\uffd8\114\uffd8\120\uffd8\121\uffd8\122\uffd8\126" +
    "\uffd8\127\uffd8\130\uffd8\131\uffd8\001\002\000\046\025\103" +
    "\051\073\052\105\053\076\054\075\056\101\060\072\061" +
    "\071\062\106\063\070\071\021\100\107\114\110\121\074" +
    "\126\077\127\010\130\104\131\100\001\002\000\052\043" +
    "\120\044\122\045\134\046\123\047\127\050\124\077\121" +
    "\100\136\101\130\102\132\103\141\104\117\107\133\110" +
    "\140\111\135\112\131\115\125\117\126\123\137\124\u0191" +
    "\001\002\000\134\005\uffb2\016\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\065\uffb2\067\uffb2\070\uffb2\071\uffb2\074\uffb2\100\uffb2" +
    "\114\uffb2\120\uffb2\121\uffb2\122\uffb2\126\uffb2\127\uffb2\130" +
    "\uffb2\131\uffb2\001\002\000\052\043\120\044\122\045\134" +
    "\046\123\047\127\050\124\077\121\100\136\101\130\102" +
    "\132\103\141\104\117\107\133\110\140\111\135\112\131" +
    "\115\125\117\126\123\137\125\u0193\001\002\000\070\005" +
    "\ufff9\016\053\021\054\022\025\023\044\024\042\025\045" +
    "\026\043\027\057\030\047\031\034\033\040\035\036\036" +
    "\030\037\052\040\041\041\051\042\032\053\037\055\027" +
    "\057\020\065\050\067\046\070\023\071\021\074\033\127" +
    "\010\001\002\000\004\005\u0195\001\002\000\134\005\uffb7" +
    "\016\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\065\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\074\uffb7\100\uffb7\114\uffb7\120\uffb7\121\uffb7" +
    "\122\uffb7\126\uffb7\127\uffb7\130\uffb7\131\uffb7\001\002\000" +
    "\046\025\103\051\073\052\105\053\076\054\075\056\101" +
    "\060\072\061\071\062\106\063\070\071\021\100\107\114" +
    "\110\121\074\126\077\127\010\130\104\131\100\001\002" +
    "\000\052\043\120\044\122\045\134\046\123\047\127\050" +
    "\124\077\121\100\136\101\130\102\132\103\141\104\117" +
    "\107\133\110\140\111\135\112\131\115\125\117\126\122" +
    "\u0198\123\137\001\002\000\004\124\u0199\001\002\000\134" +
    "\005\uffad\016\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\065\uffad\067" +
    "\uffad\070\uffad\071\uffad\074\uffad\100\uffad\114\uffad\120\uffad" +
    "\121\uffad\122\uffad\126\uffad\127\uffad\130\uffad\131\uffad\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\012\105\u01a6\106\u01a5\115\uffcc\127\uffcc\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\046\025\103\051\073\052\105\053\076\054" +
    "\075\056\101\060\072\061\071\062\106\063\070\071\021" +
    "\100\107\114\110\121\074\126\077\127\010\130\104\131" +
    "\100\001\002\000\052\043\120\044\122\045\134\046\123" +
    "\047\127\050\124\077\121\100\136\101\130\102\132\103" +
    "\141\104\117\107\133\110\140\111\135\112\131\115\125" +
    "\116\u019f\117\126\123\137\001\002\000\004\113\u01a0\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\052\043\120\044\122\045\134\046\123\047" +
    "\127\050\124\077\121\100\136\101\130\102\132\103\141" +
    "\104\117\107\133\110\140\111\135\112\131\115\125\117" +
    "\126\123\137\124\u01a2\001\002\000\134\005\uffaf\016\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\065\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\074\uffaf\100\uffaf\114\uffaf\120\uffaf\121\uffaf\122\uffaf" +
    "\126\uffaf\127\uffaf\130\uffaf\131\uffaf\001\002\000\052\043" +
    "\120\044\122\045\134\046\123\047\127\050\124\077\121" +
    "\100\136\101\130\102\132\103\141\104\117\107\133\110" +
    "\140\111\135\112\131\115\125\117\126\123\137\124\u01a4" +
    "\001\002\000\134\005\uffb1\016\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\065\uffb1\067\uffb1\070\uffb1\071\uffb1\074\uffb1\100\uffb1" +
    "\114\uffb1\120\uffb1\121\uffb1\122\uffb1\126\uffb1\127\uffb1\130" +
    "\uffb1\131\uffb1\001\002\000\004\124\u01a8\001\002\000\004" +
    "\124\u01a7\001\002\000\134\005\uffa9\016\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071\uffa9\074\uffa9" +
    "\100\uffa9\114\uffa9\120\uffa9\121\uffa9\122\uffa9\126\uffa9\127" +
    "\uffa9\130\uffa9\131\uffa9\001\002\000\134\005\uffa7\016\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\065\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\074\uffa7\100\uffa7\114\uffa7\120\uffa7\121\uffa7\122\uffa7" +
    "\126\uffa7\127\uffa7\130\uffa7\131\uffa7\001\002\000\052\043" +
    "\120\044\122\045\134\046\123\047\127\050\124\077\121" +
    "\100\136\101\130\102\132\103\141\104\117\107\133\110" +
    "\140\111\135\112\131\115\125\117\126\120\u01aa\123\137" +
    "\001\002\000\004\113\u01ab\001\002\000\046\025\103\051" +
    "\073\052\105\053\076\054\075\056\101\060\072\061\071" +
    "\062\106\063\070\071\021\100\107\114\110\121\074\126" +
    "\077\127\010\130\104\131\100\001\002\000\052\043\120" +
    "\044\122\045\134\046\123\047\127\050\124\077\121\100" +
    "\136\101\130\102\132\103\141\104\117\107\133\110\140" +
    "\111\135\112\131\115\125\117\126\123\137\124\u01ad\001" +
    "\002\000\134\005\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\065\uffb0\067\uffb0\070\uffb0\071\uffb0\074\uffb0\100\uffb0\114" +
    "\uffb0\120\uffb0\121\uffb0\122\uffb0\126\uffb0\127\uffb0\130\uffb0" +
    "\131\uffb0\001\002\000\012\005\ufffa\032\ufffa\034\ufffa\120" +
    "\ufffa\001\002\000\134\005\uffab\016\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\065\uffab\067\uffab\070\uffab\071\uffab\074\uffab\100" +
    "\uffab\114\uffab\120\uffab\121\uffab\122\uffab\126\uffab\127\uffab" +
    "\130\uffab\131\uffab\001\002\000\134\005\uffa4\016\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\065\uffa4\067\uffa4\070\uffa4\071\uffa4" +
    "\074\uffa4\100\uffa4\114\uffa4\120\uffa4\121\uffa4\122\uffa4\126" +
    "\uffa4\127\uffa4\130\uffa4\131\uffa4\001\002\000\006\072\uffbe" +
    "\123\201\001\002\000\006\072\uffbe\123\201\001\002\000" +
    "\004\072\u01b4\001\002\000\004\121\221\001\002\000\064" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\075" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\107\uffc0\110\uffc0\111\uffc0\112\uffc0\115\uffc0\116\uffc0\117" +
    "\uffc0\120\uffc0\122\uffc0\123\uffc0\124\uffc0\125\uffc0\001\002" +
    "\000\004\072\u01b7\001\002\000\004\121\221\001\002\000" +
    "\064\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104" +
    "\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\115\uffc1\116\uffc1" +
    "\117\uffc1\120\uffc1\122\uffc1\123\uffc1\124\uffc1\125\uffc1\001" +
    "\002\000\046\025\103\051\073\052\105\053\076\054\075" +
    "\056\101\060\072\061\071\062\106\063\070\071\021\100" +
    "\107\114\110\121\074\126\077\127\010\130\104\131\100" +
    "\001\002\000\052\043\120\044\122\045\134\046\123\047" +
    "\127\050\124\077\121\100\136\101\130\102\132\103\141" +
    "\104\117\107\133\110\140\111\135\112\131\115\125\117" +
    "\126\122\u01bb\123\137\001\002\000\004\124\u01bc\001\002" +
    "\000\134\005\uffac\016\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\065" +
    "\uffac\067\uffac\070\uffac\071\uffac\074\uffac\100\uffac\114\uffac" +
    "\120\uffac\121\uffac\122\uffac\126\uffac\127\uffac\130\uffac\131" +
    "\uffac\001\002\000\006\123\201\124\uffbe\001\002\000\004" +
    "\124\u01bf\001\002\000\026\002\ufffe\004\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020\ufffe\066\ufffe" +
    "\001\002\000\070\005\ufff9\016\053\021\054\022\025\023" +
    "\044\024\042\025\045\026\043\027\057\030\047\031\034" +
    "\033\040\035\036\036\030\037\052\040\041\041\051\042" +
    "\032\053\037\055\027\057\020\065\050\067\046\070\023" +
    "\071\021\074\033\127\010\001\002\000\004\005\u01c2\001" +
    "\002\000\020\002\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\017\ufff6\020\ufff6\001\002\000\020\002\ufffb\010\320\011" +
    "\321\012\312\013\316\017\314\020\315\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\004\002\004\001\001\000\004\021\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u01bc\001\001\000\006\007\316\010\312\001" +
    "\001\000\020\005\034\012\054\015\030\016\023\021\025" +
    "\025\055\030\021\001\001\000\002\001\001\000\004\021" +
    "\u01b0\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u01ad\012\054\015\030\016\023\021\025\025\055\030" +
    "\021\001\001\000\002\001\001\000\004\031\u019a\001\001" +
    "\000\002\001\001\000\014\017\u0191\020\110\021\066\030" +
    "\064\032\065\001\001\000\004\021\u018c\001\001\000\014" +
    "\017\u018a\020\110\021\066\030\064\032\065\001\001\000" +
    "\014\012\054\015\030\021\025\025\u0189\030\021\001\001" +
    "\000\014\017\u017b\020\110\021\066\030\064\032\065\001" +
    "\001\000\002\001\001\000\014\017\303\020\110\021\066" +
    "\030\064\032\065\001\001\000\004\031\276\001\001\000" +
    "\020\005\274\012\054\015\030\016\023\021\025\025\055" +
    "\030\021\001\001\000\020\005\267\012\054\015\030\016" +
    "\023\021\025\025\055\030\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\250\001\001\000\002\001\001" +
    "\000\014\017\236\020\110\021\066\030\064\032\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\054\015\030\016\063\021\025\025\055\030\021\001" +
    "\001\000\014\017\101\020\110\021\066\030\064\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\231\020\110\021" +
    "\066\030\064\032\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\212\021\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\166\020\110\021\066\030\064\032\065\001\001" +
    "\000\014\017\115\020\110\021\066\030\064\032\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\113" +
    "\012\054\015\030\016\023\021\025\025\055\030\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\165\020\110\021\066\030\064\032\065\001" +
    "\001\000\014\017\164\020\110\021\066\030\064\032\065" +
    "\001\001\000\014\017\163\020\110\021\066\030\064\032" +
    "\065\001\001\000\014\017\162\020\110\021\066\030\064" +
    "\032\065\001\001\000\014\017\161\020\110\021\066\030" +
    "\064\032\065\001\001\000\014\017\160\020\110\021\066" +
    "\030\064\032\065\001\001\000\014\017\156\020\110\021" +
    "\066\030\064\032\065\001\001\000\014\017\154\020\110" +
    "\021\066\030\064\032\065\001\001\000\014\017\153\020" +
    "\110\021\066\030\064\032\065\001\001\000\014\017\152" +
    "\020\110\021\066\030\064\032\065\001\001\000\014\017" +
    "\151\020\110\021\066\030\064\032\065\001\001\000\014" +
    "\017\150\020\110\021\066\030\064\032\065\001\001\000" +
    "\014\017\147\020\110\021\066\030\064\032\065\001\001" +
    "\000\014\017\146\020\110\021\066\030\064\032\065\001" +
    "\001\000\014\017\145\020\110\021\066\030\064\032\065" +
    "\001\001\000\014\017\144\020\110\021\066\030\064\032" +
    "\065\001\001\000\002\001\001\000\014\017\142\020\110" +
    "\021\066\030\064\032\065\001\001\000\014\017\141\020" +
    "\110\021\066\030\064\032\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\171\021\170\001" +
    "\001\000\004\031\177\001\001\000\002\001\001\000\006" +
    "\015\175\021\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\201\001\001\000\004\031\202\001\001\000" +
    "\002\001\001\000\016\012\054\015\030\016\204\021\025" +
    "\025\055\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\207\012\054\015\030\016\023\021\025" +
    "\025\055\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\230\031\177\001\001\000\002\001\001" +
    "\000\014\017\215\020\110\021\066\030\064\032\065\001" +
    "\001\000\004\020\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\222\020\110\021" +
    "\066\030\064\032\065\001\001\000\002\001\001\000\004" +
    "\033\224\001\001\000\014\017\226\020\110\021\066\030" +
    "\064\032\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\235\021\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\240\012\054\015\030" +
    "\016\023\021\025\025\055\030\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\243\020\110\021\066" +
    "\030\064\032\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\256" +
    "\021\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\263\021\170" +
    "\001\001\000\002\001\001\000\006\015\265\021\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\272\020\110\021\066\030" +
    "\064\032\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\305\012\054\015" +
    "\030\016\023\021\025\025\055\030\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\310\001\001\000" +
    "\006\007\316\010\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u0143\021\170\001" +
    "\001\000\004\021\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\376\021\170\001\001\000\004\021\324\001\001\000\002" +
    "\001\001\000\004\021\370\001\001\000\004\011\327\001" +
    "\001\000\012\013\330\015\331\021\170\027\332\001\001" +
    "\000\002\001\001\000\004\021\356\001\001\000\006\006" +
    "\335\026\334\001\001\000\004\014\337\001\001\000\002" +
    "\001\001\000\006\007\316\010\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\341\021\170\022\343" +
    "\001\001\000\004\021\351\001\001\000\002\001\001\000" +
    "\004\034\345\001\001\000\010\015\341\021\170\022\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\353\012\054\015\030\016\023\021\025\025\055\030" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\366\001\001\000\002\001\001\000\004\021\363\001" +
    "\001\000\004\021\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\372\001\001\000\012\013\330\015\331\021" +
    "\170\027\373\001\001\000\006\006\374\026\334\001\001" +
    "\000\006\007\316\010\312\001\001\000\002\001\001\000" +
    "\004\021\377\001\001\000\004\014\u0100\001\001\000\002" +
    "\001\001\000\020\005\u0102\012\054\015\030\016\023\021" +
    "\025\025\055\030\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0105\001\001\000\002\001\001\000" +
    "\004\021\u010c\001\001\000\004\011\u0108\001\001\000\012" +
    "\013\330\015\331\021\170\027\u0109\001\001\000\006\006" +
    "\u010a\026\334\001\001\000\006\007\316\010\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u010e\001" +
    "\001\000\012\013\330\015\331\021\170\027\u010f\001\001" +
    "\000\006\006\u0110\026\334\001\001\000\006\007\316\010" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0122\021\170\001\001\000\004\021\u0115\001\001\000" +
    "\002\001\001\000\004\021\u011c\001\001\000\004\011\u0118" +
    "\001\001\000\012\013\330\015\331\021\170\027\u0119\001" +
    "\001\000\006\006\u011a\026\334\001\001\000\006\007\316" +
    "\010\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u011e\001\001\000\012\013\330\015\331\021\170" +
    "\027\u011f\001\001\000\006\006\u0120\026\334\001\001\000" +
    "\006\007\316\010\312\001\001\000\002\001\001\000\004" +
    "\021\u0123\001\001\000\004\014\u0124\001\001\000\002\001" +
    "\001\000\020\005\u0126\012\054\015\030\016\023\021\025" +
    "\025\055\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0129\001\001\000\002\001\001\000\004" +
    "\021\u0130\001\001\000\004\011\u012c\001\001\000\012\013" +
    "\330\015\331\021\170\027\u012d\001\001\000\006\006\u012e" +
    "\026\334\001\001\000\006\007\316\010\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u0132\001\001" +
    "\000\012\013\330\015\331\021\170\027\u0133\001\001\000" +
    "\006\006\u0134\026\334\001\001\000\006\007\316\010\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u013d\001\001\000\004\011\u0139\001\001\000\012\013\330" +
    "\015\331\021\170\027\u013a\001\001\000\006\006\u013b\026" +
    "\334\001\001\000\006\007\316\010\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u013f\001\001\000" +
    "\012\013\330\015\331\021\170\027\u0140\001\001\000\006" +
    "\006\u0141\026\334\001\001\000\006\007\316\010\312\001" +
    "\001\000\002\001\001\000\004\021\u0144\001\001\000\004" +
    "\014\u0145\001\001\000\002\001\001\000\020\005\u0147\012" +
    "\054\015\030\016\023\021\025\025\055\030\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u014a\001" +
    "\001\000\002\001\001\000\004\021\u0151\001\001\000\004" +
    "\011\u014d\001\001\000\012\013\330\015\331\021\170\027" +
    "\u014e\001\001\000\006\006\u014f\026\334\001\001\000\006" +
    "\007\316\010\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u0153\001\001\000\012\013\330\015\331" +
    "\021\170\027\u0154\001\001\000\006\006\u0155\026\334\001" +
    "\001\000\006\007\316\010\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u0167\021\170\001\001\000" +
    "\004\021\u015a\001\001\000\002\001\001\000\004\021\u0161" +
    "\001\001\000\004\011\u015d\001\001\000\012\013\330\015" +
    "\331\021\170\027\u015e\001\001\000\006\006\u015f\026\334" +
    "\001\001\000\006\007\316\010\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0163\001\001\000\012" +
    "\013\330\015\331\021\170\027\u0164\001\001\000\006\006" +
    "\u0165\026\334\001\001\000\006\007\316\010\312\001\001" +
    "\000\002\001\001\000\004\021\u0168\001\001\000\004\014" +
    "\u0169\001\001\000\002\001\001\000\020\005\u016b\012\054" +
    "\015\030\016\023\021\025\025\055\030\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u016e\001\001" +
    "\000\002\001\001\000\004\021\u0175\001\001\000\004\011" +
    "\u0171\001\001\000\012\013\330\015\331\021\170\027\u0172" +
    "\001\001\000\006\006\u0173\026\334\001\001\000\006\007" +
    "\316\010\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0177\001\001\000\012\013\330\015\331\021" +
    "\170\027\u0178\001\001\000\006\006\u0179\026\334\001\001" +
    "\000\006\007\316\010\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\u017d\012\054\015\030\016\023" +
    "\021\025\025\055\030\021\001\001\000\004\023\u017e\001" +
    "\001\000\004\024\u0181\001\001\000\014\017\u0186\020\110" +
    "\021\066\030\064\032\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u0185\012\054\015\030\016\023\021\025\025\055\030" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u0188\012\054\015\030\016\023\021\025\025\055\030" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u018f\020\110\021\066\030\064\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\u0193\012\054\015\030\016\023\021\025" +
    "\025\055\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u0196\020\110\021\066\030\064\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\u01a8\020\110\021\066\030\064\032\065" +
    "\001\001\000\002\001\001\000\014\017\u01a2\020\110\021" +
    "\066\030\064\032\065\001\001\000\014\017\u019d\020\110" +
    "\021\066\030\064\032\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\u01a0\020\110\021\066\030\064" +
    "\032\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u01ab\020\110\021\066" +
    "\030\064\032\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u01b5\001\001\000\004\031\u01b2\001\001\000" +
    "\002\001\001\000\004\020\u01b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u01b7\001\001\000\002\001" +
    "\001\000\014\017\u01b9\020\110\021\066\030\064\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u01bd\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\u01c0\012\054\015\030\016\023\021" +
    "\025\025\055\030\021\001\001\000\002\001\001\000\004" +
    "\006\u01c2\001\001\000\006\007\316\010\312\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expressionchain ::= 
            {
              ExprChain RESULT =null;
		 RESULT = new ExprChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expressionchain ::= COMMA expression expressionchain 
            {
              ExprChain RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(e); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // paramlist ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // paramlist ::= LPAREN expression expressionchain RPAREN 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= paramlist POINTER LBRACE statementlist RBRACE 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodLiteral(p, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= typeof 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Typeof t = (Typeof)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= GETSTRING 
            {
              Expression RESULT =null;
		 RESULT = new GetString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= GETBOOLEAN 
            {
              Expression RESULT =null;
		 RESULT = new GetBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= GETFLOAT 
            {
              Expression RESULT =null;
		 RESULT = new GetFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= GETINT 
            {
              Expression RESULT =null;
		 RESULT = new GetInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= CREATE type LBRACKET RBRACKET paramlist 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayLiteral(t, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= CREATE identifier paramlist 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectCreate(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= NIL 
            {
              Expression RESULT =null;
		 RESULT = new Nil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= expression DIFFERS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Differs(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // simple_statement ::= SUPER LPAREN RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Super();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_statement ::= methodcall SEMICOLON 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCallStatement(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_statement ::= THIS idchain DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(new This(), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_statement ::= identifier idchain DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(i, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_statement ::= THIS idchain INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(new This(), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_statement ::= identifier idchain INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(i, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_statement ::= type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_statement ::= FOR LPAREN statement expression SEMICOLON statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // methodcall ::= EXEC THIS idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(new This(), i2, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // methodcall ::= EXEC identifier idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(i1, i2, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typeof ::= identifier idchain TYPEOF type 
            {
              Typeof RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Typeof(i, c, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeof",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= CONST SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= CONST identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= CONST STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= CONST BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= CONST FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= CONST INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= CONST VAR 
            {
              Type RESULT =null;
		 RESULT = new VarType(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= VAR 
            {
              Type RESULT =null;
		 RESULT = new VarType(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // argchain ::= 
            {
              ArgChain RESULT =null;
		 RESULT = new ArgChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // argchain ::= COMMA parameter argchain 
            {
              ArgChain RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arglist ::= LPAREN RPAREN 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arglist ::= LPAREN parameter argchain RPAREN 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArgList(p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classvardec ::= type PUBLIC identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // classvardec ::= type PROTECTED identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // classvardec ::= type PRIVATE identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classvardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vardeclist ::= vardeclist classvardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // methoddef ::= PROTECTED SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methoddef ::= SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methoddef ::= PRIVATE SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // methoddef ::= PUBLIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constructor ::= CONSTRUCTOR arglist COLON statementlist END 
            {
              Constructor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // constructorlist ::= 
            {
              ConstructorList RESULT =null;
		 RESULT = new ConstructorList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constructorlist ::= constructorlist constructor 
            {
              ConstructorList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstructorList l = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdef ::= PROTECTED SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdef ::= PROTECTED SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classdef ::= SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 1, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classdef ::= SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 1, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classdef ::= PRIVATE SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classdef ::= PRIVATE SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // classdef ::= PUBLIC SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // classdef ::= PUBLIC SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3, c, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classdef ::= PROTECTED CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classdef ::= PROTECTED CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 1, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 1, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classdef ::= PRIVATE CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classdef ::= PUBLIC CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3, c, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

