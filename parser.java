
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 25 22:59:48 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 25 22:59:48 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\002\000\002" +
    "\007\012\000\002\007\014\000\002\007\014\000\002\007" +
    "\012\000\002\007\013\000\002\007\011\000\002\007\014" +
    "\000\002\007\012\000\002\027\004\000\002\027\002\000" +
    "\002\026\011\000\002\010\014\000\002\010\014\000\002" +
    "\010\013\000\002\010\014\000\002\011\004\000\002\011" +
    "\002\000\002\013\005\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\012\005\000\002\014\005\000" +
    "\002\014\003\000\002\022\004\000\002\015\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\010\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\030\011\000\002\030\011\000" +
    "\002\031\005\000\002\031\002\000\002\016\003\000\002" +
    "\016\004\000\002\025\005\000\002\025\011\000\002\025" +
    "\010\000\002\025\007\000\002\025\007\000\002\025\007" +
    "\000\002\025\014\000\002\025\010\000\002\025\007\000" +
    "\002\025\007\000\002\025\006\000\002\025\011\000\002" +
    "\025\011\000\002\025\005\000\002\025\007\000\002\025" +
    "\007\000\002\025\004\000\002\025\004\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\006\000" +
    "\002\025\003\000\002\025\004\000\002\025\006\000\002" +
    "\023\007\000\002\023\002\000\002\024\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\006\000\002\017\006" +
    "\000\002\017\004\000\002\017\003\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\004\000\002\017\007\000\002\017\011\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\007\000\002\017\010\000\002" +
    "\017\003\000\002\017\004\000\002\020\005\000\002\020" +
    "\002\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\004\006\004\001\002\000\004\122\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\117\011\001\002\000\106\010\uff89\011\uff89\012" +
    "\uff89\014\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\067\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076" +
    "\uff89\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89" +
    "\105\uff89\106\uff89\110\uff89\111\uff89\112\uff89\113\uff89\114" +
    "\uff89\115\uff89\116\uff89\117\uff89\120\uff89\122\uff89\001\002" +
    "\000\024\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\017\ufffd\063\ufffd\001\002\000\024\002\ufff6" +
    "\004\017\007\015\010\ufff6\011\ufff6\012\ufff6\013\ufff6\017" +
    "\ufff6\063\013\001\002\000\004\004\u0175\001\002\000\004" +
    "\002\001\001\002\000\004\122\010\001\002\000\016\002" +
    "\uffff\010\267\011\270\012\263\013\265\017\264\001\002" +
    "\000\066\005\ufff9\016\052\020\053\021\025\022\044\023" +
    "\042\024\045\025\043\026\056\027\034\031\040\033\036" +
    "\034\031\035\051\036\041\037\050\040\032\050\037\052" +
    "\027\054\020\062\047\064\046\065\023\066\021\070\033" +
    "\122\010\001\002\000\004\114\u016e\001\002\000\006\050" +
    "\u0163\122\010\001\002\000\004\117\u0161\001\002\000\004" +
    "\117\u0160\001\002\000\072\005\ufff9\016\052\020\053\021" +
    "\025\022\044\023\042\024\045\025\043\026\056\027\034" +
    "\030\ufff9\031\040\032\ufff9\033\036\034\031\035\051\036" +
    "\041\037\050\040\032\050\037\052\027\054\020\062\047" +
    "\064\046\065\023\066\021\070\033\122\010\001\002\000" +
    "\020\010\uffdb\011\uffdb\012\uffdb\071\uffdb\110\uffdb\113\uffdb" +
    "\122\uffdb\001\002\000\020\100\uffd0\101\uffd0\106\u014d\110" +
    "\u014e\112\u014b\116\217\122\uffd6\001\002\000\004\114\u0147" +
    "\001\002\000\006\110\163\122\010\001\002\000\046\024" +
    "\101\046\071\047\104\050\074\051\072\053\077\055\070" +
    "\056\067\057\105\060\066\066\021\073\103\107\106\114" +
    "\073\121\076\122\010\123\102\124\075\001\002\000\046" +
    "\024\101\046\071\047\104\050\074\051\072\053\077\055" +
    "\070\056\067\057\105\060\066\066\021\073\103\107\106" +
    "\114\073\121\076\122\010\123\102\124\075\001\002\000" +
    "\062\016\052\020\053\021\025\022\044\023\042\024\045" +
    "\025\043\026\056\027\034\031\040\033\036\034\031\035" +
    "\051\036\041\037\050\040\032\050\037\052\027\054\020" +
    "\062\047\064\046\065\023\066\021\122\010\001\002\000" +
    "\046\024\101\046\071\047\104\050\074\051\072\053\077" +
    "\055\070\056\067\057\105\060\066\066\021\073\103\107" +
    "\106\114\073\121\076\122\010\123\102\124\075\001\002" +
    "\000\004\005\260\001\002\000\046\024\101\046\071\047" +
    "\104\050\074\051\072\053\077\055\070\056\067\057\105" +
    "\060\066\066\021\073\103\107\106\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\010\100\uffd0\101\uffd0" +
    "\116\217\001\002\000\066\005\ufff9\016\052\020\053\021" +
    "\025\022\044\023\042\024\045\025\043\026\056\027\034" +
    "\031\040\033\036\034\031\035\051\036\041\037\050\040" +
    "\032\050\037\052\027\054\020\062\047\064\046\065\023" +
    "\066\021\070\033\122\010\001\002\000\066\005\ufff9\016" +
    "\052\020\053\021\025\022\044\023\042\024\045\025\043" +
    "\026\056\027\034\031\040\033\036\034\031\035\051\036" +
    "\041\037\050\040\032\050\037\052\027\054\020\062\047" +
    "\064\046\065\023\066\021\070\033\122\010\001\002\000" +
    "\020\010\uffd9\011\uffd9\012\uffd9\071\uffd9\110\uffd9\113\uffd9" +
    "\122\uffd9\001\002\000\020\010\uffd8\011\uffd8\012\uffd8\071" +
    "\uffd8\110\uffd8\113\uffd8\122\uffd8\001\002\000\020\010\uffda" +
    "\011\uffda\012\uffda\071\uffda\110\uffda\113\uffda\122\uffda\001" +
    "\002\000\004\112\233\001\002\000\004\117\232\001\002" +
    "\000\004\114\226\001\002\000\046\024\101\046\071\047" +
    "\104\050\074\051\072\053\077\055\070\056\067\057\105" +
    "\060\066\066\021\073\103\107\106\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\004\114\062\001\002" +
    "\000\004\114\057\001\002\000\020\010\uffd5\011\uffd5\012" +
    "\uffd5\071\uffd5\110\uffd5\113\uffd5\122\uffd5\001\002\000\130" +
    "\005\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\070\uffb7\073\uffb7\107\uffb7\114\uffb7\115\uffb7" +
    "\121\uffb7\122\uffb7\123\uffb7\124\uffb7\001\002\000\130\005" +
    "\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\062\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\070\uffcf\073\uffcf\107\uffcf\114\uffcf\115\uffcf\121" +
    "\uffcf\122\uffcf\123\uffcf\124\uffcf\001\002\000\020\010\uffd4" +
    "\011\uffd4\012\uffd4\071\uffd4\110\uffd4\113\uffd4\122\uffd4\001" +
    "\002\000\004\115\060\001\002\000\004\117\061\001\002" +
    "\000\130\005\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\070\uffb5\073\uffb5\107\uffb5\114\uffb5" +
    "\115\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5\001\002\000" +
    "\064\016\052\020\053\021\025\022\044\023\042\024\045" +
    "\025\043\026\056\027\034\031\040\033\036\034\031\035" +
    "\051\036\041\037\050\040\032\050\037\052\027\054\020" +
    "\062\047\064\046\065\023\066\021\070\033\122\010\001" +
    "\002\000\046\024\101\046\071\047\104\050\074\051\072" +
    "\053\077\055\070\056\067\057\105\060\066\066\021\073" +
    "\103\107\106\114\073\121\076\122\010\123\102\124\075" +
    "\001\002\000\062\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\110\uff9f\111" +
    "\uff9f\112\uff9f\113\uff9f\115\uff9f\116\uff9f\117\uff9f\120\uff9f" +
    "\001\002\000\062\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\110\uffd0\111" +
    "\uffd0\112\uffd0\113\uffd0\115\uffd0\116\217\117\uffd0\120\uffd0" +
    "\001\002\000\062\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90" +
    "\077\uff90\102\uff90\103\uff90\104\uff90\105\uff90\110\uff90\111" +
    "\uff90\112\uff90\113\uff90\115\uff90\116\uff90\117\uff90\120\uff90" +
    "\001\002\000\062\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\102\uff92\103\uff92\104\uff92\105\uff92\110\uff92\111" +
    "\uff92\112\uff92\113\uff92\115\uff92\116\uff92\117\uff92\120\uff92" +
    "\001\002\000\062\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93" +
    "\077\uff93\102\uff93\103\uff93\104\uff93\105\uff93\110\uff93\111" +
    "\uff93\112\uff93\113\uff93\115\uff93\116\uff93\117\uff93\120\uff93" +
    "\001\002\000\062\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b" +
    "\077\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\110\uff9b\111" +
    "\uff9b\112\uff9b\113\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b" +
    "\001\002\000\062\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99" +
    "\077\uff99\102\uff99\103\uff99\104\uff99\105\uff99\110\uff99\111" +
    "\uff99\112\uff99\113\uff99\115\uff99\116\uff99\117\uff99\120\uff99" +
    "\001\002\000\046\024\101\046\071\047\104\050\074\051" +
    "\072\053\077\055\070\056\067\057\105\060\066\066\021" +
    "\073\103\107\106\114\073\121\076\122\010\123\102\124" +
    "\075\001\002\000\062\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076" +
    "\uff94\077\uff94\102\uff94\103\uff94\104\uff94\105\uff94\110\uff94" +
    "\111\uff94\112\uff94\113\uff94\115\uff94\116\uff94\117\uff94\120" +
    "\uff94\001\002\000\062\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\110\uff9c" +
    "\111\uff9c\112\uff9c\113\uff9c\115\uff9c\116\uff9c\117\uff9c\120" +
    "\uff9c\001\002\000\062\041\uff8d\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\077\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\110\uff8d" +
    "\111\uff8d\112\uff8d\113\uff8d\115\uff8d\116\uff8d\117\uff8d\120" +
    "\uff8d\001\002\000\022\020\053\021\025\022\044\023\042" +
    "\024\045\025\043\026\056\122\010\001\002\000\050\041" +
    "\111\042\113\043\124\044\114\045\117\072\112\073\126" +
    "\074\120\075\122\076\131\077\110\102\123\103\130\104" +
    "\125\105\121\110\115\112\116\116\127\117\167\001\002" +
    "\000\004\112\157\001\002\000\062\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\102\uff9d\103\uff9d\104\uff9d\105" +
    "\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\115\uff9d\116\uff9d" +
    "\117\uff9d\120\uff9d\001\002\000\046\024\101\046\071\047" +
    "\104\050\074\051\072\053\077\055\070\056\067\057\105" +
    "\060\066\066\021\073\103\107\106\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\062\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\071\uff9a\072\uff9a\073\uff9a\074" +
    "\uff9a\075\uff9a\076\uff9a\077\uff9a\102\uff9a\103\uff9a\104\uff9a" +
    "\105\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\115\uff9a\116" +
    "\uff9a\117\uff9a\120\uff9a\001\002\000\062\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\071\uff91\072\uff91\073\uff91\074" +
    "\uff91\075\uff91\076\uff91\077\uff91\102\uff91\103\uff91\104\uff91" +
    "\105\uff91\110\uff91\111\uff91\112\uff91\113\uff91\115\uff91\116" +
    "\uff91\117\uff91\120\uff91\001\002\000\046\024\101\046\071" +
    "\047\104\050\074\051\072\053\077\055\070\056\067\057" +
    "\105\060\066\066\021\073\103\107\106\114\073\121\076" +
    "\122\010\123\102\124\075\001\002\000\062\041\111\042" +
    "\113\043\124\044\114\045\117\071\uff97\072\112\073\126" +
    "\074\120\075\122\076\131\077\110\102\123\103\130\104" +
    "\125\105\121\110\115\111\uff97\112\116\113\uff97\115\uff97" +
    "\116\127\117\uff97\120\uff97\001\002\000\046\024\101\046" +
    "\071\047\104\050\074\051\072\053\077\055\070\056\067" +
    "\057\105\060\066\066\021\073\103\107\106\114\073\121" +
    "\076\122\010\123\102\124\075\001\002\000\046\024\101" +
    "\046\071\047\104\050\074\051\072\053\077\055\070\056" +
    "\067\057\105\060\066\066\021\073\103\107\106\114\073" +
    "\121\076\122\010\123\102\124\075\001\002\000\046\024" +
    "\101\046\071\047\104\050\074\051\072\053\077\055\070" +
    "\056\067\057\105\060\066\066\021\073\103\107\106\114" +
    "\073\121\076\122\010\123\102\124\075\001\002\000\046" +
    "\024\101\046\071\047\104\050\074\051\072\053\077\055" +
    "\070\056\067\057\105\060\066\066\021\073\103\107\106" +
    "\114\073\121\076\122\010\123\102\124\075\001\002\000" +
    "\046\024\101\046\071\047\104\050\074\051\072\053\077" +
    "\055\070\056\067\057\105\060\066\066\021\073\103\107" +
    "\106\114\073\121\076\122\010\123\102\124\075\001\002" +
    "\000\046\024\101\046\071\047\104\050\074\051\072\053" +
    "\077\055\070\056\067\057\105\060\066\066\021\073\103" +
    "\107\106\114\073\121\076\122\010\123\102\124\075\001" +
    "\002\000\046\024\101\046\071\047\104\050\074\051\072" +
    "\053\077\055\070\056\067\057\105\060\066\066\021\073" +
    "\103\107\106\114\073\121\076\122\010\123\102\124\075" +
    "\001\002\000\046\024\101\046\071\047\104\050\074\051" +
    "\072\053\077\055\070\056\067\057\105\060\066\066\021" +
    "\073\103\107\106\114\073\121\076\122\010\123\102\124" +
    "\075\001\002\000\046\024\101\046\071\047\104\050\074" +
    "\051\072\053\077\055\070\056\067\057\105\060\066\066" +
    "\021\073\103\107\106\114\073\121\076\122\010\123\102" +
    "\124\075\001\002\000\046\024\101\046\071\047\104\050" +
    "\074\051\072\053\077\055\070\056\067\057\105\060\066" +
    "\066\021\073\103\107\106\114\073\121\076\122\010\123" +
    "\102\124\075\001\002\000\046\024\101\046\071\047\104" +
    "\050\074\051\072\053\077\055\070\056\067\057\105\060" +
    "\066\066\021\073\103\107\106\114\073\121\076\122\010" +
    "\123\102\124\075\001\002\000\046\024\101\046\071\047" +
    "\104\050\074\051\072\053\077\055\070\056\067\057\105" +
    "\060\066\066\021\073\103\107\106\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\046\024\101\046\071" +
    "\047\104\050\074\051\072\053\077\055\070\056\067\057" +
    "\105\060\066\066\021\073\103\107\106\114\073\121\076" +
    "\122\010\123\102\124\075\001\002\000\046\024\101\046" +
    "\071\047\104\050\074\051\072\053\077\055\070\056\067" +
    "\057\105\060\066\066\021\073\103\107\106\114\073\121" +
    "\076\122\010\123\102\124\075\001\002\000\046\024\101" +
    "\046\071\047\104\050\074\051\072\053\077\055\070\056" +
    "\067\057\105\060\066\066\021\073\103\107\106\114\073" +
    "\121\076\122\010\123\102\124\075\001\002\000\004\061" +
    "\134\001\002\000\046\024\101\046\071\047\104\050\074" +
    "\051\072\053\077\055\070\056\067\057\105\060\066\066" +
    "\021\073\103\107\106\114\073\121\076\122\010\123\102" +
    "\124\075\001\002\000\046\024\101\046\071\047\104\050" +
    "\074\051\072\053\077\055\070\056\067\057\105\060\066" +
    "\066\021\073\103\107\106\114\073\121\076\122\010\123" +
    "\102\124\075\001\002\000\062\041\111\042\113\043\124" +
    "\044\114\045\117\071\uffa9\072\112\073\126\074\uffa9\075" +
    "\uffa9\076\uffa9\077\uffa9\102\123\103\130\104\125\105\121" +
    "\110\uffa9\111\uffa9\112\uffa9\113\uffa9\115\uffa9\116\uffa9\117" +
    "\uffa9\120\uffa9\001\002\000\062\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\117\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\077\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5" +
    "\110\uffa5\111\uffa5\112\uffa5\113\uffa5\115\uffa5\116\uffa5\117" +
    "\uffa5\120\uffa5\001\002\000\062\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075" +
    "\uff9e\076\uff9e\077\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e" +
    "\110\uff9e\111\uff9e\112\uff9e\113\uff9e\115\uff9e\116\uff9e\117" +
    "\uff9e\120\uff9e\001\002\000\062\041\111\042\113\043\124" +
    "\044\114\045\117\071\uffab\072\uffab\073\uffab\074\uffab\075" +
    "\uffab\076\uffab\077\uffab\102\123\103\130\104\125\105\121" +
    "\110\uffab\111\uffab\112\uffab\113\uffab\115\uffab\116\uffab\117" +
    "\uffab\120\uffab\001\002\000\062\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\117\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\076\uffa3\077\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3" +
    "\110\uffa3\111\uffa3\112\uffa3\113\uffa3\115\uffa3\116\uffa3\117" +
    "\uffa3\120\uffa3\001\002\000\062\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\117\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\077\uffaf\102\123\103\130\104\125\105\121" +
    "\110\uffaf\111\uffaf\112\uffaf\113\uffaf\115\uffaf\116\uffaf\117" +
    "\uffaf\120\uffaf\001\002\000\062\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\117\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6" +
    "\110\uffa6\111\uffa6\112\uffa6\113\uffa6\115\uffa6\116\uffa6\117" +
    "\uffa6\120\uffa6\001\002\000\062\041\111\042\113\043\124" +
    "\044\114\045\117\071\uffa8\072\112\073\126\074\uffa8\075" +
    "\uffa8\076\uffa8\077\uffa8\102\123\103\130\104\125\105\121" +
    "\110\uffa8\111\uffa8\112\uffa8\113\uffa8\115\uffa8\116\uffa8\117" +
    "\uffa8\120\uffa8\001\002\000\062\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\117\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\077\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\110\uffa4\111\uffa4\112\uffa4\113\uffa4\115\uffa4\116\uffa4\117" +
    "\uffa4\120\uffa4\001\002\000\062\041\111\042\113\043\124" +
    "\044\114\045\117\071\uffaa\072\112\073\126\074\uffaa\075" +
    "\uffaa\076\uffaa\077\uffaa\102\123\103\130\104\125\105\121" +
    "\110\uffaa\111\uffaa\112\uffaa\113\uffaa\115\uffaa\116\uffaa\117" +
    "\uffaa\120\uffaa\001\002\000\062\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\076\uffad\077\uffad\102\uffad\103\uffad\104\uffad\105\uffad" +
    "\110\uffad\111\uffad\112\uffad\113\uffad\115\uffad\116\uffad\117" +
    "\uffad\120\uffad\001\002\000\050\041\111\042\113\043\124" +
    "\044\114\045\117\072\112\073\126\074\120\075\122\076" +
    "\131\077\110\102\123\103\130\104\125\105\121\110\115" +
    "\112\116\113\146\116\127\001\002\000\062\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\076\uffa1\077\uffa1\102\uffa1\103\uffa1\104" +
    "\uffa1\105\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\115\uffa1" +
    "\116\uffa1\117\uffa1\120\uffa1\001\002\000\050\041\111\042" +
    "\113\043\124\044\114\045\117\072\112\073\126\074\120" +
    "\075\122\076\131\077\110\102\123\103\130\104\125\105" +
    "\121\110\115\111\150\112\116\116\127\001\002\000\062" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\102\uffa2" +
    "\103\uffa2\104\uffa2\105\uffa2\110\uffa2\111\uffa2\112\uffa2\113" +
    "\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2\001\002\000\062" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\117\071\uffae\072" +
    "\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\102\123" +
    "\103\130\104\125\105\121\110\uffae\111\uffae\112\uffae\113" +
    "\uffae\115\uffae\116\uffae\117\uffae\120\uffae\001\002\000\062" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\117\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\102\123" +
    "\103\130\104\125\105\121\110\uffb0\111\uffb0\112\uffb0\113" +
    "\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0\001\002\000\062" +
    "\041\111\042\113\043\124\044\114\045\117\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\102\123" +
    "\103\130\104\125\105\121\110\uffac\111\uffac\112\uffac\113" +
    "\uffac\115\uffac\116\uffac\117\uffac\120\uffac\001\002\000\062" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\117\071\uffb1\072" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\102\123" +
    "\103\130\104\125\105\121\110\uffb1\111\uffb1\112\uffb1\113" +
    "\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1\001\002\000\062" +
    "\041\111\042\113\043\124\044\114\045\117\071\uffa7\072" +
    "\112\073\126\074\uffa7\075\uffa7\076\uffa7\077\uffa7\102\123" +
    "\103\130\104\125\105\121\110\uffa7\111\uffa7\112\uffa7\113" +
    "\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\001\002\000\062" +
    "\041\111\042\113\043\124\044\114\045\117\071\uff8c\072" +
    "\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\102\123" +
    "\103\130\104\125\105\121\110\uff8c\111\uff8c\112\uff8c\113" +
    "\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c\001\002\000\022" +
    "\020\053\021\025\022\044\023\042\024\045\025\043\026" +
    "\056\122\010\001\002\000\020\010\uffd6\011\uffd6\012\uffd6" +
    "\071\uffd6\110\uffd6\113\uffd6\122\uffd6\001\002\000\006\071" +
    "\162\110\163\001\002\000\022\020\053\021\025\022\044" +
    "\023\042\024\045\025\043\026\056\122\010\001\002\000" +
    "\004\111\164\001\002\000\020\010\uffdc\011\uffdc\012\uffdc" +
    "\071\uffdc\110\uffdc\113\uffdc\122\uffdc\001\002\000\006\110" +
    "\163\113\166\001\002\000\062\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075" +
    "\uff8e\076\uff8e\077\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e" +
    "\110\uff8e\111\uff8e\112\uff8e\113\uff8e\115\uff8e\116\uff8e\117" +
    "\uff8e\120\uff8e\001\002\000\064\016\052\020\053\021\025" +
    "\022\044\023\042\024\045\025\043\026\056\027\034\031" +
    "\040\033\036\034\031\035\051\036\041\037\050\040\032" +
    "\050\037\052\027\054\020\062\047\064\046\065\023\066" +
    "\021\070\033\122\010\001\002\000\004\115\171\001\002" +
    "\000\004\120\172\001\002\000\066\005\ufff9\016\052\020" +
    "\053\021\025\022\044\023\042\024\045\025\043\026\056" +
    "\027\034\031\040\033\036\034\031\035\051\036\041\037" +
    "\050\040\032\050\037\052\027\054\020\062\047\064\046" +
    "\065\023\066\021\070\033\122\010\001\002\000\004\005" +
    "\174\001\002\000\130\005\uffc7\016\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\062\uffc7\064\uffc7\065\uffc7\066\uffc7\070\uffc7\073\uffc7\107" +
    "\uffc7\114\uffc7\115\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7" +
    "\001\002\000\006\110\uffd6\114\211\001\002\000\004\110" +
    "\177\001\002\000\050\024\101\046\071\047\104\050\074" +
    "\051\072\053\077\055\070\056\067\057\105\060\066\066" +
    "\021\073\103\107\106\111\200\114\073\121\076\122\010" +
    "\123\102\124\075\001\002\000\006\110\uffdc\112\203\001" +
    "\002\000\050\041\111\042\113\043\124\044\114\045\117" +
    "\072\112\073\126\074\120\075\122\076\131\077\110\102" +
    "\123\103\130\104\125\105\121\110\115\111\202\112\116" +
    "\116\127\001\002\000\062\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\110" +
    "\uff8f\111\uff8f\112\uff8f\113\uff8f\115\uff8f\116\uff8f\117\uff8f" +
    "\120\uff8f\001\002\000\050\024\101\046\071\047\104\050" +
    "\074\051\072\053\077\055\070\056\067\057\105\060\066" +
    "\066\021\073\103\107\106\113\uff8a\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\050\041\111\042\113" +
    "\043\124\044\114\045\117\071\207\072\112\073\126\074" +
    "\120\075\122\076\131\077\110\102\123\103\130\104\125" +
    "\105\121\110\115\112\116\116\127\001\002\000\004\113" +
    "\206\001\002\000\062\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076" +
    "\uff95\077\uff95\102\uff95\103\uff95\104\uff95\105\uff95\110\uff95" +
    "\111\uff95\112\uff95\113\uff95\115\uff95\116\uff95\117\uff95\120" +
    "\uff95\001\002\000\052\024\101\046\071\047\104\050\074" +
    "\051\072\053\077\055\070\056\067\057\105\060\066\066" +
    "\021\073\103\107\106\113\uff8a\114\073\115\uff8a\121\076" +
    "\122\010\123\102\124\075\001\002\000\006\113\uff8b\115" +
    "\uff8b\001\002\000\050\024\101\046\071\047\104\050\074" +
    "\051\072\053\077\055\070\056\067\057\105\060\066\066" +
    "\021\073\103\107\106\114\073\115\uff8a\121\076\122\010" +
    "\123\102\124\075\001\002\000\004\115\213\001\002\000" +
    "\062\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\071\uff96" +
    "\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\102" +
    "\uff96\103\uff96\104\uff96\105\uff96\110\uff96\111\uff96\112\uff96" +
    "\113\uff96\115\uff96\116\uff96\117\uff96\120\uff96\001\002\000" +
    "\050\041\111\042\113\043\124\044\114\045\117\072\112" +
    "\073\126\074\120\075\122\076\131\077\110\102\123\103" +
    "\130\104\125\105\121\110\115\112\116\115\215\116\127" +
    "\001\002\000\062\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98" +
    "\077\uff98\102\uff98\103\uff98\104\uff98\105\uff98\110\uff98\111" +
    "\uff98\112\uff98\113\uff98\115\uff98\116\uff98\117\uff98\120\uff98" +
    "\001\002\000\062\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\110\uffa0\111" +
    "\uffa0\112\uffa0\113\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0" +
    "\001\002\000\004\122\010\001\002\000\070\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\067\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\110\uffd0\111\uffd0" +
    "\112\uffd0\113\uffd0\115\uffd0\116\217\117\uffd0\120\uffd0\001" +
    "\002\000\070\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\067\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\115\uffd1\116" +
    "\uffd1\117\uffd1\120\uffd1\001\002\000\050\041\111\042\113" +
    "\043\124\044\114\045\117\072\112\073\126\074\120\075" +
    "\122\076\131\077\110\102\123\103\130\104\125\105\121" +
    "\110\115\112\116\116\127\120\223\001\002\000\066\005" +
    "\ufff9\016\052\020\053\021\025\022\044\023\042\024\045" +
    "\025\043\026\056\027\034\031\040\033\036\034\031\035" +
    "\051\036\041\037\050\040\032\050\037\052\027\054\020" +
    "\062\047\064\046\065\023\066\021\070\033\122\010\001" +
    "\002\000\004\005\225\001\002\000\130\005\uffc8\016\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8\070" +
    "\uffc8\073\uffc8\107\uffc8\114\uffc8\115\uffc8\121\uffc8\122\uffc8" +
    "\123\uffc8\124\uffc8\001\002\000\046\024\101\046\071\047" +
    "\104\050\074\051\072\053\077\055\070\056\067\057\105" +
    "\060\066\066\021\073\103\107\106\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\050\041\111\042\113" +
    "\043\124\044\114\045\117\072\112\073\126\074\120\075" +
    "\122\076\131\077\110\102\123\103\130\104\125\105\121" +
    "\110\115\112\116\115\230\116\127\001\002\000\004\117" +
    "\231\001\002\000\130\005\uffc5\016\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\062\uffc5\064\uffc5\065\uffc5\066\uffc5\070\uffc5\073\uffc5\107" +
    "\uffc5\114\uffc5\115\uffc5\121\uffc5\122\uffc5\123\uffc5\124\uffc5" +
    "\001\002\000\130\005\uffbc\016\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\062" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\070\uffbc\073\uffbc\107\uffbc" +
    "\114\uffbc\115\uffbc\121\uffbc\122\uffbc\123\uffbc\124\uffbc\001" +
    "\002\000\022\020\053\021\025\022\044\023\042\024\045" +
    "\025\043\026\056\122\010\001\002\000\006\071\235\110" +
    "\163\001\002\000\022\020\053\021\025\022\044\023\042" +
    "\024\045\025\043\026\056\122\010\001\002\000\006\110" +
    "\163\113\237\001\002\000\020\010\uffd7\011\uffd7\012\uffd7" +
    "\071\uffd7\110\uffd7\113\uffd7\122\uffd7\001\002\000\004\005" +
    "\241\001\002\000\004\034\242\001\002\000\046\024\101" +
    "\046\071\047\104\050\074\051\072\053\077\055\070\056" +
    "\067\057\105\060\066\066\021\073\103\107\106\114\073" +
    "\121\076\122\010\123\102\124\075\001\002\000\050\041" +
    "\111\042\113\043\124\044\114\045\117\072\112\073\126" +
    "\074\120\075\122\076\131\077\110\102\123\103\130\104" +
    "\125\105\121\110\115\112\116\116\127\117\244\001\002" +
    "\000\130\005\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\070\uffc6\073\uffc6\107\uffc6\114\uffc6" +
    "\115\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\001\002\000" +
    "\004\005\246\001\002\000\130\005\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd\073" +
    "\uffcd\107\uffcd\114\uffcd\115\uffcd\121\uffcd\122\uffcd\123\uffcd" +
    "\124\uffcd\001\002\000\006\100\251\101\250\001\002\000" +
    "\004\117\253\001\002\000\004\117\252\001\002\000\130" +
    "\005\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\062\uffba\064\uffba\065" +
    "\uffba\066\uffba\070\uffba\073\uffba\107\uffba\114\uffba\115\uffba" +
    "\121\uffba\122\uffba\123\uffba\124\uffba\001\002\000\130\005" +
    "\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\070\uffb8\073\uffb8\107\uffb8\114\uffb8\115\uffb8\121" +
    "\uffb8\122\uffb8\123\uffb8\124\uffb8\001\002\000\050\041\111" +
    "\042\113\043\124\044\114\045\117\072\112\073\126\074" +
    "\120\075\122\076\131\077\110\102\123\103\130\104\125" +
    "\105\121\110\115\112\116\116\127\120\255\001\002\000" +
    "\066\005\ufff9\016\052\020\053\021\025\022\044\023\042" +
    "\024\045\025\043\026\056\027\034\031\040\033\036\034" +
    "\031\035\051\036\041\037\050\040\032\050\037\052\027" +
    "\054\020\062\047\064\046\065\023\066\021\070\033\122" +
    "\010\001\002\000\004\005\257\001\002\000\130\005\uffca" +
    "\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\062\uffca\064\uffca\065\uffca\066" +
    "\uffca\070\uffca\073\uffca\107\uffca\114\uffca\115\uffca\121\uffca" +
    "\122\uffca\123\uffca\124\uffca\001\002\000\016\002\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\017\ufff6\001\002\000\016" +
    "\002\ufffc\010\267\011\270\012\263\013\265\017\264\001" +
    "\002\000\020\002\ufff7\005\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\017\ufff7\001\002\000\006\013\u0117\017\u0116\001" +
    "\002\000\022\020\053\021\025\022\044\023\042\024\045" +
    "\025\043\026\056\122\010\001\002\000\004\122\010\001" +
    "\002\000\020\002\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\017\ufff8\001\002\000\006\013\353\017\352\001" +
    "\002\000\006\013\272\017\271\001\002\000\022\020\053" +
    "\021\025\022\044\023\042\024\045\025\043\026\056\122" +
    "\010\001\002\000\004\122\010\001\002\000\006\014\274" +
    "\120\275\001\002\000\004\122\010\001\002\000\040\005" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\122\uffe5\001\002\000\040\005\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\015\uffec\017\uffec\020\053\021\025\022" +
    "\044\023\042\024\045\025\043\026\056\122\010\001\002" +
    "\000\040\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\122\uffe6\001\002\000\014\010\323\011" +
    "\324\012\321\110\163\122\010\001\002\000\020\005\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\302\017\ufff6\001" +
    "\002\000\004\114\306\001\002\000\020\005\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed\001\002\000" +
    "\016\005\305\010\267\011\270\012\263\013\265\017\264" +
    "\001\002\000\020\002\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\017\ufff2\001\002\000\022\020\053\021\025" +
    "\022\044\023\042\024\045\025\043\026\056\122\010\001" +
    "\002\000\006\071\313\115\314\001\002\000\006\110\163" +
    "\122\010\001\002\000\006\071\uffde\115\uffde\001\002\000" +
    "\006\071\uffdd\115\uffdd\001\002\000\022\020\053\021\025" +
    "\022\044\023\042\024\045\025\043\026\056\122\010\001" +
    "\002\000\004\120\315\001\002\000\066\005\ufff9\016\052" +
    "\020\053\021\025\022\044\023\042\024\045\025\043\026" +
    "\056\027\034\031\040\033\036\034\031\035\051\036\041" +
    "\037\050\040\032\050\037\052\027\054\020\062\047\064" +
    "\046\065\023\066\021\070\033\122\010\001\002\000\004" +
    "\005\317\001\002\000\020\005\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\017\uffeb\001\002\000\006\071\uffdf" +
    "\115\uffdf\001\002\000\004\122\010\001\002\000\004\117" +
    "\331\001\002\000\004\122\010\001\002\000\004\122\010" +
    "\001\002\000\004\117\326\001\002\000\040\005\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\122" +
    "\uffe3\001\002\000\004\117\330\001\002\000\040\005\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\122\uffe1\001\002\000\040\005\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\122\uffe4\001\002\000" +
    "\004\117\333\001\002\000\040\005\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\122\uffe2\001\002" +
    "\000\004\120\335\001\002\000\040\005\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\122\uffe5\001" +
    "\002\000\040\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\017\uffec\020\053\021\025\022\044\023\042\024" +
    "\045\025\043\026\056\122\010\001\002\000\020\005\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\302\017\ufff6\001" +
    "\002\000\016\005\341\010\267\011\270\012\263\013\265" +
    "\017\264\001\002\000\020\002\ufff3\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\017\ufff3\001\002\000\006\110\163" +
    "\122\010\001\002\000\004\114\344\001\002\000\022\020" +
    "\053\021\025\022\044\023\042\024\045\025\043\026\056" +
    "\122\010\001\002\000\006\071\313\115\346\001\002\000" +
    "\004\120\347\001\002\000\066\005\ufff9\016\052\020\053" +
    "\021\025\022\044\023\042\024\045\025\043\026\056\027" +
    "\034\031\040\033\036\034\031\035\051\036\041\037\050" +
    "\040\032\050\037\052\027\054\020\062\047\064\046\065" +
    "\023\066\021\070\033\122\010\001\002\000\004\005\351" +
    "\001\002\000\020\002\uffe9\005\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\017\uffe9\001\002\000\022\020\053\021\025" +
    "\022\044\023\042\024\045\025\043\026\056\122\010\001" +
    "\002\000\004\122\010\001\002\000\006\014\355\120\356" +
    "\001\002\000\004\122\010\001\002\000\040\005\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\122" +
    "\uffe5\001\002\000\040\005\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\015\uffec\017\uffec\020\053\021\025\022\044\023" +
    "\042\024\045\025\043\026\056\122\010\001\002\000\020" +
    "\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\302\017" +
    "\ufff6\001\002\000\016\005\362\010\267\011\270\012\263" +
    "\013\265\017\264\001\002\000\020\002\ufff5\005\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\017\ufff5\001\002\000\004" +
    "\120\364\001\002\000\040\005\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\122\uffe5\001\002\000" +
    "\040\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec" +
    "\017\uffec\020\053\021\025\022\044\023\042\024\045\025" +
    "\043\026\056\122\010\001\002\000\020\005\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\302\017\ufff6\001\002\000" +
    "\016\005\370\010\267\011\270\012\263\013\265\017\264" +
    "\001\002\000\020\002\ufff4\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\017\ufff4\001\002\000\006\110\163\122\010" +
    "\001\002\000\004\114\373\001\002\000\022\020\053\021" +
    "\025\022\044\023\042\024\045\025\043\026\056\122\010" +
    "\001\002\000\006\071\313\115\375\001\002\000\004\120" +
    "\376\001\002\000\066\005\ufff9\016\052\020\053\021\025" +
    "\022\044\023\042\024\045\025\043\026\056\027\034\031" +
    "\040\033\036\034\031\035\051\036\041\037\050\040\032" +
    "\050\037\052\027\054\020\062\047\064\046\065\023\066" +
    "\021\070\033\122\010\001\002\000\004\005\u0100\001\002" +
    "\000\020\002\uffea\005\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\017\uffea\001\002\000\006\014\u0102\120\u0103\001\002" +
    "\000\004\122\010\001\002\000\040\005\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\122\uffe5\001" +
    "\002\000\040\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\017\uffec\020\053\021\025\022\044\023\042\024" +
    "\045\025\043\026\056\122\010\001\002\000\020\005\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\302\017\ufff6\001" +
    "\002\000\016\005\u0107\010\267\011\270\012\263\013\265" +
    "\017\264\001\002\000\020\002\ufff0\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\017\ufff0\001\002\000\004\120\u0109" +
    "\001\002\000\040\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\122\uffe5\001\002\000\040\005" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017\uffec" +
    "\020\053\021\025\022\044\023\042\024\045\025\043\026" +
    "\056\122\010\001\002\000\020\005\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\015\302\017\ufff6\001\002\000\016\005" +
    "\u010d\010\267\011\270\012\263\013\265\017\264\001\002" +
    "\000\020\002\ufff1\005\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\017\ufff1\001\002\000\006\110\163\122\010\001\002" +
    "\000\004\114\u0110\001\002\000\022\020\053\021\025\022" +
    "\044\023\042\024\045\025\043\026\056\122\010\001\002" +
    "\000\006\071\313\115\u0112\001\002\000\004\120\u0113\001" +
    "\002\000\066\005\ufff9\016\052\020\053\021\025\022\044" +
    "\023\042\024\045\025\043\026\056\027\034\031\040\033" +
    "\036\034\031\035\051\036\041\037\050\040\032\050\037" +
    "\052\027\054\020\062\047\064\046\065\023\066\021\070" +
    "\033\122\010\001\002\000\004\005\u0115\001\002\000\020" +
    "\002\uffe8\005\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\017" +
    "\uffe8\001\002\000\022\020\053\021\025\022\044\023\042" +
    "\024\045\025\043\026\056\122\010\001\002\000\004\122" +
    "\010\001\002\000\006\014\u0119\120\u011a\001\002\000\004" +
    "\122\010\001\002\000\040\005\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\122\uffe5\001\002\000" +
    "\040\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec" +
    "\017\uffec\020\053\021\025\022\044\023\042\024\045\025" +
    "\043\026\056\122\010\001\002\000\020\005\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\302\017\ufff6\001\002\000" +
    "\016\005\u011e\010\267\011\270\012\263\013\265\017\264" +
    "\001\002\000\020\002\uffee\005\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\017\uffee\001\002\000\004\120\u0120\001\002" +
    "\000\040\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\122\uffe5\001\002\000\040\005\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017\uffec\020\053" +
    "\021\025\022\044\023\042\024\045\025\043\026\056\122" +
    "\010\001\002\000\020\005\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\302\017\ufff6\001\002\000\016\005\u0124\010" +
    "\267\011\270\012\263\013\265\017\264\001\002\000\020" +
    "\002\uffef\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\017" +
    "\uffef\001\002\000\006\110\163\122\010\001\002\000\004" +
    "\114\u0127\001\002\000\022\020\053\021\025\022\044\023" +
    "\042\024\045\025\043\026\056\122\010\001\002\000\006" +
    "\071\313\115\u0129\001\002\000\004\120\u012a\001\002\000" +
    "\066\005\ufff9\016\052\020\053\021\025\022\044\023\042" +
    "\024\045\025\043\026\056\027\034\031\040\033\036\034" +
    "\031\035\051\036\041\037\050\040\032\050\037\052\027" +
    "\054\020\062\047\064\046\065\023\066\021\070\033\122" +
    "\010\001\002\000\004\005\u012c\001\002\000\020\002\uffe7" +
    "\005\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\017\uffe7\001" +
    "\002\000\050\041\111\042\113\043\124\044\114\045\117" +
    "\072\112\073\126\074\120\075\122\076\131\077\110\102" +
    "\123\103\130\104\125\105\121\110\115\112\116\116\127" +
    "\120\u012e\001\002\000\072\005\ufff9\016\052\020\053\021" +
    "\025\022\044\023\042\024\045\025\043\026\056\027\034" +
    "\030\ufff9\031\040\032\ufff9\033\036\034\031\035\051\036" +
    "\041\037\050\040\032\050\037\052\027\054\020\062\047" +
    "\064\046\065\023\066\021\070\033\122\010\001\002\000" +
    "\010\005\uffb3\030\uffb3\032\uffb3\001\002\000\010\005\u0133" +
    "\030\u0132\032\u0131\001\002\000\046\024\101\046\071\047" +
    "\104\050\074\051\072\053\077\055\070\056\067\057\105" +
    "\060\066\066\021\073\103\107\106\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\004\120\u0136\001\002" +
    "\000\130\005\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\070\uffcb\073\uffcb\107\uffcb\114\uffcb" +
    "\115\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb\001\002\000" +
    "\004\005\u0135\001\002\000\130\005\uffcc\016\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\070\uffcc\073" +
    "\uffcc\107\uffcc\114\uffcc\115\uffcc\121\uffcc\122\uffcc\123\uffcc" +
    "\124\uffcc\001\002\000\066\005\ufff9\016\052\020\053\021" +
    "\025\022\044\023\042\024\045\025\043\026\056\027\034" +
    "\031\040\033\036\034\031\035\051\036\041\037\050\040" +
    "\032\050\037\052\027\054\020\062\047\064\046\065\023" +
    "\066\021\070\033\122\010\001\002\000\004\005\uffb2\001" +
    "\002\000\050\041\111\042\113\043\124\044\114\045\117" +
    "\072\112\073\126\074\120\075\122\076\131\077\110\102" +
    "\123\103\130\104\125\105\121\110\115\112\116\116\127" +
    "\120\u0139\001\002\000\072\005\ufff9\016\052\020\053\021" +
    "\025\022\044\023\042\024\045\025\043\026\056\027\034" +
    "\030\ufff9\031\040\032\ufff9\033\036\034\031\035\051\036" +
    "\041\037\050\040\032\050\037\052\027\054\020\062\047" +
    "\064\046\065\023\066\021\070\033\122\010\001\002\000" +
    "\010\005\uffb4\030\uffb4\032\uffb4\001\002\000\130\005\uffce" +
    "\016\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\062\uffce\064\uffce\065\uffce\066" +
    "\uffce\070\uffce\073\uffce\107\uffce\114\uffce\115\uffce\121\uffce" +
    "\122\uffce\123\uffce\124\uffce\001\002\000\050\041\111\042" +
    "\113\043\124\044\114\045\117\072\112\073\126\074\120" +
    "\075\122\076\131\077\110\102\123\103\130\104\125\105" +
    "\121\110\115\112\116\116\127\117\u013d\001\002\000\130" +
    "\005\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\070\uffc0\073\uffc0\107\uffc0\114\uffc0\115\uffc0" +
    "\121\uffc0\122\uffc0\123\uffc0\124\uffc0\001\002\000\050\041" +
    "\111\042\113\043\124\044\114\045\117\072\112\073\126" +
    "\074\120\075\122\076\131\077\110\102\123\103\130\104" +
    "\125\105\121\110\115\112\116\116\127\120\u013f\001\002" +
    "\000\066\005\ufff9\016\052\020\053\021\025\022\044\023" +
    "\042\024\045\025\043\026\056\027\034\031\040\033\036" +
    "\034\031\035\051\036\041\037\050\040\032\050\037\052" +
    "\027\054\020\062\047\064\046\065\023\066\021\070\033" +
    "\122\010\001\002\000\004\005\u0141\001\002\000\130\005" +
    "\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\062\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\070\uffc9\073\uffc9\107\uffc9\114\uffc9\115\uffc9\121" +
    "\uffc9\122\uffc9\123\uffc9\124\uffc9\001\002\000\006\106\u0144" +
    "\117\u0143\001\002\000\130\005\uffe0\016\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0\073\uffe0" +
    "\107\uffe0\114\uffe0\115\uffe0\121\uffe0\122\uffe0\123\uffe0\124" +
    "\uffe0\001\002\000\046\024\101\046\071\047\104\050\074" +
    "\051\072\053\077\055\070\056\067\057\105\060\066\066" +
    "\021\073\103\107\106\114\073\121\076\122\010\123\102" +
    "\124\075\001\002\000\050\041\111\042\113\043\124\044" +
    "\114\045\117\072\112\073\126\074\120\075\122\076\131" +
    "\077\110\102\123\103\130\104\125\105\121\110\115\112" +
    "\116\116\127\117\u0146\001\002\000\130\005\uffc4\016\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4\070" +
    "\uffc4\073\uffc4\107\uffc4\114\uffc4\115\uffc4\121\uffc4\122\uffc4" +
    "\123\uffc4\124\uffc4\001\002\000\046\024\101\046\071\047" +
    "\104\050\074\051\072\053\077\055\070\056\067\057\105" +
    "\060\066\066\021\073\103\107\106\114\073\121\076\122" +
    "\010\123\102\124\075\001\002\000\050\041\111\042\113" +
    "\043\124\044\114\045\117\072\112\073\126\074\120\075" +
    "\122\076\131\077\110\102\123\103\130\104\125\105\121" +
    "\110\115\112\116\115\u0149\116\127\001\002\000\004\117" +
    "\u014a\001\002\000\130\005\uffbf\016\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\062\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf\073\uffbf\107" +
    "\uffbf\114\uffbf\115\uffbf\121\uffbf\122\uffbf\123\uffbf\124\uffbf" +
    "\001\002\000\046\024\101\046\071\047\104\050\074\051" +
    "\072\053\077\055\070\056\067\057\105\060\066\066\021" +
    "\073\103\107\106\114\073\121\076\122\010\123\102\124" +
    "\075\001\002\000\006\100\u0157\101\u0156\001\002\000\046" +
    "\024\101\046\071\047\104\050\074\051\072\053\077\055" +
    "\070\056\067\057\105\060\066\066\021\073\103\107\106" +
    "\114\073\121\076\122\010\123\102\124\075\001\002\000" +
    "\046\024\101\046\071\047\104\050\074\051\072\053\077" +
    "\055\070\056\067\057\105\060\066\066\021\073\103\107" +
    "\106\114\073\121\076\122\010\123\102\124\075\001\002" +
    "\000\050\041\111\042\113\043\124\044\114\045\117\072" +
    "\112\073\126\074\120\075\122\076\131\077\110\102\123" +
    "\103\130\104\125\105\121\110\115\111\u0150\112\116\116" +
    "\127\001\002\000\004\106\u0151\001\002\000\046\024\101" +
    "\046\071\047\104\050\074\051\072\053\077\055\070\056" +
    "\067\057\105\060\066\066\021\073\103\107\106\114\073" +
    "\121\076\122\010\123\102\124\075\001\002\000\050\041" +
    "\111\042\113\043\124\044\114\045\117\072\112\073\126" +
    "\074\120\075\122\076\131\077\110\102\123\103\130\104" +
    "\125\105\121\110\115\112\116\116\127\117\u0153\001\002" +
    "\000\130\005\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\062\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\070\uffc1\073\uffc1\107\uffc1\114\uffc1" +
    "\115\uffc1\121\uffc1\122\uffc1\123\uffc1\124\uffc1\001\002\000" +
    "\050\041\111\042\113\043\124\044\114\045\117\072\112" +
    "\073\126\074\120\075\122\076\131\077\110\102\123\103" +
    "\130\104\125\105\121\110\115\112\116\116\127\117\u0155" +
    "\001\002\000\130\005\uffc3\016\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\062" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\070\uffc3\073\uffc3\107\uffc3" +
    "\114\uffc3\115\uffc3\121\uffc3\122\uffc3\123\uffc3\124\uffc3\001" +
    "\002\000\004\117\u0159\001\002\000\004\117\u0158\001\002" +
    "\000\130\005\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\062\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\070\uffbb\073\uffbb\107\uffbb\114\uffbb" +
    "\115\uffbb\121\uffbb\122\uffbb\123\uffbb\124\uffbb\001\002\000" +
    "\130\005\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\070\uffb9\073\uffb9\107\uffb9\114\uffb9\115" +
    "\uffb9\121\uffb9\122\uffb9\123\uffb9\124\uffb9\001\002\000\050" +
    "\041\111\042\113\043\124\044\114\045\117\072\112\073" +
    "\126\074\120\075\122\076\131\077\110\102\123\103\130" +
    "\104\125\105\121\110\115\112\116\113\u015b\116\127\001" +
    "\002\000\004\106\u015c\001\002\000\046\024\101\046\071" +
    "\047\104\050\074\051\072\053\077\055\070\056\067\057" +
    "\105\060\066\066\021\073\103\107\106\114\073\121\076" +
    "\122\010\123\102\124\075\001\002\000\050\041\111\042" +
    "\113\043\124\044\114\045\117\072\112\073\126\074\120" +
    "\075\122\076\131\077\110\102\123\103\130\104\125\105" +
    "\121\110\115\112\116\116\127\117\u015e\001\002\000\130" +
    "\005\uffc2\016\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\062\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\070\uffc2\073\uffc2\107\uffc2\114\uffc2\115\uffc2" +
    "\121\uffc2\122\uffc2\123\uffc2\124\uffc2\001\002\000\010\005" +
    "\ufffa\030\ufffa\032\ufffa\001\002\000\130\005\uffbd\016\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\070" +
    "\uffbd\073\uffbd\107\uffbd\114\uffbd\115\uffbd\121\uffbd\122\uffbd" +
    "\123\uffbd\124\uffbd\001\002\000\130\005\uffb6\016\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\070\uffb6" +
    "\073\uffb6\107\uffb6\114\uffb6\115\uffb6\121\uffb6\122\uffb6\123" +
    "\uffb6\124\uffb6\001\002\000\006\067\uffd0\116\217\001\002" +
    "\000\006\067\uffd0\116\217\001\002\000\004\067\u0165\001" +
    "\002\000\004\114\u0166\001\002\000\050\024\101\046\071" +
    "\047\104\050\074\051\072\053\077\055\070\056\067\057" +
    "\105\060\066\066\021\073\103\107\106\114\073\115\uff8a" +
    "\121\076\122\010\123\102\124\075\001\002\000\004\115" +
    "\u0168\001\002\000\062\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076" +
    "\uffd2\077\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\110\uffd2" +
    "\111\uffd2\112\uffd2\113\uffd2\115\uffd2\116\uffd2\117\uffd2\120" +
    "\uffd2\001\002\000\004\067\u016a\001\002\000\004\114\u016b" +
    "\001\002\000\050\024\101\046\071\047\104\050\074\051" +
    "\072\053\077\055\070\056\067\057\105\060\066\066\021" +
    "\073\103\107\106\114\073\115\uff8a\121\076\122\010\123" +
    "\102\124\075\001\002\000\004\115\u016d\001\002\000\062" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\102\uffd3" +
    "\103\uffd3\104\uffd3\105\uffd3\110\uffd3\111\uffd3\112\uffd3\113" +
    "\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\001\002\000\046" +
    "\024\101\046\071\047\104\050\074\051\072\053\077\055" +
    "\070\056\067\057\105\060\066\066\021\073\103\107\106" +
    "\114\073\121\076\122\010\123\102\124\075\001\002\000" +
    "\050\041\111\042\113\043\124\044\114\045\117\072\112" +
    "\073\126\074\120\075\122\076\131\077\110\102\123\103" +
    "\130\104\125\105\121\110\115\112\116\115\u0170\116\127" +
    "\001\002\000\004\117\u0171\001\002\000\130\005\uffbe\016" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\070\uffbe\073\uffbe\107\uffbe\114\uffbe\115\uffbe\121\uffbe\122" +
    "\uffbe\123\uffbe\124\uffbe\001\002\000\006\116\217\117\uffd0" +
    "\001\002\000\004\117\u0174\001\002\000\024\002\ufffe\004" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\017\ufffe" +
    "\063\ufffe\001\002\000\066\005\ufff9\016\052\020\053\021" +
    "\025\022\044\023\042\024\045\025\043\026\056\027\034" +
    "\031\040\033\036\034\031\035\051\036\041\037\050\040" +
    "\032\050\037\052\027\054\020\062\047\064\046\065\023" +
    "\066\021\070\033\122\010\001\002\000\004\005\u0177\001" +
    "\002\000\016\002\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\017\ufff6\001\002\000\016\002\ufffb\010\267\011\270\012" +
    "\263\013\265\017\264\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\004\002\004\001\001\000\004\021\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0171\001\001\000\006\007\265\010\261\001" +
    "\001\000\020\005\034\012\053\015\027\016\023\021\025" +
    "\025\054\030\021\001\001\000\002\001\001\000\004\021" +
    "\u0161\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u015e\012\053\015\027\016\023\021\025\025\054\030" +
    "\021\001\001\000\002\001\001\000\004\031\u014b\001\001" +
    "\000\002\001\001\000\004\021\u0141\001\001\000\010\017" +
    "\u013d\021\064\030\063\001\001\000\010\017\u013b\021\064" +
    "\030\063\001\001\000\014\012\053\015\027\021\025\025" +
    "\u013a\030\021\001\001\000\010\017\u012c\021\064\030\063" +
    "\001\001\000\002\001\001\000\010\017\253\021\064\030" +
    "\063\001\001\000\004\031\246\001\001\000\020\005\244" +
    "\012\053\015\027\016\023\021\025\025\054\030\021\001" +
    "\001\000\020\005\237\012\053\015\027\016\023\021\025" +
    "\025\054\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\221\021\064\030\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\053\015\027\016\062\021\025\025\054\030\021\001" +
    "\001\000\010\017\077\021\064\030\063\001\001\000\002" +
    "\001\001\000\004\031\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\213\021\064\030\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\175\021\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\155\021\064\030\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\106\021\064\030\063\001\001\000\002\001\001\000\010" +
    "\017\154\021\064\030\063\001\001\000\010\017\153\021" +
    "\064\030\063\001\001\000\010\017\152\021\064\030\063" +
    "\001\001\000\010\017\151\021\064\030\063\001\001\000" +
    "\010\017\150\021\064\030\063\001\001\000\010\017\146" +
    "\021\064\030\063\001\001\000\010\017\144\021\064\030" +
    "\063\001\001\000\010\017\143\021\064\030\063\001\001" +
    "\000\010\017\142\021\064\030\063\001\001\000\010\017" +
    "\141\021\064\030\063\001\001\000\010\017\140\021\064" +
    "\030\063\001\001\000\010\017\137\021\064\030\063\001" +
    "\001\000\010\017\136\021\064\030\063\001\001\000\010" +
    "\017\135\021\064\030\063\001\001\000\010\017\134\021" +
    "\064\030\063\001\001\000\002\001\001\000\010\017\132" +
    "\021\064\030\063\001\001\000\010\017\131\021\064\030" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\160" +
    "\021\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\164\021\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\053\015\027\016\167\021\025\025\054\030\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\172\012" +
    "\053\015\027\016\023\021\025\025\054\030\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\200\021\064\030\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\203\020\204\021\064\030\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\203\020\207\021\064\030\063\001\001\000\002\001\001" +
    "\000\012\017\203\020\211\021\064\030\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\217\001\001\000" +
    "\004\031\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\223\012\053\015\027\016\023\021\025\025" +
    "\054\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\226\021\064\030\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\233\021\157\001\001\000\002\001\001\000" +
    "\006\015\235\021\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\242\021\064\030\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\255\012" +
    "\053\015\027\016\023\021\025\025\054\030\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\260\001" +
    "\001\000\006\007\265\010\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u010d\021\157\001\001\000" +
    "\004\021\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\341\021\157\001\001\000" +
    "\004\021\272\001\001\000\002\001\001\000\004\021\333" +
    "\001\001\000\004\011\275\001\001\000\012\013\276\015" +
    "\277\021\157\027\300\001\001\000\002\001\001\000\004" +
    "\021\321\001\001\000\006\006\303\026\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\265\010\261" +
    "\001\001\000\002\001\001\000\012\014\306\015\307\021" +
    "\157\022\310\001\001\000\002\001\001\000\004\021\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\307\021\157\022\317\001\001\000\002\001\001\000\020" +
    "\005\315\012\053\015\027\016\023\021\025\025\054\030" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\331\001\001\000\002\001\001\000" +
    "\004\021\326\001\001\000\004\021\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\335\001\001\000\012\013" +
    "\276\015\277\021\157\027\336\001\001\000\006\006\337" +
    "\026\302\001\001\000\006\007\265\010\261\001\001\000" +
    "\002\001\001\000\004\021\342\001\001\000\002\001\001" +
    "\000\012\014\344\015\307\021\157\022\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\347\012\053" +
    "\015\027\016\023\021\025\025\054\030\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\370\021\157" +
    "\001\001\000\004\021\353\001\001\000\002\001\001\000" +
    "\004\021\362\001\001\000\004\011\356\001\001\000\012" +
    "\013\276\015\277\021\157\027\357\001\001\000\006\006" +
    "\360\026\302\001\001\000\006\007\265\010\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\364\001" +
    "\001\000\012\013\276\015\277\021\157\027\365\001\001" +
    "\000\006\006\366\026\302\001\001\000\006\007\265\010" +
    "\261\001\001\000\002\001\001\000\004\021\371\001\001" +
    "\000\002\001\001\000\012\014\373\015\307\021\157\022" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\376\012\053\015\027\016\023\021\025\025\054\030" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0107\001\001\000\004\011\u0103\001" +
    "\001\000\012\013\276\015\277\021\157\027\u0104\001\001" +
    "\000\006\006\u0105\026\302\001\001\000\006\007\265\010" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0109\001\001\000\012\013\276\015\277\021\157\027" +
    "\u010a\001\001\000\006\006\u010b\026\302\001\001\000\006" +
    "\007\265\010\261\001\001\000\002\001\001\000\004\021" +
    "\u010e\001\001\000\002\001\001\000\012\014\u0110\015\307" +
    "\021\157\022\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\u0113\012\053\015\027\016\023\021\025" +
    "\025\054\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\u0124\021\157\001\001\000\004\021\u0117" +
    "\001\001\000\002\001\001\000\004\021\u011e\001\001\000" +
    "\004\011\u011a\001\001\000\012\013\276\015\277\021\157" +
    "\027\u011b\001\001\000\006\006\u011c\026\302\001\001\000" +
    "\006\007\265\010\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0120\001\001\000\012\013\276\015" +
    "\277\021\157\027\u0121\001\001\000\006\006\u0122\026\302" +
    "\001\001\000\006\007\265\010\261\001\001\000\002\001" +
    "\001\000\004\021\u0125\001\001\000\002\001\001\000\012" +
    "\014\u0127\015\307\021\157\022\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\u012a\012\053\015\027" +
    "\016\023\021\025\025\054\030\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u012e" +
    "\012\053\015\027\016\023\021\025\025\054\030\021\001" +
    "\001\000\004\023\u012f\001\001\000\004\024\u0133\001\001" +
    "\000\010\017\u0137\021\064\030\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\u0136\012\053\015\027\016\023\021\025\025" +
    "\054\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\u0139\012\053\015\027\016\023\021\025\025" +
    "\054\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\u013f\012\053\015\027\016\023\021\025\025\054" +
    "\030\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u0144\021\064" +
    "\030\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u0147\021\064\030\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\u0159\021" +
    "\064\030\063\001\001\000\002\001\001\000\010\017\u0153" +
    "\021\064\030\063\001\001\000\010\017\u014e\021\064\030" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\u0151\021\064\030\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u015c" +
    "\021\064\030\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0168\001\001\000\004\031\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\203\020\u0166" +
    "\021\064\030\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\203" +
    "\020\u016b\021\064\030\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u016e\021\064\030\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u0172\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\u0175\012\053\015\027\016\023\021\025\025" +
    "\054\030\021\001\001\000\002\001\001\000\004\006\u0177" +
    "\001\001\000\006\007\265\010\261\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // paramlist ::= 
            {
              ParamList RESULT =null;
		 ParamList p  = new ParamList(); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // paramlist ::= expression COMMA paramlist 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= GETSTRING 
            {
              Expression RESULT =null;
		 RESULT = new GetString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= GETBOOLEAN 
            {
              Expression RESULT =null;
		 RESULT = new GetBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= GETFLOAT 
            {
              Expression RESULT =null;
		 RESULT = new GetFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= GETINT 
            {
              Expression RESULT =null;
		 RESULT = new GetInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= CREATE type LBRACKET RBRACKET LBRACE paramlist RBRACE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLiteral(t, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= CREATE identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjectCreate(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= NIL 
            {
              Expression RESULT =null;
		 RESULT = new Nil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_statement ::= SUPER LPAREN RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Super();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_statement ::= methodcall SEMICOLON 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCallStatement(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_statement ::= THIS idchain DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(new This(), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_statement ::= identifier idchain DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(i, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simple_statement ::= THIS idchain INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(new This(), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simple_statement ::= identifier idchain INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(i, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simple_statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simple_statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_statement ::= type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_statement ::= FOR LPAREN statement expression SEMICOLON statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // methodcall ::= EXEC THIS idchain WITH LPAREN paramlist RPAREN 
            {
              MethodCall RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall(new This(), i2, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // methodcall ::= EXEC identifier idchain WITH LPAREN paramlist RPAREN 
            {
              MethodCall RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall(i1, i2, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= VAR 
            {
              Type RESULT =null;
		 RESULT = new VarType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arglist ::= parameter 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArgList l = new ArgList(); l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arglist ::= arglist COMMA parameter 
            {
              ArgList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // classvardec ::= type PUBLIC identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classvardec ::= type PROTECTED identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classvardec ::= type PRIVATE identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classvardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vardeclist ::= vardeclist classvardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // methoddef ::= PROTECTED SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // methoddef ::= SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // methoddef ::= PRIVATE SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // methoddef ::= PUBLIC SUBROUTINE type identifier LPAREN arglist RPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constructor ::= CONSTRUCTOR LPAREN arglist RPAREN COLON statementlist END 
            {
              Constructor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constructorlist ::= 
            {
              ConstructorList RESULT =null;
		 RESULT = new ConstructorList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constructorlist ::= constructorlist constructor 
            {
              ConstructorList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstructorList l = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classdef ::= PROTECTED CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classdef ::= PROTECTED CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 1, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 1, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classdef ::= PRIVATE CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classdef ::= PUBLIC CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

