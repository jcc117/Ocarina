
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 15 19:52:34 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 15 19:52:34 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\006\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\002\000\002" +
    "\007\012\000\002\007\014\000\002\007\014\000\002\007" +
    "\012\000\002\007\013\000\002\007\011\000\002\026\004" +
    "\000\002\026\002\000\002\025\011\000\002\010\014\000" +
    "\002\010\014\000\002\010\013\000\002\011\004\000\002" +
    "\011\002\000\002\012\005\000\002\012\006\000\002\012" +
    "\006\000\002\012\006\000\002\013\005\000\002\013\003" +
    "\000\002\021\004\000\002\014\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\010\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\004\000\002\024\005\000\002\024\011" +
    "\000\002\024\010\000\002\024\007\000\002\024\014\000" +
    "\002\024\010\000\002\024\007\000\002\024\007\000\002" +
    "\024\010\000\002\024\010\000\002\024\010\000\002\024" +
    "\006\000\002\024\011\000\002\024\011\000\002\024\005" +
    "\000\002\024\007\000\002\024\007\000\002\024\004\000" +
    "\002\024\004\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\022\007\000\002\022\002\000\002\023" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\006" +
    "\000\002\016\006\000\002\016\005\000\002\016\010\000" +
    "\002\016\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\004\000\002\016\003\000\002\016\007" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\007\000\002" +
    "\016\010\000\002\016\003\000\002\017\005\000\002\017" +
    "\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\004\006\004\001\002\000\004\116\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\113\011\001\002\000\106\010\uff96\011\uff96\012" +
    "\uff96\014\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96" +
    "\063\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072" +
    "\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96" +
    "\101\uff96\102\uff96\104\uff96\105\uff96\106\uff96\107\uff96\110" +
    "\uff96\111\uff96\112\uff96\113\uff96\114\uff96\116\uff96\001\002" +
    "\000\022\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\013" +
    "\ufffd\016\ufffd\060\ufffd\001\002\000\022\002\ufff6\004\017" +
    "\007\015\010\ufff6\011\ufff6\013\ufff6\016\ufff6\060\013\001" +
    "\002\000\004\004\u0140\001\002\000\004\002\001\001\002" +
    "\000\004\116\010\001\002\000\014\002\uffff\010\233\011" +
    "\234\013\231\016\230\001\002\000\052\005\ufff9\017\045" +
    "\020\024\021\040\022\036\023\041\024\037\026\032\030" +
    "\035\032\027\033\044\034\034\035\030\047\025\051\020" +
    "\057\043\061\042\062\021\064\031\116\010\001\002\000" +
    "\004\110\u013a\001\002\000\004\113\u0139\001\002\000\056" +
    "\005\ufff9\017\045\020\024\021\040\022\036\023\041\024" +
    "\037\026\032\027\ufff9\030\035\031\ufff9\032\027\033\044" +
    "\034\034\035\030\047\025\051\020\057\043\061\042\062" +
    "\021\064\031\116\010\001\002\000\024\010\uffda\011\uffda" +
    "\012\uffda\074\u0128\075\u0126\102\u0127\104\u0129\106\u0125\116" +
    "\uffda\001\002\000\020\010\uffdf\011\uffdf\012\uffdf\065\uffdf" +
    "\104\uffdf\107\uffdf\116\uffdf\001\002\000\004\110\u0121\001" +
    "\002\000\014\010\u0110\011\u0111\012\u010e\104\165\116\010" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\044\023\066\025\073\043\056\044\070\045\061" +
    "\046\060\050\064\052\055\053\054\054\071\055\053\103" +
    "\072\110\057\115\062\116\010\117\067\120\063\001\002" +
    "\000\046\017\045\020\024\021\040\022\036\023\041\024" +
    "\037\026\032\030\035\032\027\033\044\034\034\035\030" +
    "\047\025\051\020\057\043\061\042\062\021\116\010\001" +
    "\002\000\044\023\066\025\073\043\056\044\070\045\061" +
    "\046\060\050\064\052\055\053\054\054\071\055\053\103" +
    "\072\110\057\115\062\116\010\117\067\120\063\001\002" +
    "\000\004\005\225\001\002\000\052\005\ufff9\017\045\020" +
    "\024\021\040\022\036\023\041\024\037\026\032\030\035" +
    "\032\027\033\044\034\034\035\030\047\025\051\020\057" +
    "\043\061\042\062\021\064\031\116\010\001\002\000\052" +
    "\005\ufff9\017\045\020\024\021\040\022\036\023\041\024" +
    "\037\026\032\030\035\032\027\033\044\034\034\035\030" +
    "\047\025\051\020\057\043\061\042\062\021\064\031\116" +
    "\010\001\002\000\020\010\uffdd\011\uffdd\012\uffdd\065\uffdd" +
    "\104\uffdd\107\uffdd\116\uffdd\001\002\000\020\010\uffdc\011" +
    "\uffdc\012\uffdc\065\uffdc\104\uffdc\107\uffdc\116\uffdc\001\002" +
    "\000\020\010\uffde\011\uffde\012\uffde\065\uffde\104\uffde\107" +
    "\uffde\116\uffde\001\002\000\004\106\211\001\002\000\004" +
    "\113\210\001\002\000\004\110\204\001\002\000\004\110" +
    "\050\001\002\000\020\010\uffd9\011\uffd9\012\uffd9\065\uffd9" +
    "\104\uffd9\107\uffd9\116\uffd9\001\002\000\116\005\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\061\uffc1\062\uffc1\064\uffc1\103\uffc1\110\uffc1\111\uffc1" +
    "\115\uffc1\116\uffc1\117\uffc1\120\uffc1\001\002\000\116\005" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\057\uffd8\061\uffd8\062\uffd8\064\uffd8\103\uffd8\110\uffd8" +
    "\111\uffd8\115\uffd8\116\uffd8\117\uffd8\120\uffd8\001\002\000" +
    "\050\017\045\020\024\021\040\022\036\023\041\024\037" +
    "\026\032\030\035\032\027\033\044\034\034\035\030\047" +
    "\025\051\020\057\043\061\042\062\021\064\031\116\010" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\064\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\063\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\104\uffa2" +
    "\105\uffa2\106\uffa2\107\uffa2\111\uffa2\112\uffa2\113\uffa2\114" +
    "\uffa2\001\002\000\064\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\063\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\104\uff9c\105\uff9c\106\uff9c\107\uff9c\111\uff9c\112\uff9c\113" +
    "\uff9c\114\uff9c\001\002\000\064\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\063\uff9e\065\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\111\uff9e\112" +
    "\uff9e\113\uff9e\114\uff9e\001\002\000\064\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\063\uff9f\065\uff9f\066\uff9f\067" +
    "\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\076\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\111" +
    "\uff9f\112\uff9f\113\uff9f\114\uff9f\001\002\000\064\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\063\uffa7\065\uffa7\066" +
    "\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\076\uffa7" +
    "\077\uffa7\100\uffa7\101\uffa7\104\uffa7\105\uffa7\106\uffa7\107" +
    "\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\001\002\000\044" +
    "\023\066\025\073\043\056\044\070\045\061\046\060\050" +
    "\064\052\055\053\054\054\071\055\053\103\072\110\057" +
    "\115\062\116\010\117\067\120\063\001\002\000\064\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\063\uffa5\065\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\101\uffa5\104\uffa5\105\uffa5\106\uffa5" +
    "\107\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\001\002\000" +
    "\064\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\063\uffa0" +
    "\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\104\uffa0\105\uffa0" +
    "\106\uffa0\107\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\001" +
    "\002\000\064\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\063\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072" +
    "\uff99\073\uff99\076\uff99\077\uff99\100\uff99\101\uff99\104\uff99" +
    "\105\uff99\106\uff99\107\uff99\111\uff99\112\uff99\113\uff99\114" +
    "\uff99\001\002\000\064\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\063\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8" +
    "\104\uffa8\105\uffa8\106\uffa8\107\uffa8\111\uffa8\112\uffa8\113" +
    "\uffa8\114\uffa8\001\002\000\004\116\010\001\002\000\052" +
    "\036\102\037\104\040\116\041\105\042\111\063\122\066" +
    "\103\067\117\070\112\071\114\072\124\073\101\076\115" +
    "\077\123\100\120\101\113\104\107\106\106\112\121\113" +
    "\170\001\002\000\004\106\162\001\002\000\064\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\063\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\076\uffa9" +
    "\077\uffa9\100\uffa9\101\uffa9\104\uffa9\105\uffa9\106\uffa9\107" +
    "\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\001\002\000\064" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\063\uffa6\065" +
    "\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\101\uffa6\104\uffa6\105\uffa6\106" +
    "\uffa6\107\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\001\002" +
    "\000\064\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\063" +
    "\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d" +
    "\073\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\104\uff9d\105" +
    "\uff9d\106\uff9d\107\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\020\017\045\020\024\021\040\022\036\023\041" +
    "\024\037\116\010\001\002\000\020\010\uffda\011\uffda\012" +
    "\uffda\065\uffda\104\uffda\107\uffda\116\uffda\001\002\000\004" +
    "\104\076\001\002\000\046\023\066\025\073\043\056\044" +
    "\070\045\061\046\060\050\064\052\055\053\054\054\071" +
    "\055\053\103\072\105\077\110\057\115\062\116\010\117" +
    "\067\120\063\001\002\000\020\010\uffe0\011\uffe0\012\uffe0" +
    "\065\uffe0\104\uffe0\107\uffe0\116\uffe0\001\002\000\052\036" +
    "\102\037\104\040\116\041\105\042\111\063\122\066\103" +
    "\067\117\070\112\071\114\072\124\073\101\076\115\077" +
    "\123\100\120\101\113\104\107\105\110\106\106\112\121" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\044\023\066\025\073\043\056\044\070\045\061" +
    "\046\060\050\064\052\055\053\054\054\071\055\053\103" +
    "\072\110\057\115\062\116\010\117\067\120\063\001\002" +
    "\000\044\023\066\025\073\043\056\044\070\045\061\046" +
    "\060\050\064\052\055\053\054\054\071\055\053\103\072" +
    "\110\057\115\062\116\010\117\067\120\063\001\002\000" +
    "\044\023\066\025\073\043\056\044\070\045\061\046\060" +
    "\050\064\052\055\053\054\054\071\055\053\103\072\110" +
    "\057\115\062\116\010\117\067\120\063\001\002\000\044" +
    "\023\066\025\073\043\056\044\070\045\061\046\060\050" +
    "\064\052\055\053\054\054\071\055\053\103\072\110\057" +
    "\115\062\116\010\117\067\120\063\001\002\000\044\023" +
    "\066\025\073\043\056\044\070\045\061\046\060\050\064" +
    "\052\055\053\054\054\071\055\053\103\072\110\057\115" +
    "\062\116\010\117\067\120\063\001\002\000\044\023\066" +
    "\025\073\043\056\044\070\045\061\046\060\050\064\052" +
    "\055\053\054\054\071\055\053\103\072\110\057\115\062" +
    "\116\010\117\067\120\063\001\002\000\064\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\063\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\076\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b" +
    "\111\uff9b\112\uff9b\113\uff9b\114\uff9b\001\002\000\044\023" +
    "\066\025\073\043\056\044\070\045\061\046\060\050\064" +
    "\052\055\053\054\054\071\055\053\103\072\110\057\115" +
    "\062\116\010\117\067\120\063\001\002\000\044\023\066" +
    "\025\073\043\056\044\070\045\061\046\060\050\064\052" +
    "\055\053\054\054\071\055\053\103\072\110\057\115\062" +
    "\116\010\117\067\120\063\001\002\000\044\023\066\025" +
    "\073\043\056\044\070\045\061\046\060\050\064\052\055" +
    "\053\054\054\071\055\053\103\072\110\057\115\062\116" +
    "\010\117\067\120\063\001\002\000\044\023\066\025\073" +
    "\043\056\044\070\045\061\046\060\050\064\052\055\053" +
    "\054\054\071\055\053\103\072\110\057\115\062\116\010" +
    "\117\067\120\063\001\002\000\044\023\066\025\073\043" +
    "\056\044\070\045\061\046\060\050\064\052\055\053\054" +
    "\054\071\055\053\103\072\110\057\115\062\116\010\117" +
    "\067\120\063\001\002\000\044\023\066\025\073\043\056" +
    "\044\070\045\061\046\060\050\064\052\055\053\054\054" +
    "\071\055\053\103\072\110\057\115\062\116\010\117\067" +
    "\120\063\001\002\000\044\023\066\025\073\043\056\044" +
    "\070\045\061\046\060\050\064\052\055\053\054\054\071" +
    "\055\053\103\072\110\057\115\062\116\010\117\067\120" +
    "\063\001\002\000\044\023\066\025\073\043\056\044\070" +
    "\045\061\046\060\050\064\052\055\053\054\054\071\055" +
    "\053\103\072\110\057\115\062\116\010\117\067\120\063" +
    "\001\002\000\006\056\131\116\010\001\002\000\004\116" +
    "\010\001\002\000\044\023\066\025\073\043\056\044\070" +
    "\045\061\046\060\050\064\052\055\053\054\054\071\055" +
    "\053\103\072\110\057\115\062\116\010\117\067\120\063" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\064\036\102\037\104\040\116\041\105\042\111" +
    "\063\uffb5\065\uffb5\066\103\067\117\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\076\115\077\123\100\120\101\113\104\uffb5" +
    "\105\uffb5\106\uffb5\107\uffb5\111\uffb5\112\uffb5\113\uffb5\114" +
    "\uffb5\001\002\000\064\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\111\063\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\111\uffb1\112\uffb1\113" +
    "\uffb1\114\uffb1\001\002\000\064\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\063\uffac\065\uffac\066\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\073\uffac\076\uffac\077\uffac\100\uffac" +
    "\101\uffac\104\uffac\105\uffac\106\uffac\107\uffac\111\uffac\112" +
    "\uffac\113\uffac\114\uffac\001\002\000\004\110\132\001\002" +
    "\000\064\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\063" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\104\uffaa\105" +
    "\uffaa\106\uffaa\107\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\054\036\102\037\104\040\116\041\105\042\111" +
    "\063\122\065\136\066\103\067\117\070\112\071\114\072" +
    "\124\073\101\076\115\077\123\100\120\101\113\104\107" +
    "\106\106\111\uff97\112\121\001\002\000\004\111\135\001" +
    "\002\000\064\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\063\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\076\uffab\077\uffab\100\uffab\101\uffab\104\uffab" +
    "\105\uffab\106\uffab\107\uffab\111\uffab\112\uffab\113\uffab\114" +
    "\uffab\001\002\000\044\023\066\025\073\043\056\044\070" +
    "\045\061\046\060\050\064\052\055\053\054\054\071\055" +
    "\053\103\072\110\057\115\062\116\010\117\067\120\063" +
    "\001\002\000\004\111\uff98\001\002\000\064\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\111\063\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\076\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf" +
    "\111\uffaf\112\uffaf\113\uffaf\114\uffaf\001\002\000\064\036" +
    "\102\037\104\040\116\041\105\042\111\063\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\076" +
    "\115\077\123\100\120\101\113\104\uffb7\105\uffb7\106\uffb7" +
    "\107\uffb7\111\uffb7\112\uffb7\113\uffb7\114\uffb7\001\002\000" +
    "\064\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\111\063\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073" +
    "\uffbb\076\115\077\123\100\120\101\113\104\uffbb\105\uffbb" +
    "\106\uffbb\107\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb\001" +
    "\002\000\064\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\111" +
    "\063\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\104\uffb2" +
    "\105\uffb2\106\uffb2\107\uffb2\111\uffb2\112\uffb2\113\uffb2\114" +
    "\uffb2\001\002\000\064\036\102\037\104\040\116\041\105" +
    "\042\111\063\uffb4\065\uffb4\066\103\067\117\070\uffb4\071" +
    "\uffb4\072\uffb4\073\uffb4\076\115\077\123\100\120\101\113" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\111\uffb4\112\uffb4\113" +
    "\uffb4\114\uffb4\001\002\000\064\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\111\063\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\111\uffb0\112" +
    "\uffb0\113\uffb0\114\uffb0\001\002\000\064\036\102\037\104" +
    "\040\116\041\105\042\111\063\uffb6\065\uffb6\066\103\067" +
    "\117\070\uffb6\071\uffb6\072\uffb6\073\uffb6\076\115\077\123" +
    "\100\120\101\113\104\uffb6\105\uffb6\106\uffb6\107\uffb6\111" +
    "\uffb6\112\uffb6\113\uffb6\114\uffb6\001\002\000\064\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\063\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\104\uffb9\105\uffb9\106\uffb9\107" +
    "\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\001\002\000\052" +
    "\036\102\037\104\040\116\041\105\042\111\063\122\066" +
    "\103\067\117\070\112\071\114\072\124\073\101\076\115" +
    "\077\123\100\120\101\113\104\107\105\151\106\106\112" +
    "\121\001\002\000\064\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\063\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071" +
    "\uffae\072\uffae\073\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\104\uffae\105\uffae\106\uffae\107\uffae\111\uffae\112\uffae\113" +
    "\uffae\114\uffae\001\002\000\052\036\102\037\104\040\116" +
    "\041\105\042\111\063\122\066\103\067\117\070\112\071" +
    "\114\072\124\073\101\076\115\077\123\100\120\101\113" +
    "\104\107\106\106\107\153\112\121\001\002\000\064\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\063\uffad\065\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\076" +
    "\uffad\077\uffad\100\uffad\101\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\111\uffad\112\uffad\113\uffad\114\uffad\001\002\000" +
    "\064\036\uffba\037\uffba\040\uffba\041\uffba\042\111\063\uffba" +
    "\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\076\115\077\123\100\120\101\113\104\uffba\105\uffba" +
    "\106\uffba\107\uffba\111\uffba\112\uffba\113\uffba\114\uffba\001" +
    "\002\000\064\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\111" +
    "\063\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\076\115\077\123\100\120\101\113\104\uffbc" +
    "\105\uffbc\106\uffbc\107\uffbc\111\uffbc\112\uffbc\113\uffbc\114" +
    "\uffbc\001\002\000\064\036\102\037\104\040\116\041\105" +
    "\042\111\063\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\076\115\077\123\100\120\101\113" +
    "\104\uffb8\105\uffb8\106\uffb8\107\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\114\uffb8\001\002\000\064\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\111\063\uffbd\065\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\076\115\077\123\100\120" +
    "\101\113\104\uffbd\105\uffbd\106\uffbd\107\uffbd\111\uffbd\112" +
    "\uffbd\113\uffbd\114\uffbd\001\002\000\064\036\102\037\104" +
    "\040\116\041\105\042\111\063\uffb3\065\uffb3\066\103\067" +
    "\117\070\uffb3\071\uffb3\072\uffb3\073\uffb3\076\115\077\123" +
    "\100\120\101\113\104\uffb3\105\uffb3\106\uffb3\107\uffb3\111" +
    "\uffb3\112\uffb3\113\uffb3\114\uffb3\001\002\000\064\036\102" +
    "\037\104\040\116\041\105\042\111\063\122\065\uffa3\066" +
    "\103\067\117\070\112\071\114\072\124\073\101\076\115" +
    "\077\123\100\120\101\113\104\107\105\uffa3\106\106\107" +
    "\uffa3\111\uffa3\112\121\113\uffa3\114\uffa3\001\002\000\020" +
    "\017\045\020\024\021\040\022\036\023\041\024\037\116" +
    "\010\001\002\000\006\065\164\104\165\001\002\000\020" +
    "\017\045\020\024\021\040\022\036\023\041\024\037\116" +
    "\010\001\002\000\004\105\077\001\002\000\006\104\165" +
    "\107\167\001\002\000\064\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\063\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\076\uff9a\077\uff9a\100\uff9a\101" +
    "\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\111\uff9a\112\uff9a" +
    "\113\uff9a\114\uff9a\001\002\000\050\017\045\020\024\021" +
    "\040\022\036\023\041\024\037\026\032\030\035\032\027" +
    "\033\044\034\034\035\030\047\025\051\020\057\043\061" +
    "\042\062\021\064\031\116\010\001\002\000\004\111\172" +
    "\001\002\000\004\114\173\001\002\000\052\005\ufff9\017" +
    "\045\020\024\021\040\022\036\023\041\024\037\026\032" +
    "\030\035\032\027\033\044\034\034\035\030\047\025\051" +
    "\020\057\043\061\042\062\021\064\031\116\010\001\002" +
    "\000\004\005\175\001\002\000\116\005\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\061" +
    "\uffd2\062\uffd2\064\uffd2\103\uffd2\110\uffd2\111\uffd2\115\uffd2" +
    "\116\uffd2\117\uffd2\120\uffd2\001\002\000\004\110\177\001" +
    "\002\000\044\023\066\025\073\043\056\044\070\045\061" +
    "\046\060\050\064\052\055\053\054\054\071\055\053\103" +
    "\072\110\057\115\062\116\010\117\067\120\063\001\002" +
    "\000\004\111\201\001\002\000\064\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\063\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\071\uffa1\072\uffa1\073\uffa1\076\uffa1\077\uffa1\100" +
    "\uffa1\101\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\111\uffa1" +
    "\112\uffa1\113\uffa1\114\uffa1\001\002\000\052\036\102\037" +
    "\104\040\116\041\105\042\111\063\122\066\103\067\117" +
    "\070\112\071\114\072\124\073\101\076\115\077\123\100" +
    "\120\101\113\104\107\106\106\111\203\112\121\001\002" +
    "\000\064\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\063" +
    "\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4" +
    "\073\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\052\036\102\037\104\040\116\041\105\042\111" +
    "\063\122\066\103\067\117\070\112\071\114\072\124\073" +
    "\101\076\115\077\123\100\120\101\113\104\107\106\106" +
    "\111\206\112\121\001\002\000\004\113\207\001\002\000" +
    "\116\005\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\057\uffd0\061\uffd0\062\uffd0\064\uffd0\103\uffd0" +
    "\110\uffd0\111\uffd0\115\uffd0\116\uffd0\117\uffd0\120\uffd0\001" +
    "\002\000\116\005\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\057\uffc4\061\uffc4\062\uffc4\064\uffc4" +
    "\103\uffc4\110\uffc4\111\uffc4\115\uffc4\116\uffc4\117\uffc4\120" +
    "\uffc4\001\002\000\020\017\045\020\024\021\040\022\036" +
    "\023\041\024\037\116\010\001\002\000\006\065\213\104" +
    "\165\001\002\000\020\017\045\020\024\021\040\022\036" +
    "\023\041\024\037\116\010\001\002\000\006\104\165\107" +
    "\215\001\002\000\020\010\uffdb\011\uffdb\012\uffdb\065\uffdb" +
    "\104\uffdb\107\uffdb\116\uffdb\001\002\000\004\005\217\001" +
    "\002\000\116\005\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\057\uffd6\061\uffd6\062\uffd6\064\uffd6" +
    "\103\uffd6\110\uffd6\111\uffd6\115\uffd6\116\uffd6\117\uffd6\120" +
    "\uffd6\001\002\000\004\005\221\001\002\000\004\032\222" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\052\036\102\037\104\040\116\041\105\042\111" +
    "\063\122\066\103\067\117\070\112\071\114\072\124\073" +
    "\101\076\115\077\123\100\120\101\113\104\107\106\106" +
    "\112\121\113\224\001\002\000\116\005\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\061" +
    "\uffd1\062\uffd1\064\uffd1\103\uffd1\110\uffd1\111\uffd1\115\uffd1" +
    "\116\uffd1\117\uffd1\120\uffd1\001\002\000\014\002\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\016\ufff6\001\002\000\014\002\ufffc" +
    "\010\233\011\234\013\231\016\230\001\002\000\016\002" +
    "\ufff7\005\ufff7\010\ufff7\011\ufff7\013\ufff7\016\ufff7\001\002" +
    "\000\020\017\045\020\024\021\040\022\036\023\041\024" +
    "\037\116\010\001\002\000\004\116\010\001\002\000\016" +
    "\002\ufff8\005\ufff8\010\ufff8\011\ufff8\013\ufff8\016\ufff8\001" +
    "\002\000\006\013\317\016\316\001\002\000\006\013\236" +
    "\016\235\001\002\000\020\017\045\020\024\021\040\022" +
    "\036\023\041\024\037\116\010\001\002\000\004\116\010" +
    "\001\002\000\006\014\240\114\241\001\002\000\004\116" +
    "\010\001\002\000\034\005\uffe8\010\uffe8\011\uffe8\013\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\116\uffe8\001\002\000\034\005\uffee\010\uffee" +
    "\011\uffee\013\uffee\015\uffee\016\uffee\017\045\020\024\021" +
    "\040\022\036\023\041\024\037\116\010\001\002\000\034" +
    "\005\uffe9\010\uffe9\011\uffe9\013\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\116\uffe9" +
    "\001\002\000\014\010\267\011\270\012\265\104\165\116" +
    "\010\001\002\000\016\005\ufff6\010\ufff6\011\ufff6\013\ufff6" +
    "\015\246\016\ufff6\001\002\000\004\111\252\001\002\000" +
    "\016\005\uffef\010\uffef\011\uffef\013\uffef\015\uffef\016\uffef" +
    "\001\002\000\014\005\251\010\233\011\234\013\231\016" +
    "\230\001\002\000\016\002\ufff2\005\ufff2\010\ufff2\011\ufff2" +
    "\013\ufff2\016\ufff2\001\002\000\020\017\045\020\024\021" +
    "\040\022\036\023\041\024\037\116\010\001\002\000\006" +
    "\065\257\110\260\001\002\000\006\104\165\116\010\001" +
    "\002\000\006\065\uffe2\110\uffe2\001\002\000\006\065\uffe1" +
    "\110\uffe1\001\002\000\020\017\045\020\024\021\040\022" +
    "\036\023\041\024\037\116\010\001\002\000\004\114\261" +
    "\001\002\000\052\005\ufff9\017\045\020\024\021\040\022" +
    "\036\023\041\024\037\026\032\030\035\032\027\033\044" +
    "\034\034\035\030\047\025\051\020\057\043\061\042\062" +
    "\021\064\031\116\010\001\002\000\004\005\263\001\002" +
    "\000\016\005\uffed\010\uffed\011\uffed\013\uffed\015\uffed\016" +
    "\uffed\001\002\000\006\065\uffe3\110\uffe3\001\002\000\004" +
    "\116\010\001\002\000\004\113\275\001\002\000\004\116" +
    "\010\001\002\000\004\116\010\001\002\000\004\113\272" +
    "\001\002\000\130\005\uffe6\010\uffe6\011\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\057\uffe6\061\uffe6\062\uffe6\064\uffe6\103\uffe6" +
    "\110\uffe6\111\uffe6\115\uffe6\116\uffe6\117\uffe6\120\uffe6\001" +
    "\002\000\004\113\274\001\002\000\130\005\uffe4\010\uffe4" +
    "\011\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\061\uffe4\062" +
    "\uffe4\064\uffe4\103\uffe4\110\uffe4\111\uffe4\115\uffe4\116\uffe4" +
    "\117\uffe4\120\uffe4\001\002\000\130\005\uffe7\010\uffe7\011" +
    "\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\061\uffe7\062\uffe7" +
    "\064\uffe7\103\uffe7\110\uffe7\111\uffe7\115\uffe7\116\uffe7\117" +
    "\uffe7\120\uffe7\001\002\000\004\113\277\001\002\000\130" +
    "\005\uffe5\010\uffe5\011\uffe5\013\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057" +
    "\uffe5\061\uffe5\062\uffe5\064\uffe5\103\uffe5\110\uffe5\111\uffe5" +
    "\115\uffe5\116\uffe5\117\uffe5\120\uffe5\001\002\000\004\114" +
    "\301\001\002\000\034\005\uffe8\010\uffe8\011\uffe8\013\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\116\uffe8\001\002\000\034\005\uffee\010\uffee" +
    "\011\uffee\013\uffee\015\uffee\016\uffee\017\045\020\024\021" +
    "\040\022\036\023\041\024\037\116\010\001\002\000\016" +
    "\005\ufff6\010\ufff6\011\ufff6\013\ufff6\015\246\016\ufff6\001" +
    "\002\000\014\005\305\010\233\011\234\013\231\016\230" +
    "\001\002\000\016\002\ufff3\005\ufff3\010\ufff3\011\ufff3\013" +
    "\ufff3\016\ufff3\001\002\000\006\104\165\116\010\001\002" +
    "\000\004\111\310\001\002\000\020\017\045\020\024\021" +
    "\040\022\036\023\041\024\037\116\010\001\002\000\006" +
    "\065\257\110\312\001\002\000\004\114\313\001\002\000" +
    "\052\005\ufff9\017\045\020\024\021\040\022\036\023\041" +
    "\024\037\026\032\030\035\032\027\033\044\034\034\035" +
    "\030\047\025\051\020\057\043\061\042\062\021\064\031" +
    "\116\010\001\002\000\004\005\315\001\002\000\016\002" +
    "\uffeb\005\uffeb\010\uffeb\011\uffeb\013\uffeb\016\uffeb\001\002" +
    "\000\020\017\045\020\024\021\040\022\036\023\041\024" +
    "\037\116\010\001\002\000\004\116\010\001\002\000\006" +
    "\014\321\114\322\001\002\000\004\116\010\001\002\000" +
    "\034\005\uffe8\010\uffe8\011\uffe8\013\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\116" +
    "\uffe8\001\002\000\034\005\uffee\010\uffee\011\uffee\013\uffee" +
    "\015\uffee\016\uffee\017\045\020\024\021\040\022\036\023" +
    "\041\024\037\116\010\001\002\000\016\005\ufff6\010\ufff6" +
    "\011\ufff6\013\ufff6\015\246\016\ufff6\001\002\000\014\005" +
    "\326\010\233\011\234\013\231\016\230\001\002\000\016" +
    "\002\ufff5\005\ufff5\010\ufff5\011\ufff5\013\ufff5\016\ufff5\001" +
    "\002\000\004\114\330\001\002\000\034\005\uffe8\010\uffe8" +
    "\011\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\116\uffe8\001\002\000\034" +
    "\005\uffee\010\uffee\011\uffee\013\uffee\015\uffee\016\uffee\017" +
    "\045\020\024\021\040\022\036\023\041\024\037\116\010" +
    "\001\002\000\016\005\ufff6\010\ufff6\011\ufff6\013\ufff6\015" +
    "\246\016\ufff6\001\002\000\014\005\334\010\233\011\234" +
    "\013\231\016\230\001\002\000\016\002\ufff4\005\ufff4\010" +
    "\ufff4\011\ufff4\013\ufff4\016\ufff4\001\002\000\006\104\165" +
    "\116\010\001\002\000\004\111\337\001\002\000\020\017" +
    "\045\020\024\021\040\022\036\023\041\024\037\116\010" +
    "\001\002\000\006\065\257\110\341\001\002\000\004\114" +
    "\342\001\002\000\052\005\ufff9\017\045\020\024\021\040" +
    "\022\036\023\041\024\037\026\032\030\035\032\027\033" +
    "\044\034\034\035\030\047\025\051\020\057\043\061\042" +
    "\062\021\064\031\116\010\001\002\000\004\005\344\001" +
    "\002\000\016\002\uffec\005\uffec\010\uffec\011\uffec\013\uffec" +
    "\016\uffec\001\002\000\006\014\346\114\347\001\002\000" +
    "\004\116\010\001\002\000\034\005\uffe8\010\uffe8\011\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\116\uffe8\001\002\000\034\005\uffee" +
    "\010\uffee\011\uffee\013\uffee\015\uffee\016\uffee\017\045\020" +
    "\024\021\040\022\036\023\041\024\037\116\010\001\002" +
    "\000\016\005\ufff6\010\ufff6\011\ufff6\013\ufff6\015\246\016" +
    "\ufff6\001\002\000\014\005\353\010\233\011\234\013\231" +
    "\016\230\001\002\000\016\002\ufff0\005\ufff0\010\ufff0\011" +
    "\ufff0\013\ufff0\016\ufff0\001\002\000\004\114\355\001\002" +
    "\000\034\005\uffe8\010\uffe8\011\uffe8\013\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\116\uffe8\001\002\000\034\005\uffee\010\uffee\011\uffee\013" +
    "\uffee\015\uffee\016\uffee\017\045\020\024\021\040\022\036" +
    "\023\041\024\037\116\010\001\002\000\016\005\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\015\246\016\ufff6\001\002\000\014" +
    "\005\361\010\233\011\234\013\231\016\230\001\002\000" +
    "\016\002\ufff1\005\ufff1\010\ufff1\011\ufff1\013\ufff1\016\ufff1" +
    "\001\002\000\006\104\165\116\010\001\002\000\004\111" +
    "\364\001\002\000\020\017\045\020\024\021\040\022\036" +
    "\023\041\024\037\116\010\001\002\000\006\065\257\110" +
    "\366\001\002\000\004\114\367\001\002\000\052\005\ufff9" +
    "\017\045\020\024\021\040\022\036\023\041\024\037\026" +
    "\032\030\035\032\027\033\044\034\034\035\030\047\025" +
    "\051\020\057\043\061\042\062\021\064\031\116\010\001" +
    "\002\000\004\005\371\001\002\000\016\002\uffea\005\uffea" +
    "\010\uffea\011\uffea\013\uffea\016\uffea\001\002\000\052\036" +
    "\102\037\104\040\116\041\105\042\111\063\122\066\103" +
    "\067\117\070\112\071\114\072\124\073\101\076\115\077" +
    "\123\100\120\101\113\104\107\106\106\112\121\114\373" +
    "\001\002\000\056\005\ufff9\017\045\020\024\021\040\022" +
    "\036\023\041\024\037\026\032\027\ufff9\030\035\031\ufff9" +
    "\032\027\033\044\034\034\035\030\047\025\051\020\057" +
    "\043\061\042\062\021\064\031\116\010\001\002\000\010" +
    "\005\uffbf\027\uffbf\031\uffbf\001\002\000\010\005\u0101\027" +
    "\377\031\376\001\002\000\044\023\066\025\073\043\056" +
    "\044\070\045\061\046\060\050\064\052\055\053\054\054" +
    "\071\055\053\103\072\110\057\115\062\116\010\117\067" +
    "\120\063\001\002\000\052\005\ufff9\017\045\020\024\021" +
    "\040\022\036\023\041\024\037\026\032\030\035\032\027" +
    "\033\044\034\034\035\030\047\025\051\020\057\043\061" +
    "\042\062\021\064\031\116\010\001\002\000\004\005\u0102" +
    "\001\002\000\116\005\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\057\uffd4\061\uffd4\062\uffd4\064" +
    "\uffd4\103\uffd4\110\uffd4\111\uffd4\115\uffd4\116\uffd4\117\uffd4" +
    "\120\uffd4\001\002\000\116\005\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\061\uffd5\062" +
    "\uffd5\064\uffd5\103\uffd5\110\uffd5\111\uffd5\115\uffd5\116\uffd5" +
    "\117\uffd5\120\uffd5\001\002\000\004\005\uffbe\001\002\000" +
    "\052\036\102\037\104\040\116\041\105\042\111\063\122" +
    "\066\103\067\117\070\112\071\114\072\124\073\101\076" +
    "\115\077\123\100\120\101\113\104\107\106\106\112\121" +
    "\114\u0105\001\002\000\056\005\ufff9\017\045\020\024\021" +
    "\040\022\036\023\041\024\037\026\032\027\ufff9\030\035" +
    "\031\ufff9\032\027\033\044\034\034\035\030\047\025\051" +
    "\020\057\043\061\042\062\021\064\031\116\010\001\002" +
    "\000\010\005\uffc0\027\uffc0\031\uffc0\001\002\000\116\005" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\057\uffd7\061\uffd7\062\uffd7\064\uffd7\103\uffd7\110\uffd7" +
    "\111\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\001\002\000" +
    "\052\036\102\037\104\040\116\041\105\042\111\063\122" +
    "\066\103\067\117\070\112\071\114\072\124\073\101\076" +
    "\115\077\123\100\120\101\113\104\107\106\106\112\121" +
    "\113\u0109\001\002\000\116\005\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\061\uffc8\062" +
    "\uffc8\064\uffc8\103\uffc8\110\uffc8\111\uffc8\115\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\001\002\000\052\036\102\037\104\040" +
    "\116\041\105\042\111\063\122\066\103\067\117\070\112" +
    "\071\114\072\124\073\101\076\115\077\123\100\120\101" +
    "\113\104\107\106\106\112\121\114\u010b\001\002\000\052" +
    "\005\ufff9\017\045\020\024\021\040\022\036\023\041\024" +
    "\037\026\032\030\035\032\027\033\044\034\034\035\030" +
    "\047\025\051\020\057\043\061\042\062\021\064\031\116" +
    "\010\001\002\000\004\005\u010d\001\002\000\116\005\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\057\uffd3\061\uffd3\062\uffd3\064\uffd3\103\uffd3\110\uffd3\111" +
    "\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\001\002\000\004" +
    "\116\010\001\002\000\006\102\u011a\113\275\001\002\000" +
    "\004\116\010\001\002\000\004\116\010\001\002\000\006" +
    "\102\u0113\113\272\001\002\000\044\023\066\025\073\043" +
    "\056\044\070\045\061\046\060\050\064\052\055\053\054" +
    "\054\071\055\053\103\072\110\057\115\062\116\010\117" +
    "\067\120\063\001\002\000\052\036\102\037\104\040\116" +
    "\041\105\042\111\063\122\066\103\067\117\070\112\071" +
    "\114\072\124\073\101\076\115\077\123\100\120\101\113" +
    "\104\107\106\106\112\121\113\u0115\001\002\000\116\005" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\057\uffce\061\uffce\062\uffce\064\uffce\103\uffce\110\uffce" +
    "\111\uffce\115\uffce\116\uffce\117\uffce\120\uffce\001\002\000" +
    "\006\102\u0117\113\274\001\002\000\044\023\066\025\073" +
    "\043\056\044\070\045\061\046\060\050\064\052\055\053" +
    "\054\054\071\055\053\103\072\110\057\115\062\116\010" +
    "\117\067\120\063\001\002\000\052\036\102\037\104\040" +
    "\116\041\105\042\111\063\122\066\103\067\117\070\112" +
    "\071\114\072\124\073\101\076\115\077\123\100\120\101" +
    "\113\104\107\106\106\112\121\113\u0119\001\002\000\116" +
    "\005\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\057\uffcc\061\uffcc\062\uffcc\064\uffcc\103\uffcc\110" +
    "\uffcc\111\uffcc\115\uffcc\116\uffcc\117\uffcc\120\uffcc\001\002" +
    "\000\044\023\066\025\073\043\056\044\070\045\061\046" +
    "\060\050\064\052\055\053\054\054\071\055\053\103\072" +
    "\110\057\115\062\116\010\117\067\120\063\001\002\000" +
    "\052\036\102\037\104\040\116\041\105\042\111\063\122" +
    "\066\103\067\117\070\112\071\114\072\124\073\101\076" +
    "\115\077\123\100\120\101\113\104\107\106\106\112\121" +
    "\113\u011c\001\002\000\116\005\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\061\uffcf\062" +
    "\uffcf\064\uffcf\103\uffcf\110\uffcf\111\uffcf\115\uffcf\116\uffcf" +
    "\117\uffcf\120\uffcf\001\002\000\006\102\u011e\113\277\001" +
    "\002\000\044\023\066\025\073\043\056\044\070\045\061" +
    "\046\060\050\064\052\055\053\054\054\071\055\053\103" +
    "\072\110\057\115\062\116\010\117\067\120\063\001\002" +
    "\000\052\036\102\037\104\040\116\041\105\042\111\063" +
    "\122\066\103\067\117\070\112\071\114\072\124\073\101" +
    "\076\115\077\123\100\120\101\113\104\107\106\106\112" +
    "\121\113\u0120\001\002\000\116\005\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd\061\uffcd" +
    "\062\uffcd\064\uffcd\103\uffcd\110\uffcd\111\uffcd\115\uffcd\116" +
    "\uffcd\117\uffcd\120\uffcd\001\002\000\044\023\066\025\073" +
    "\043\056\044\070\045\061\046\060\050\064\052\055\053" +
    "\054\054\071\055\053\103\072\110\057\115\062\116\010" +
    "\117\067\120\063\001\002\000\052\036\102\037\104\040" +
    "\116\041\105\042\111\063\122\066\103\067\117\070\112" +
    "\071\114\072\124\073\101\076\115\077\123\100\120\101" +
    "\113\104\107\106\106\111\u0123\112\121\001\002\000\004" +
    "\113\u0124\001\002\000\116\005\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\061\uffc7\062" +
    "\uffc7\064\uffc7\103\uffc7\110\uffc7\111\uffc7\115\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\001\002\000\044\023\066\025\073\043" +
    "\056\044\070\045\061\046\060\050\064\052\055\053\054" +
    "\054\071\055\053\103\072\110\057\115\062\116\010\117" +
    "\067\120\063\001\002\000\004\113\u0132\001\002\000\044" +
    "\023\066\025\073\043\056\044\070\045\061\046\060\050" +
    "\064\052\055\053\054\054\071\055\053\103\072\110\057" +
    "\115\062\116\010\117\067\120\063\001\002\000\004\113" +
    "\u012f\001\002\000\044\023\066\025\073\043\056\044\070" +
    "\045\061\046\060\050\064\052\055\053\054\054\071\055" +
    "\053\103\072\110\057\115\062\116\010\117\067\120\063" +
    "\001\002\000\052\036\102\037\104\040\116\041\105\042" +
    "\111\063\122\066\103\067\117\070\112\071\114\072\124" +
    "\073\101\076\115\077\123\100\120\101\113\104\107\105" +
    "\u012b\106\106\112\121\001\002\000\004\102\u012c\001\002" +
    "\000\044\023\066\025\073\043\056\044\070\045\061\046" +
    "\060\050\064\052\055\053\054\054\071\055\053\103\072" +
    "\110\057\115\062\116\010\117\067\120\063\001\002\000" +
    "\052\036\102\037\104\040\116\041\105\042\111\063\122" +
    "\066\103\067\117\070\112\071\114\072\124\073\101\076" +
    "\115\077\123\100\120\101\113\104\107\106\106\112\121" +
    "\113\u012e\001\002\000\116\005\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9\061\uffc9\062" +
    "\uffc9\064\uffc9\103\uffc9\110\uffc9\111\uffc9\115\uffc9\116\uffc9" +
    "\117\uffc9\120\uffc9\001\002\000\116\005\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3\061" +
    "\uffc3\062\uffc3\064\uffc3\103\uffc3\110\uffc3\111\uffc3\115\uffc3" +
    "\116\uffc3\117\uffc3\120\uffc3\001\002\000\052\036\102\037" +
    "\104\040\116\041\105\042\111\063\122\066\103\067\117" +
    "\070\112\071\114\072\124\073\101\076\115\077\123\100" +
    "\120\101\113\104\107\106\106\112\121\113\u0131\001\002" +
    "\000\116\005\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\057\uffcb\061\uffcb\062\uffcb\064\uffcb\103" +
    "\uffcb\110\uffcb\111\uffcb\115\uffcb\116\uffcb\117\uffcb\120\uffcb" +
    "\001\002\000\116\005\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\057\uffc2\061\uffc2\062\uffc2\064" +
    "\uffc2\103\uffc2\110\uffc2\111\uffc2\115\uffc2\116\uffc2\117\uffc2" +
    "\120\uffc2\001\002\000\052\036\102\037\104\040\116\041" +
    "\105\042\111\063\122\066\103\067\117\070\112\071\114" +
    "\072\124\073\101\076\115\077\123\100\120\101\113\104" +
    "\107\106\106\107\u0134\112\121\001\002\000\004\102\u0135" +
    "\001\002\000\044\023\066\025\073\043\056\044\070\045" +
    "\061\046\060\050\064\052\055\053\054\054\071\055\053" +
    "\103\072\110\057\115\062\116\010\117\067\120\063\001" +
    "\002\000\052\036\102\037\104\040\116\041\105\042\111" +
    "\063\122\066\103\067\117\070\112\071\114\072\124\073" +
    "\101\076\115\077\123\100\120\101\113\104\107\106\106" +
    "\112\121\113\u0137\001\002\000\116\005\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\057\uffca\061" +
    "\uffca\062\uffca\064\uffca\103\uffca\110\uffca\111\uffca\115\uffca" +
    "\116\uffca\117\uffca\120\uffca\001\002\000\010\005\ufffa\027" +
    "\ufffa\031\ufffa\001\002\000\116\005\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\057\uffc5\061\uffc5" +
    "\062\uffc5\064\uffc5\103\uffc5\110\uffc5\111\uffc5\115\uffc5\116" +
    "\uffc5\117\uffc5\120\uffc5\001\002\000\044\023\066\025\073" +
    "\043\056\044\070\045\061\046\060\050\064\052\055\053" +
    "\054\054\071\055\053\103\072\110\057\115\062\116\010" +
    "\117\067\120\063\001\002\000\052\036\102\037\104\040" +
    "\116\041\105\042\111\063\122\066\103\067\117\070\112" +
    "\071\114\072\124\073\101\076\115\077\123\100\120\101" +
    "\113\104\107\106\106\111\u013c\112\121\001\002\000\004" +
    "\113\u013d\001\002\000\116\005\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\057\uffc6\061\uffc6\062" +
    "\uffc6\064\uffc6\103\uffc6\110\uffc6\111\uffc6\115\uffc6\116\uffc6" +
    "\117\uffc6\120\uffc6\001\002\000\004\113\u013f\001\002\000" +
    "\022\002\ufffe\004\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe" +
    "\016\ufffe\060\ufffe\001\002\000\052\005\ufff9\017\045\020" +
    "\024\021\040\022\036\023\041\024\037\026\032\030\035" +
    "\032\027\033\044\034\034\035\030\047\025\051\020\057" +
    "\043\061\042\062\021\064\031\116\010\001\002\000\004" +
    "\005\u0142\001\002\000\014\002\ufff6\010\ufff6\011\ufff6\013" +
    "\ufff6\016\ufff6\001\002\000\014\002\ufffb\010\233\011\234" +
    "\013\231\016\230\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\004\002\004\001\001\000\004\020\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u013d\001\001\000\006\007\231\010\226\001" +
    "\001\000\016\005\032\012\045\014\025\015\021\020\022" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u0137\012\045\014\025\015\021\020\022\024\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u010e\001\001\000\006\016\u0109\020\051" +
    "\001\001\000\006\016\u0107\020\051\001\001\000\012\012" +
    "\045\014\025\020\022\024\u0106\001\001\000\006\016\371" +
    "\020\051\001\001\000\002\001\001\000\016\005\217\012" +
    "\045\014\025\015\021\020\022\024\046\001\001\000\016" +
    "\005\215\012\045\014\025\015\021\020\022\024\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\045\014\025\015\050\020\022\024" +
    "\046\001\001\000\006\016\064\020\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\201\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\160\020\051\001\001\000\006" +
    "\014\074\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\077\020\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\157\020\051\001\001\000" +
    "\006\016\156\020\051\001\001\000\006\016\155\020\051" +
    "\001\001\000\006\016\154\020\051\001\001\000\006\016" +
    "\153\020\051\001\001\000\006\016\151\020\051\001\001" +
    "\000\006\016\147\020\051\001\001\000\002\001\001\000" +
    "\006\016\146\020\051\001\001\000\006\016\145\020\051" +
    "\001\001\000\006\016\144\020\051\001\001\000\006\016" +
    "\143\020\051\001\001\000\006\016\142\020\051\001\001" +
    "\000\006\016\141\020\051\001\001\000\006\016\140\020" +
    "\051\001\001\000\006\016\137\020\051\001\001\000\004" +
    "\020\127\001\001\000\004\020\126\001\001\000\006\016" +
    "\125\020\051\001\001\000\006\016\124\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\132\017\133" +
    "\020\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\132\017\136\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\162\020\073\001\001\000\002\001\001\000\006\014" +
    "\165\020\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\045\014\025\015\170\020" +
    "\022\024\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\173\012\045\014\025\015\021\020\022\024" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\132\017\177\020\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\204\020\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\211\020\073\001\001\000\002\001\001\000" +
    "\006\014\213\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\222\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\225\001" +
    "\001\000\006\007\231\010\226\001\001\000\002\001\001" +
    "\000\006\014\361\020\073\001\001\000\004\020\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\305\020\073\001\001\000\004\020\236\001" +
    "\001\000\002\001\001\000\004\020\277\001\001\000\004" +
    "\011\241\001\001\000\012\012\242\014\243\020\073\026" +
    "\244\001\001\000\002\001\001\000\004\020\265\001\001" +
    "\000\006\006\247\025\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\231\010\226\001\001\000\002" +
    "\001\001\000\012\013\252\014\253\020\073\021\254\001" +
    "\001\000\002\001\001\000\004\020\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\253\020\073\021" +
    "\263\001\001\000\002\001\001\000\016\005\261\012\045" +
    "\014\025\015\021\020\022\024\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\275" +
    "\001\001\000\002\001\001\000\004\020\272\001\001\000" +
    "\004\020\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\301\001\001\000\012\012\242\014\243\020\073\026" +
    "\302\001\001\000\006\006\303\025\246\001\001\000\006" +
    "\007\231\010\226\001\001\000\002\001\001\000\004\020" +
    "\306\001\001\000\002\001\001\000\012\013\310\014\253" +
    "\020\073\021\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\313\012\045\014\025\015\021\020\022" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\334\020\073\001\001\000\004\020\317\001\001" +
    "\000\002\001\001\000\004\020\326\001\001\000\004\011" +
    "\322\001\001\000\012\012\242\014\243\020\073\026\323" +
    "\001\001\000\006\006\324\025\246\001\001\000\006\007" +
    "\231\010\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\330\001\001\000\012\012\242\014\243\020" +
    "\073\026\331\001\001\000\006\006\332\025\246\001\001" +
    "\000\006\007\231\010\226\001\001\000\002\001\001\000" +
    "\004\020\335\001\001\000\002\001\001\000\012\013\337" +
    "\014\253\020\073\021\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\342\012\045\014\025\015\021" +
    "\020\022\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\353\001\001\000\004" +
    "\011\347\001\001\000\012\012\242\014\243\020\073\026" +
    "\350\001\001\000\006\006\351\025\246\001\001\000\006" +
    "\007\231\010\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\355\001\001\000\012\012\242\014\243" +
    "\020\073\026\356\001\001\000\006\006\357\025\246\001" +
    "\001\000\006\007\231\010\226\001\001\000\002\001\001" +
    "\000\004\020\362\001\001\000\002\001\001\000\012\013" +
    "\364\014\253\020\073\021\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\367\012\045\014\025\015" +
    "\021\020\022\024\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\373\012\045\014" +
    "\025\015\021\020\022\024\046\001\001\000\004\022\374" +
    "\001\001\000\004\023\377\001\001\000\006\016\u0103\020" +
    "\051\001\001\000\016\005\u0102\012\045\014\025\015\021" +
    "\020\022\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\u0105\012\045\014\025\015\021\020\022\024" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\u010b\012\045\014\025\015\021\020\022\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u011c\001" +
    "\001\000\002\001\001\000\004\020\u0115\001\001\000\004" +
    "\020\u0111\001\001\000\002\001\001\000\006\016\u0113\020" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u0117\020\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u011a\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\u011e\020\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u0121\020\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\u0132" +
    "\020\051\001\001\000\002\001\001\000\006\016\u012f\020" +
    "\051\001\001\000\002\001\001\000\006\016\u0129\020\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\u012c\020\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\u0135\020\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\u013a" +
    "\020\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\u0140\012\045\014\025\015\021\020\022\024\046\001" +
    "\001\000\002\001\001\000\004\006\u0142\001\001\000\006" +
    "\007\231\010\226\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramlist ::= expression 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParamList p  = new ParamList(); p.add(e); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // paramlist ::= expression COMMA paramlist 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= ARRAY type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= GETSTRING 
            {
              Expression RESULT =null;
		 RESULT = new GetString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= GETBOOLEAN 
            {
              Expression RESULT =null;
		 RESULT = new GetBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= GETFLOAT 
            {
              Expression RESULT =null;
		 RESULT = new GetFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= GETINT 
            {
              Expression RESULT =null;
		 RESULT = new GetInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= CREATE identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjectCreate(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= identifier 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= NIL 
            {
              Expression RESULT =null;
		 RESULT = new Nil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression DOT identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall(e, i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression POINTER identifier 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // else ::= ELSE statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_statement ::= identifier DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_statement ::= identifier INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_statement ::= type PUBLIC identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_statement ::= type PROTECTED identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_statement ::= type PRIVATE identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_statement ::= type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_statement ::= FOR LPAREN statement expression SEMICOLON statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arglist ::= parameter 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArgList l = new ArgList(); l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arglist ::= arglist COMMA parameter 
            {
              ArgList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vardec ::= type PUBLIC identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vardec ::= type PROTECTED identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vardec ::= type PRIVATE identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vardeclist ::= vardeclist vardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // methoddef ::= SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // methoddef ::= PRIVATE SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // methoddef ::= PUBLIC SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constructor ::= CONSTRUCTOR RPAREN arglist LPAREN COLON statementlist END 
            {
              Constructor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constructorlist ::= 
            {
              ConstructorList RESULT =null;
		 RESULT = new ConstructorList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constructorlist ::= constructorlist constructor 
            {
              ConstructorList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstructorList l = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classdef ::= PRIVATE CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classdef ::= PUBLIC CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

