
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 14 21:39:36 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 14 21:39:36 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\006\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\002\000\002" +
    "\007\011\000\002\007\013\000\002\007\013\000\002\007" +
    "\011\000\002\007\012\000\002\007\010\000\002\010\014" +
    "\000\002\010\014\000\002\010\013\000\002\011\004\000" +
    "\002\011\002\000\002\012\005\000\002\013\005\000\002" +
    "\013\003\000\002\021\004\000\002\014\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\010\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\004\000\002\025\002\000\002" +
    "\024\015\000\002\024\010\000\002\024\006\000\002\024" +
    "\013\000\002\024\007\000\002\024\007\000\002\024\007" +
    "\000\002\024\010\000\002\024\010\000\002\024\010\000" +
    "\002\024\006\000\002\024\011\000\002\024\011\000\002" +
    "\024\003\000\002\024\005\000\002\024\007\000\002\024" +
    "\007\000\002\024\004\000\002\024\004\000\002\024\005" +
    "\000\002\024\005\000\002\022\007\000\002\022\002\000" +
    "\002\023\004\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\026\002\000\002\016\011\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\006\000\002\016\006\000\002\016\005\000\002\016" +
    "\010\000\002\016\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\004\000\002\016\003\000\002" +
    "\016\007\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\007" +
    "\000\002\016\010\000\002\016\003\000\002\017\005\000" +
    "\002\017\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\004\006\004\001\002\000\004\115\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\112\011\001\002\000\136\014\uff9c\022\uff9c\024" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\047\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113" +
    "\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\001\002\000\022" +
    "\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd\015" +
    "\ufffd\057\ufffd\001\002\000\022\002\ufff6\004\017\007\015" +
    "\010\ufff6\011\ufff6\013\ufff6\015\ufff6\057\013\001\002\000" +
    "\004\004\u0131\001\002\000\004\002\001\001\002\000\004" +
    "\115\010\001\002\000\014\002\uffff\010\266\011\267\013" +
    "\264\015\263\001\002\000\060\005\ufff9\010\035\011\026" +
    "\012\043\016\050\017\024\020\042\021\040\022\044\023" +
    "\041\025\033\027\037\031\027\032\047\033\036\034\031" +
    "\046\025\050\020\056\046\060\045\061\021\063\032\115" +
    "\010\001\002\000\004\107\u012b\001\002\000\004\112\u012a" +
    "\001\002\000\060\005\ufff9\010\035\011\026\012\043\016" +
    "\050\017\024\020\042\021\040\022\044\023\041\025\033" +
    "\027\037\031\027\032\047\033\036\034\031\046\025\050" +
    "\020\056\046\060\045\061\021\063\032\115\010\001\002" +
    "\000\016\073\u0119\074\u0117\101\u0118\103\u011a\105\u0116\115" +
    "\uffe0\001\002\000\012\064\uffe5\103\uffe5\106\uffe5\115\uffe5" +
    "\001\002\000\004\107\u0112\001\002\000\020\016\050\017" +
    "\024\020\042\021\040\022\044\023\041\115\010\001\002" +
    "\000\044\022\071\024\076\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\102\075" +
    "\107\062\114\066\115\010\116\072\117\065\001\002\000" +
    "\006\103\172\115\010\001\002\000\044\022\071\024\076" +
    "\042\061\043\073\044\064\045\063\047\067\051\060\052" +
    "\057\053\074\054\056\102\075\107\062\114\066\115\010" +
    "\116\072\117\065\001\002\000\054\010\035\011\026\012" +
    "\043\016\050\017\024\020\042\021\040\022\044\023\041" +
    "\025\033\027\037\031\027\032\047\033\036\034\031\046" +
    "\025\050\020\056\046\060\045\061\021\115\010\001\002" +
    "\000\044\022\071\024\076\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\102\075" +
    "\107\062\114\066\115\010\116\072\117\065\001\002\000" +
    "\004\005\260\001\002\000\020\016\050\017\024\020\042" +
    "\021\040\022\044\023\041\115\010\001\002\000\056\010" +
    "\035\011\026\012\043\016\050\017\024\020\042\021\040" +
    "\022\044\023\041\025\033\027\037\031\027\032\047\033" +
    "\036\034\031\046\025\050\020\056\046\060\045\061\021" +
    "\063\032\115\010\001\002\000\060\005\ufff9\010\035\011" +
    "\026\012\043\016\050\017\024\020\042\021\040\022\044" +
    "\023\041\025\033\027\037\031\027\032\047\033\036\034" +
    "\031\046\025\050\020\056\046\060\045\061\021\063\032" +
    "\115\010\001\002\000\012\064\uffe3\103\uffe3\106\uffe3\115" +
    "\uffe3\001\002\000\012\064\uffe2\103\uffe2\106\uffe2\115\uffe2" +
    "\001\002\000\012\064\uffe4\103\uffe4\106\uffe4\115\uffe4\001" +
    "\002\000\020\016\050\017\024\020\042\021\040\022\044" +
    "\023\041\115\010\001\002\000\004\105\215\001\002\000" +
    "\004\112\214\001\002\000\004\107\210\001\002\000\004" +
    "\107\053\001\002\000\012\064\uffdf\103\uffdf\106\uffdf\115" +
    "\uffdf\001\002\000\124\005\uffde\010\uffde\011\uffde\012\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\056\uffde\060\uffde\061\uffde\063\uffde\102\uffde\107\uffde\110" +
    "\uffde\114\uffde\115\uffde\116\uffde\117\uffde\001\002\000\124" +
    "\005\uffce\010\uffce\011\uffce\012\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\056\uffce\060\uffce\061" +
    "\uffce\063\uffce\102\uffce\107\uffce\110\uffce\114\uffce\115\uffce" +
    "\116\uffce\117\uffce\001\002\000\056\010\035\011\026\012" +
    "\043\016\050\017\024\020\042\021\040\022\044\023\041" +
    "\025\033\027\037\031\027\032\047\033\036\034\031\046" +
    "\025\050\020\056\046\060\045\061\021\063\032\115\010" +
    "\001\002\000\044\022\071\024\076\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\102\075\107\062\114\066\115\010\116\072\117\065\001" +
    "\002\000\126\022\uffa8\024\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\062\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\075" +
    "\uffa8\076\uffa8\077\uffa8\100\uffa8\102\uffa8\103\uffa8\104\uffa8" +
    "\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113" +
    "\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8\001\002\000\126" +
    "\022\uffa2\024\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\047\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\062\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\075\uffa2\076\uffa2" +
    "\077\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2" +
    "\115\uffa2\116\uffa2\117\uffa2\001\002\000\126\022\uffa4\024" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\047\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\075\uffa4\076\uffa4\077\uffa4\100" +
    "\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4" +
    "\110\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\116" +
    "\uffa4\117\uffa4\001\002\000\126\022\uffa5\024\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\102\uffa5" +
    "\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111" +
    "\uffa5\112\uffa5\113\uffa5\114\uffa5\115\uffa5\116\uffa5\117\uffa5" +
    "\001\002\000\126\022\uffad\024\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\047\uffad\051\uffad\052\uffad\053\uffad\054\uffad\062\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\075\uffad\076\uffad\077\uffad\100\uffad\102\uffad\103\uffad\104" +
    "\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad" +
    "\113\uffad\114\uffad\115\uffad\116\uffad\117\uffad\001\002\000" +
    "\044\022\071\024\076\042\061\043\073\044\064\045\063" +
    "\047\067\051\060\052\057\053\074\054\056\102\075\107" +
    "\062\114\066\115\010\116\072\117\065\001\002\000\126" +
    "\022\uffab\024\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\047\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\062\uffab\064\uffab\065\uffab\066" +
    "\uffab\067\uffab\070\uffab\071\uffab\072\uffab\075\uffab\076\uffab" +
    "\077\uffab\100\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106" +
    "\uffab\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab" +
    "\115\uffab\116\uffab\117\uffab\001\002\000\126\022\uffa6\024" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\047\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6" +
    "\070\uffa6\071\uffa6\072\uffa6\075\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6" +
    "\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116" +
    "\uffa6\117\uffa6\001\002\000\126\022\uffae\024\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\047\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\062\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071" +
    "\uffae\072\uffae\075\uffae\076\uffae\077\uffae\100\uffae\102\uffae" +
    "\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111" +
    "\uffae\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117\uffae" +
    "\001\002\000\126\022\uff9f\024\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\047\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\062\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\100\uff9f\102\uff9f\103\uff9f\104" +
    "\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f" +
    "\113\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f\001\002\000" +
    "\004\115\010\001\002\000\050\035\105\036\107\037\120" +
    "\040\110\041\114\062\124\065\106\066\122\067\115\070" +
    "\117\071\126\072\104\076\125\077\121\100\116\103\111" +
    "\105\112\111\123\112\175\001\002\000\004\105\167\001" +
    "\002\000\126\022\uffaf\024\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\062\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\075" +
    "\uffaf\076\uffaf\077\uffaf\100\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113" +
    "\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\001\002\000\126" +
    "\022\uffac\024\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\047\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\062\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106" +
    "\uffac\107\uffac\110\uffac\111\uffac\112\uffac\113\uffac\114\uffac" +
    "\115\uffac\116\uffac\117\uffac\001\002\000\126\022\uffa3\024" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\047\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\075\uffa3\076\uffa3\077\uffa3\100" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3" +
    "\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3\116" +
    "\uffa3\117\uffa3\001\002\000\044\022\071\024\076\042\061" +
    "\043\073\044\064\045\063\047\067\051\060\052\057\053" +
    "\074\054\056\102\075\107\062\114\066\115\010\116\072" +
    "\117\065\001\002\000\020\016\050\017\024\020\042\021" +
    "\040\022\044\023\041\115\010\001\002\000\012\064\uffe0" +
    "\103\uffe0\106\uffe0\115\uffe0\001\002\000\004\103\101\001" +
    "\002\000\046\022\071\024\076\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\102" +
    "\075\104\102\107\062\114\066\115\010\116\072\117\065" +
    "\001\002\000\012\064\uffe6\103\uffe6\106\uffe6\115\uffe6\001" +
    "\002\000\050\035\105\036\107\037\120\040\110\041\114" +
    "\062\124\065\106\066\122\067\115\070\117\071\126\072" +
    "\104\076\125\077\121\100\116\103\111\104\113\105\112" +
    "\111\123\001\002\000\044\022\071\024\076\042\061\043" +
    "\073\044\064\045\063\047\067\051\060\052\057\053\074" +
    "\054\056\102\075\107\062\114\066\115\010\116\072\117" +
    "\065\001\002\000\044\022\071\024\076\042\061\043\073" +
    "\044\064\045\063\047\067\051\060\052\057\053\074\054" +
    "\056\102\075\107\062\114\066\115\010\116\072\117\065" +
    "\001\002\000\044\022\071\024\076\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\102\075\107\062\114\066\115\010\116\072\117\065\001" +
    "\002\000\044\022\071\024\076\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\102" +
    "\075\107\062\114\066\115\010\116\072\117\065\001\002" +
    "\000\044\022\071\024\076\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\102\075" +
    "\107\062\114\066\115\010\116\072\117\065\001\002\000" +
    "\044\022\071\024\076\042\061\043\073\044\064\045\063" +
    "\047\067\051\060\052\057\053\074\054\056\102\075\107" +
    "\062\114\066\115\010\116\072\117\065\001\002\000\044" +
    "\022\071\024\076\042\061\043\073\044\064\045\063\047" +
    "\067\051\060\052\057\053\074\054\056\102\075\107\062" +
    "\114\066\115\010\116\072\117\065\001\002\000\126\022" +
    "\uffa1\024\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\047\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1" +
    "\067\uffa1\070\uffa1\071\uffa1\072\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1" +
    "\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115" +
    "\uffa1\116\uffa1\117\uffa1\001\002\000\044\022\071\024\076" +
    "\042\061\043\073\044\064\045\063\047\067\051\060\052" +
    "\057\053\074\054\056\102\075\107\062\114\066\115\010" +
    "\116\072\117\065\001\002\000\044\022\071\024\076\042" +
    "\061\043\073\044\064\045\063\047\067\051\060\052\057" +
    "\053\074\054\056\102\075\107\062\114\066\115\010\116" +
    "\072\117\065\001\002\000\044\022\071\024\076\042\061" +
    "\043\073\044\064\045\063\047\067\051\060\052\057\053" +
    "\074\054\056\102\075\107\062\114\066\115\010\116\072" +
    "\117\065\001\002\000\044\022\071\024\076\042\061\043" +
    "\073\044\064\045\063\047\067\051\060\052\057\053\074" +
    "\054\056\102\075\107\062\114\066\115\010\116\072\117" +
    "\065\001\002\000\044\022\071\024\076\042\061\043\073" +
    "\044\064\045\063\047\067\051\060\052\057\053\074\054" +
    "\056\102\075\107\062\114\066\115\010\116\072\117\065" +
    "\001\002\000\044\022\071\024\076\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\102\075\107\062\114\066\115\010\116\072\117\065\001" +
    "\002\000\044\022\071\024\076\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\102" +
    "\075\107\062\114\066\115\010\116\072\117\065\001\002" +
    "\000\006\055\133\115\010\001\002\000\004\115\010\001" +
    "\002\000\044\022\071\024\076\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\102" +
    "\075\107\062\114\066\115\010\116\072\117\065\001\002" +
    "\000\044\022\071\024\076\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\102\075" +
    "\107\062\114\066\115\010\116\072\117\065\001\002\000" +
    "\126\022\uffbb\024\uffbb\035\105\036\107\037\120\040\110" +
    "\041\114\042\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\062\uffbb\064\uffbb\065\106" +
    "\066\122\067\uffbb\070\uffbb\071\uffbb\072\uffbb\075\uffbb\076" +
    "\125\077\121\100\116\102\uffbb\103\uffbb\104\uffbb\105\uffbb" +
    "\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114" +
    "\uffbb\115\uffbb\116\uffbb\117\uffbb\001\002\000\126\022\uffb7" +
    "\024\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\114\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107" +
    "\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7" +
    "\116\uffb7\117\uffb7\001\002\000\126\022\uffb2\024\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2" +
    "\111\uffb2\112\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117" +
    "\uffb2\001\002\000\004\107\134\001\002\000\126\022\uffb0" +
    "\024\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\075\uffb0\076\uffb0\077\uffb0" +
    "\100\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107" +
    "\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0" +
    "\116\uffb0\117\uffb0\001\002\000\044\022\071\024\076\042" +
    "\061\043\073\044\064\045\063\047\067\051\060\052\057" +
    "\053\074\054\056\102\075\107\062\114\066\115\010\116" +
    "\072\117\065\001\002\000\052\035\105\036\107\037\120" +
    "\040\110\041\114\062\124\064\140\065\106\066\122\067" +
    "\115\070\117\071\126\072\104\076\125\077\121\100\116" +
    "\103\111\105\112\110\uff9d\111\123\001\002\000\004\110" +
    "\137\001\002\000\126\022\uffb1\024\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\062\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072" +
    "\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\102\uffb1\103\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1\001\002" +
    "\000\044\022\071\024\076\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\102\075" +
    "\107\062\114\066\115\010\116\072\117\065\001\002\000" +
    "\004\110\uff9e\001\002\000\126\022\uffbd\024\uffbd\035\105" +
    "\036\107\037\120\040\110\041\114\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\062\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\072\uffbd\075\uffbd\076\125\077\121\100\116\102\uffbd" +
    "\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111" +
    "\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd" +
    "\001\002\000\126\022\uffb5\024\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\114\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\047\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\062\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\100\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5" +
    "\113\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\001\002\000" +
    "\126\022\uffc1\024\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\114\042\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\062\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\075\uffc1\076" +
    "\125\077\121\100\116\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\114" +
    "\uffc1\115\uffc1\116\uffc1\117\uffc1\001\002\000\126\022\uffba" +
    "\024\uffba\035\105\036\107\037\120\040\110\041\114\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\047\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\062\uffba\064\uffba\065\106\066\122\067" +
    "\uffba\070\uffba\071\uffba\072\uffba\075\uffba\076\125\077\121" +
    "\100\116\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107" +
    "\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115\uffba" +
    "\116\uffba\117\uffba\001\002\000\126\022\uffb6\024\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\114\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\102" +
    "\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\117" +
    "\uffb6\001\002\000\126\022\uffbc\024\uffbc\035\105\036\107" +
    "\037\120\040\110\041\114\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\062\uffbc" +
    "\064\uffbc\065\106\066\122\067\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\075\uffbc\076\125\077\121\100\116\102\uffbc\103\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc\117\uffbc\001\002" +
    "\000\126\022\uffbf\024\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\047\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\062\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\075\uffbf" +
    "\076\uffbf\077\uffbf\100\uffbf\102\uffbf\103\uffbf\104\uffbf\105" +
    "\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf" +
    "\114\uffbf\115\uffbf\116\uffbf\117\uffbf\001\002\000\050\035" +
    "\105\036\107\037\120\040\110\041\114\062\124\065\106" +
    "\066\122\067\115\070\117\071\126\072\104\076\125\077" +
    "\121\100\116\103\111\105\112\106\152\111\123\001\002" +
    "\000\126\022\uffb3\024\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\062\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3" +
    "\114\uffb3\115\uffb3\116\uffb3\117\uffb3\001\002\000\050\035" +
    "\105\036\107\037\120\040\110\041\114\062\124\065\106" +
    "\066\122\067\115\070\117\071\126\072\104\076\125\077" +
    "\121\100\116\103\111\104\154\105\112\111\123\001\002" +
    "\000\126\022\uffb4\024\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\047\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\102\uffb4\103\uffb4\104\uffb4\105" +
    "\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4" +
    "\114\uffb4\115\uffb4\116\uffb4\117\uffb4\001\002\000\126\022" +
    "\uffc0\024\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\114" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\075\uffc0\076\125\077" +
    "\121\100\116\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0" +
    "\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\114\uffc0\115" +
    "\uffc0\116\uffc0\117\uffc0\001\002\000\126\022\uffc2\024\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\114\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\075\uffc2\076\125\077\121\100\116" +
    "\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110" +
    "\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2\116\uffc2" +
    "\117\uffc2\001\002\000\126\022\uffbe\024\uffbe\035\105\036" +
    "\107\037\120\040\110\041\114\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\062" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\075\uffbe\076\125\077\121\100\116\102\uffbe\103" +
    "\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe" +
    "\112\uffbe\113\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe\001" +
    "\002\000\126\022\uffc3\024\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\114\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\062\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\075" +
    "\uffc3\076\125\077\121\100\116\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113" +
    "\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\001\002\000\110" +
    "\022\uffb9\024\uffb9\035\105\036\107\037\120\040\110\041" +
    "\114\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\062\124\065\106\066\122\067" +
    "\115\070\117\071\126\072\104\076\125\077\121\100\116" +
    "\102\uffb9\103\111\105\112\107\uffb9\111\123\114\uffb9\115" +
    "\uffb9\116\uffb9\117\uffb9\001\002\000\044\022\071\024\076" +
    "\042\061\043\073\044\064\045\063\047\067\051\060\052" +
    "\057\053\074\054\056\102\075\107\062\114\066\115\010" +
    "\116\072\117\065\001\002\000\050\035\105\036\107\037" +
    "\120\040\110\041\114\062\124\065\106\066\122\067\115" +
    "\070\117\071\126\072\104\075\164\076\125\077\121\100" +
    "\116\103\111\105\112\111\123\001\002\000\044\022\071" +
    "\024\076\042\061\043\073\044\064\045\063\047\067\051" +
    "\060\052\057\053\074\054\056\102\075\107\062\114\066" +
    "\115\010\116\072\117\065\001\002\000\126\022\uffb8\024" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\114\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8" +
    "\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114\uffb8\115\uffb8\116" +
    "\uffb8\117\uffb8\001\002\000\126\022\uffa9\024\uffa9\035\105" +
    "\036\107\037\120\040\110\041\114\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\062\124\064\uffa9\065\106\066\122\067\115\070\117\071" +
    "\126\072\104\075\uffa9\076\125\077\121\100\116\102\uffa9" +
    "\103\111\104\uffa9\105\112\106\uffa9\107\uffa9\110\uffa9\111" +
    "\123\112\uffa9\113\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9" +
    "\001\002\000\020\016\050\017\024\020\042\021\040\022" +
    "\044\023\041\115\010\001\002\000\006\064\171\103\172" +
    "\001\002\000\020\016\050\017\024\020\042\021\040\022" +
    "\044\023\041\115\010\001\002\000\004\104\102\001\002" +
    "\000\006\103\172\106\174\001\002\000\126\022\uffa0\024" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\047\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\075\uffa0\076\uffa0\077\uffa0\100" +
    "\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0" +
    "\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\115\uffa0\116" +
    "\uffa0\117\uffa0\001\002\000\056\010\035\011\026\012\043" +
    "\016\050\017\024\020\042\021\040\022\044\023\041\025" +
    "\033\027\037\031\027\032\047\033\036\034\031\046\025" +
    "\050\020\056\046\060\045\061\021\063\032\115\010\001" +
    "\002\000\004\110\177\001\002\000\004\113\200\001\002" +
    "\000\056\010\035\011\026\012\043\016\050\017\024\020" +
    "\042\021\040\022\044\023\041\025\033\027\037\031\027" +
    "\032\047\033\036\034\031\046\025\050\020\056\046\060" +
    "\045\061\021\063\032\115\010\001\002\000\124\005\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\056\uffd8\060\uffd8\061\uffd8\063" +
    "\uffd8\102\uffd8\107\uffd8\110\uffd8\114\uffd8\115\uffd8\116\uffd8" +
    "\117\uffd8\001\002\000\004\107\203\001\002\000\044\022" +
    "\071\024\076\042\061\043\073\044\064\045\063\047\067" +
    "\051\060\052\057\053\074\054\056\102\075\107\062\114" +
    "\066\115\010\116\072\117\065\001\002\000\004\110\205" +
    "\001\002\000\126\022\uffa7\024\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\047\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\062\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7" +
    "\075\uffa7\076\uffa7\077\uffa7\100\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7" +
    "\113\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7\001\002\000" +
    "\050\035\105\036\107\037\120\040\110\041\114\062\124" +
    "\065\106\066\122\067\115\070\117\071\126\072\104\076" +
    "\125\077\121\100\116\103\111\105\112\110\207\111\123" +
    "\001\002\000\126\022\uffaa\024\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\047\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\062\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\075\uffaa\076\uffaa\077\uffaa\100\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa" +
    "\113\uffaa\114\uffaa\115\uffaa\116\uffaa\117\uffaa\001\002\000" +
    "\044\022\071\024\076\042\061\043\073\044\064\045\063" +
    "\047\067\051\060\052\057\053\074\054\056\102\075\107" +
    "\062\114\066\115\010\116\072\117\065\001\002\000\050" +
    "\035\105\036\107\037\120\040\110\041\114\062\124\065" +
    "\106\066\122\067\115\070\117\071\126\072\104\076\125" +
    "\077\121\100\116\103\111\105\112\110\212\111\123\001" +
    "\002\000\004\112\213\001\002\000\124\005\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\056\uffd6\060\uffd6\061\uffd6\063\uffd6\102" +
    "\uffd6\107\uffd6\110\uffd6\114\uffd6\115\uffd6\116\uffd6\117\uffd6" +
    "\001\002\000\124\005\uffc9\010\uffc9\011\uffc9\012\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056" +
    "\uffc9\060\uffc9\061\uffc9\063\uffc9\102\uffc9\107\uffc9\110\uffc9" +
    "\114\uffc9\115\uffc9\116\uffc9\117\uffc9\001\002\000\020\016" +
    "\050\017\024\020\042\021\040\022\044\023\041\115\010" +
    "\001\002\000\006\064\217\103\172\001\002\000\020\016" +
    "\050\017\024\020\042\021\040\022\044\023\041\115\010" +
    "\001\002\000\006\103\172\106\221\001\002\000\012\064" +
    "\uffe1\103\uffe1\106\uffe1\115\uffe1\001\002\000\006\103\172" +
    "\115\010\001\002\000\004\101\224\001\002\000\044\022" +
    "\071\024\076\042\061\043\073\044\064\045\063\047\067" +
    "\051\060\052\057\053\074\054\056\102\075\107\062\114" +
    "\066\115\010\116\072\117\065\001\002\000\050\035\105" +
    "\036\107\037\120\040\110\041\114\062\124\065\106\066" +
    "\122\067\115\070\117\071\126\072\104\076\125\077\121" +
    "\100\116\103\111\105\112\111\123\112\226\001\002\000" +
    "\124\005\uffd3\010\uffd3\011\uffd3\012\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\060\uffd3" +
    "\061\uffd3\063\uffd3\102\uffd3\107\uffd3\110\uffd3\114\uffd3\115" +
    "\uffd3\116\uffd3\117\uffd3\001\002\000\004\005\230\001\002" +
    "\000\004\025\uffdc\001\002\000\004\025\232\001\002\000" +
    "\044\022\071\024\076\042\061\043\073\044\064\045\063" +
    "\047\067\051\060\052\057\053\074\054\056\102\075\107" +
    "\062\114\066\115\010\116\072\117\065\001\002\000\050" +
    "\035\105\036\107\037\120\040\110\041\114\062\124\065" +
    "\106\066\122\067\115\070\117\071\126\072\104\076\125" +
    "\077\121\100\116\103\111\105\112\111\123\113\234\001" +
    "\002\000\056\010\035\011\026\012\043\016\050\017\024" +
    "\020\042\021\040\022\044\023\041\025\033\027\037\031" +
    "\027\032\047\033\036\034\031\046\025\050\020\056\046" +
    "\060\045\061\021\063\032\115\010\001\002\000\006\026" +
    "\uffc5\030\uffc5\001\002\000\006\026\240\030\237\001\002" +
    "\000\044\022\071\024\076\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\102\075" +
    "\107\062\114\066\115\010\116\072\117\065\001\002\000" +
    "\056\010\035\011\026\012\043\016\050\017\024\020\042" +
    "\021\040\022\044\023\041\025\033\027\037\031\027\032" +
    "\047\033\036\034\031\046\025\050\020\056\046\060\045" +
    "\061\021\063\032\115\010\001\002\000\004\005\242\001" +
    "\002\000\124\005\uffdb\010\uffdb\011\uffdb\012\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\063\uffdb\102\uffdb\107\uffdb\110\uffdb\114" +
    "\uffdb\115\uffdb\116\uffdb\117\uffdb\001\002\000\004\005\uffc4" +
    "\001\002\000\050\035\105\036\107\037\120\040\110\041" +
    "\114\062\124\065\106\066\122\067\115\070\117\071\126" +
    "\072\104\076\125\077\121\100\116\103\111\105\112\111" +
    "\123\113\245\001\002\000\056\010\035\011\026\012\043" +
    "\016\050\017\024\020\042\021\040\022\044\023\041\025" +
    "\033\027\037\031\027\032\047\033\036\034\031\046\025" +
    "\050\020\056\046\060\045\061\021\063\032\115\010\001" +
    "\002\000\010\005\uffc6\026\uffc6\030\uffc6\001\002\000\004" +
    "\031\250\001\002\000\044\022\071\024\076\042\061\043" +
    "\073\044\064\045\063\047\067\051\060\052\057\053\074" +
    "\054\056\102\075\107\062\114\066\115\010\116\072\117" +
    "\065\001\002\000\050\035\105\036\107\037\120\040\110" +
    "\041\114\062\124\065\106\066\122\067\115\070\117\071" +
    "\126\072\104\076\125\077\121\100\116\103\111\105\112" +
    "\111\123\112\252\001\002\000\124\005\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\056\uffd7\060\uffd7\061\uffd7\063\uffd7\102\uffd7" +
    "\107\uffd7\110\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7\001" +
    "\002\000\006\103\172\115\010\001\002\000\004\101\255" +
    "\001\002\000\044\022\071\024\076\042\061\043\073\044" +
    "\064\045\063\047\067\051\060\052\057\053\074\054\056" +
    "\102\075\107\062\114\066\115\010\116\072\117\065\001" +
    "\002\000\050\035\105\036\107\037\120\040\110\041\114" +
    "\062\124\065\106\066\122\067\115\070\117\071\126\072" +
    "\104\076\125\077\121\100\116\103\111\105\112\111\123" +
    "\112\257\001\002\000\124\005\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\056\uffd2\060\uffd2\061\uffd2\063\uffd2\102\uffd2\107\uffd2" +
    "\110\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\001\002\000" +
    "\014\002\ufff6\010\ufff6\011\ufff6\013\ufff6\015\ufff6\001\002" +
    "\000\014\002\ufffc\010\266\011\267\013\264\015\263\001" +
    "\002\000\016\002\ufff7\005\ufff7\010\ufff7\011\ufff7\013\ufff7" +
    "\015\ufff7\001\002\000\020\016\050\017\024\020\042\021" +
    "\040\022\044\023\041\115\010\001\002\000\004\115\010" +
    "\001\002\000\016\002\ufff8\005\ufff8\010\ufff8\011\ufff8\013" +
    "\ufff8\015\ufff8\001\002\000\006\013\327\015\326\001\002" +
    "\000\006\013\271\015\270\001\002\000\020\016\050\017" +
    "\024\020\042\021\040\022\044\023\041\115\010\001\002" +
    "\000\004\115\010\001\002\000\006\014\273\113\274\001" +
    "\002\000\004\115\010\001\002\000\032\005\uffeb\010\uffeb" +
    "\011\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\115\uffeb\001\002\000\032\005\ufff6" +
    "\010\ufff6\011\ufff6\013\ufff6\015\ufff6\016\050\017\024\020" +
    "\042\021\040\022\044\023\041\115\010\001\002\000\032" +
    "\005\uffec\010\uffec\011\uffec\013\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\115\uffec\001\002" +
    "\000\006\103\172\115\010\001\002\000\014\005\301\010" +
    "\266\011\267\013\264\015\263\001\002\000\016\002\ufff2" +
    "\005\ufff2\010\ufff2\011\ufff2\013\ufff2\015\ufff2\001\002\000" +
    "\004\112\303\001\002\000\130\005\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\056\uffea\060\uffea\061\uffea\063" +
    "\uffea\102\uffea\107\uffea\110\uffea\114\uffea\115\uffea\116\uffea" +
    "\117\uffea\001\002\000\004\113\305\001\002\000\032\005" +
    "\uffeb\010\uffeb\011\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\115\uffeb\001\002\000" +
    "\032\005\ufff6\010\ufff6\011\ufff6\013\ufff6\015\ufff6\016\050" +
    "\017\024\020\042\021\040\022\044\023\041\115\010\001" +
    "\002\000\014\005\310\010\266\011\267\013\264\015\263" +
    "\001\002\000\016\002\ufff3\005\ufff3\010\ufff3\011\ufff3\013" +
    "\ufff3\015\ufff3\001\002\000\006\103\172\115\010\001\002" +
    "\000\004\110\313\001\002\000\020\016\050\017\024\020" +
    "\042\021\040\022\044\023\041\115\010\001\002\000\006" +
    "\064\320\107\321\001\002\000\006\103\172\115\010\001" +
    "\002\000\006\064\uffe8\107\uffe8\001\002\000\006\064\uffe7" +
    "\107\uffe7\001\002\000\020\016\050\017\024\020\042\021" +
    "\040\022\044\023\041\115\010\001\002\000\004\113\322" +
    "\001\002\000\060\005\ufff9\010\035\011\026\012\043\016" +
    "\050\017\024\020\042\021\040\022\044\023\041\025\033" +
    "\027\037\031\027\032\047\033\036\034\031\046\025\050" +
    "\020\056\046\060\045\061\021\063\032\115\010\001\002" +
    "\000\004\005\324\001\002\000\016\002\uffee\005\uffee\010" +
    "\uffee\011\uffee\013\uffee\015\uffee\001\002\000\006\064\uffe9" +
    "\107\uffe9\001\002\000\020\016\050\017\024\020\042\021" +
    "\040\022\044\023\041\115\010\001\002\000\004\115\010" +
    "\001\002\000\006\014\331\113\332\001\002\000\004\115" +
    "\010\001\002\000\032\005\uffeb\010\uffeb\011\uffeb\013\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\115\uffeb\001\002\000\032\005\ufff6\010\ufff6\011\ufff6" +
    "\013\ufff6\015\ufff6\016\050\017\024\020\042\021\040\022" +
    "\044\023\041\115\010\001\002\000\014\005\335\010\266" +
    "\011\267\013\264\015\263\001\002\000\016\002\ufff5\005" +
    "\ufff5\010\ufff5\011\ufff5\013\ufff5\015\ufff5\001\002\000\004" +
    "\113\337\001\002\000\032\005\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\115\uffeb\001\002\000\032\005\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\015\ufff6\016\050\017\024\020\042\021\040" +
    "\022\044\023\041\115\010\001\002\000\014\005\342\010" +
    "\266\011\267\013\264\015\263\001\002\000\016\002\ufff4" +
    "\005\ufff4\010\ufff4\011\ufff4\013\ufff4\015\ufff4\001\002\000" +
    "\006\103\172\115\010\001\002\000\004\110\345\001\002" +
    "\000\020\016\050\017\024\020\042\021\040\022\044\023" +
    "\041\115\010\001\002\000\006\064\320\107\347\001\002" +
    "\000\004\113\350\001\002\000\060\005\ufff9\010\035\011" +
    "\026\012\043\016\050\017\024\020\042\021\040\022\044" +
    "\023\041\025\033\027\037\031\027\032\047\033\036\034" +
    "\031\046\025\050\020\056\046\060\045\061\021\063\032" +
    "\115\010\001\002\000\004\005\352\001\002\000\016\002" +
    "\uffef\005\uffef\010\uffef\011\uffef\013\uffef\015\uffef\001\002" +
    "\000\006\014\354\113\355\001\002\000\004\115\010\001" +
    "\002\000\032\005\uffeb\010\uffeb\011\uffeb\013\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\115" +
    "\uffeb\001\002\000\032\005\ufff6\010\ufff6\011\ufff6\013\ufff6" +
    "\015\ufff6\016\050\017\024\020\042\021\040\022\044\023" +
    "\041\115\010\001\002\000\014\005\360\010\266\011\267" +
    "\013\264\015\263\001\002\000\016\002\ufff0\005\ufff0\010" +
    "\ufff0\011\ufff0\013\ufff0\015\ufff0\001\002\000\004\113\362" +
    "\001\002\000\032\005\uffeb\010\uffeb\011\uffeb\013\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\115\uffeb\001\002\000\032\005\ufff6\010\ufff6\011\ufff6\013" +
    "\ufff6\015\ufff6\016\050\017\024\020\042\021\040\022\044" +
    "\023\041\115\010\001\002\000\014\005\365\010\266\011" +
    "\267\013\264\015\263\001\002\000\016\002\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\013\ufff1\015\ufff1\001\002\000\006\103" +
    "\172\115\010\001\002\000\004\110\370\001\002\000\020" +
    "\016\050\017\024\020\042\021\040\022\044\023\041\115" +
    "\010\001\002\000\006\064\320\107\372\001\002\000\004" +
    "\113\373\001\002\000\060\005\ufff9\010\035\011\026\012" +
    "\043\016\050\017\024\020\042\021\040\022\044\023\041" +
    "\025\033\027\037\031\027\032\047\033\036\034\031\046" +
    "\025\050\020\056\046\060\045\061\021\063\032\115\010" +
    "\001\002\000\004\005\375\001\002\000\016\002\uffed\005" +
    "\uffed\010\uffed\011\uffed\013\uffed\015\uffed\001\002\000\050" +
    "\035\105\036\107\037\120\040\110\041\114\062\124\065" +
    "\106\066\122\067\115\070\117\071\126\072\104\076\125" +
    "\077\121\100\116\103\111\105\112\111\123\113\377\001" +
    "\002\000\056\010\035\011\026\012\043\016\050\017\024" +
    "\020\042\021\040\022\044\023\041\025\033\027\037\031" +
    "\027\032\047\033\036\034\031\046\025\050\020\056\046" +
    "\060\045\061\021\063\032\115\010\001\002\000\006\005" +
    "\uffc5\030\uffc5\001\002\000\006\005\u0102\030\237\001\002" +
    "\000\124\005\uffda\010\uffda\011\uffda\012\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\056\uffda\060" +
    "\uffda\061\uffda\063\uffda\102\uffda\107\uffda\110\uffda\114\uffda" +
    "\115\uffda\116\uffda\117\uffda\001\002\000\124\005\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\056\uffdd\060\uffdd\061\uffdd\063\uffdd" +
    "\102\uffdd\107\uffdd\110\uffdd\114\uffdd\115\uffdd\116\uffdd\117" +
    "\uffdd\001\002\000\050\035\105\036\107\037\120\040\110" +
    "\041\114\062\124\065\106\066\122\067\115\070\117\071" +
    "\126\072\104\076\125\077\121\100\116\103\111\105\112" +
    "\111\123\112\u0105\001\002\000\124\005\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\056\uffcd\060\uffcd\061\uffcd\063\uffcd\102\uffcd" +
    "\107\uffcd\110\uffcd\114\uffcd\115\uffcd\116\uffcd\117\uffcd\001" +
    "\002\000\006\101\u0107\112\303\001\002\000\044\022\071" +
    "\024\076\042\061\043\073\044\064\045\063\047\067\051" +
    "\060\052\057\053\074\054\056\102\075\107\062\114\066" +
    "\115\010\116\072\117\065\001\002\000\050\035\105\036" +
    "\107\037\120\040\110\041\114\062\124\065\106\066\122" +
    "\067\115\070\117\071\126\072\104\076\125\077\121\100" +
    "\116\103\111\105\112\111\123\112\u0109\001\002\000\124" +
    "\005\uffd5\010\uffd5\011\uffd5\012\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\060\uffd5\061" +
    "\uffd5\063\uffd5\102\uffd5\107\uffd5\110\uffd5\114\uffd5\115\uffd5" +
    "\116\uffd5\117\uffd5\001\002\000\050\035\105\036\107\037" +
    "\120\040\110\041\114\062\124\065\106\066\122\067\115" +
    "\070\117\071\126\072\104\076\125\077\121\100\116\103" +
    "\111\105\112\111\123\113\u010b\001\002\000\056\010\035" +
    "\011\026\012\043\016\050\017\024\020\042\021\040\022" +
    "\044\023\041\025\033\027\037\031\027\032\047\033\036" +
    "\034\031\046\025\050\020\056\046\060\045\061\021\063" +
    "\032\115\010\001\002\000\124\005\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\056\uffd9\060\uffd9\061\uffd9\063\uffd9\102\uffd9\107" +
    "\uffd9\110\uffd9\114\uffd9\115\uffd9\116\uffd9\117\uffd9\001\002" +
    "\000\006\103\172\115\010\001\002\000\004\101\u010f\001" +
    "\002\000\044\022\071\024\076\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\102" +
    "\075\107\062\114\066\115\010\116\072\117\065\001\002" +
    "\000\050\035\105\036\107\037\120\040\110\041\114\062" +
    "\124\065\106\066\122\067\115\070\117\071\126\072\104" +
    "\076\125\077\121\100\116\103\111\105\112\111\123\112" +
    "\u0111\001\002\000\124\005\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\056\uffd4\060\uffd4\061\uffd4\063\uffd4\102\uffd4\107\uffd4\110" +
    "\uffd4\114\uffd4\115\uffd4\116\uffd4\117\uffd4\001\002\000\044" +
    "\022\071\024\076\042\061\043\073\044\064\045\063\047" +
    "\067\051\060\052\057\053\074\054\056\102\075\107\062" +
    "\114\066\115\010\116\072\117\065\001\002\000\050\035" +
    "\105\036\107\037\120\040\110\041\114\062\124\065\106" +
    "\066\122\067\115\070\117\071\126\072\104\076\125\077" +
    "\121\100\116\103\111\105\112\110\u0114\111\123\001\002" +
    "\000\004\112\u0115\001\002\000\124\005\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\056\uffcc\060\uffcc\061\uffcc\063\uffcc\102\uffcc" +
    "\107\uffcc\110\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc\001" +
    "\002\000\044\022\071\024\076\042\061\043\073\044\064" +
    "\045\063\047\067\051\060\052\057\053\074\054\056\102" +
    "\075\107\062\114\066\115\010\116\072\117\065\001\002" +
    "\000\004\112\u0123\001\002\000\044\022\071\024\076\042" +
    "\061\043\073\044\064\045\063\047\067\051\060\052\057" +
    "\053\074\054\056\102\075\107\062\114\066\115\010\116" +
    "\072\117\065\001\002\000\004\112\u0120\001\002\000\044" +
    "\022\071\024\076\042\061\043\073\044\064\045\063\047" +
    "\067\051\060\052\057\053\074\054\056\102\075\107\062" +
    "\114\066\115\010\116\072\117\065\001\002\000\050\035" +
    "\105\036\107\037\120\040\110\041\114\062\124\065\106" +
    "\066\122\067\115\070\117\071\126\072\104\076\125\077" +
    "\121\100\116\103\111\104\u011c\105\112\111\123\001\002" +
    "\000\004\101\u011d\001\002\000\044\022\071\024\076\042" +
    "\061\043\073\044\064\045\063\047\067\051\060\052\057" +
    "\053\074\054\056\102\075\107\062\114\066\115\010\116" +
    "\072\117\065\001\002\000\050\035\105\036\107\037\120" +
    "\040\110\041\114\062\124\065\106\066\122\067\115\070" +
    "\117\071\126\072\104\076\125\077\121\100\116\103\111" +
    "\105\112\111\123\112\u011f\001\002\000\124\005\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\056\uffcf\060\uffcf\061\uffcf\063\uffcf" +
    "\102\uffcf\107\uffcf\110\uffcf\114\uffcf\115\uffcf\116\uffcf\117" +
    "\uffcf\001\002\000\124\005\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\056\uffc8\060\uffc8\061\uffc8\063\uffc8\102\uffc8\107\uffc8\110" +
    "\uffc8\114\uffc8\115\uffc8\116\uffc8\117\uffc8\001\002\000\050" +
    "\035\105\036\107\037\120\040\110\041\114\062\124\065" +
    "\106\066\122\067\115\070\117\071\126\072\104\076\125" +
    "\077\121\100\116\103\111\105\112\111\123\112\u0122\001" +
    "\002\000\124\005\uffd1\010\uffd1\011\uffd1\012\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\056\uffd1" +
    "\060\uffd1\061\uffd1\063\uffd1\102\uffd1\107\uffd1\110\uffd1\114" +
    "\uffd1\115\uffd1\116\uffd1\117\uffd1\001\002\000\124\005\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\056\uffc7\060\uffc7\061\uffc7\063" +
    "\uffc7\102\uffc7\107\uffc7\110\uffc7\114\uffc7\115\uffc7\116\uffc7" +
    "\117\uffc7\001\002\000\050\035\105\036\107\037\120\040" +
    "\110\041\114\062\124\065\106\066\122\067\115\070\117" +
    "\071\126\072\104\076\125\077\121\100\116\103\111\105" +
    "\112\106\u0125\111\123\001\002\000\004\101\u0126\001\002" +
    "\000\044\022\071\024\076\042\061\043\073\044\064\045" +
    "\063\047\067\051\060\052\057\053\074\054\056\102\075" +
    "\107\062\114\066\115\010\116\072\117\065\001\002\000" +
    "\050\035\105\036\107\037\120\040\110\041\114\062\124" +
    "\065\106\066\122\067\115\070\117\071\126\072\104\076" +
    "\125\077\121\100\116\103\111\105\112\111\123\112\u0128" +
    "\001\002\000\124\005\uffd0\010\uffd0\011\uffd0\012\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056" +
    "\uffd0\060\uffd0\061\uffd0\063\uffd0\102\uffd0\107\uffd0\110\uffd0" +
    "\114\uffd0\115\uffd0\116\uffd0\117\uffd0\001\002\000\004\005" +
    "\ufffa\001\002\000\124\005\uffca\010\uffca\011\uffca\012\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\056\uffca\060\uffca\061\uffca\063\uffca\102\uffca\107\uffca\110" +
    "\uffca\114\uffca\115\uffca\116\uffca\117\uffca\001\002\000\044" +
    "\022\071\024\076\042\061\043\073\044\064\045\063\047" +
    "\067\051\060\052\057\053\074\054\056\102\075\107\062" +
    "\114\066\115\010\116\072\117\065\001\002\000\050\035" +
    "\105\036\107\037\120\040\110\041\114\062\124\065\106" +
    "\066\122\067\115\070\117\071\126\072\104\076\125\077" +
    "\121\100\116\103\111\105\112\110\u012d\111\123\001\002" +
    "\000\004\112\u012e\001\002\000\124\005\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\056\uffcb\060\uffcb\061\uffcb\063\uffcb\102\uffcb" +
    "\107\uffcb\110\uffcb\114\uffcb\115\uffcb\116\uffcb\117\uffcb\001" +
    "\002\000\004\112\u0130\001\002\000\022\002\ufffe\004\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\013\ufffe\015\ufffe\057\ufffe\001" +
    "\002\000\060\005\ufff9\010\035\011\026\012\043\016\050" +
    "\017\024\020\042\021\040\022\044\023\041\025\033\027" +
    "\037\031\027\032\047\033\036\034\031\046\025\050\020" +
    "\056\046\060\045\061\021\063\032\115\010\001\002\000" +
    "\004\005\u0133\001\002\000\014\002\ufff6\010\ufff6\011\ufff6" +
    "\013\ufff6\015\ufff6\001\002\000\014\002\ufffb\010\266\011" +
    "\267\013\264\015\263\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\004\002\004\001\001\000\004\020\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u012e\001\001\000\006\007\264\010\261\001" +
    "\001\000\016\005\033\012\051\014\027\015\021\020\022" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u0128\012\051\014\027\015\021\020\022\024\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\u010c\020\076\001\001\000\006\016\u0109" +
    "\020\054\001\001\000\004\020\u0105\001\001\000\006\016" +
    "\u0103\020\054\001\001\000\012\012\051\014\027\020\022" +
    "\024\u0102\001\001\000\006\016\375\020\054\001\001\000" +
    "\002\001\001\000\006\014\252\020\076\001\001\000\014" +
    "\012\051\014\027\015\246\020\022\024\050\001\001\000" +
    "\016\005\226\012\051\014\027\015\021\020\022\024\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\221\020\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\051\014\027\015\053\020\022\024\050\001\001\000" +
    "\006\016\067\020\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\205\020\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\165\020\054\001\001\000\006\014\077\020\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\102\020\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\160\020\054\001\001\000\006\016\157\020" +
    "\054\001\001\000\006\016\156\020\054\001\001\000\006" +
    "\016\155\020\054\001\001\000\006\016\154\020\054\001" +
    "\001\000\006\016\152\020\054\001\001\000\006\016\150" +
    "\020\054\001\001\000\002\001\001\000\006\016\147\020" +
    "\054\001\001\000\006\016\146\020\054\001\001\000\006" +
    "\016\145\020\054\001\001\000\006\016\144\020\054\001" +
    "\001\000\006\016\143\020\054\001\001\000\006\016\142" +
    "\020\054\001\001\000\006\016\141\020\054\001\001\000" +
    "\004\020\131\001\001\000\004\020\130\001\001\000\006" +
    "\016\127\020\054\001\001\000\006\016\126\020\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\134\017" +
    "\135\020\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\134\017\140\020\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\161\001\001\000\006\016\162\020\054\001" +
    "\001\000\002\001\001\000\006\016\164\020\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\167\020" +
    "\076\001\001\000\002\001\001\000\006\014\172\020\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\051\014\027\015\175\020\022\024\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\051\014\027\015\200\020\022\024\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\134\017\203\020" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\210\020\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\215\020\076\001\001\000" +
    "\002\001\001\000\006\014\217\020\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\222\001\001\000" +
    "\002\001\001\000\006\016\224\020\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\230\001\001\000\002\001\001\000\006\016\232\020\054" +
    "\001\001\000\002\001\001\000\014\012\051\014\027\015" +
    "\234\020\022\024\050\001\001\000\004\022\235\001\001" +
    "\000\004\023\240\001\001\000\006\016\243\020\054\001" +
    "\001\000\014\012\051\014\027\015\242\020\022\024\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\051\014\027\015\245" +
    "\020\022\024\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\250\020\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\253\001\001\000\002\001" +
    "\001\000\006\016\255\020\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\260\001\001\000\006\007" +
    "\264\010\261\001\001\000\002\001\001\000\006\014\365" +
    "\020\076\001\001\000\004\020\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\310" +
    "\020\076\001\001\000\004\020\271\001\001\000\002\001" +
    "\001\000\004\020\303\001\001\000\004\011\274\001\001" +
    "\000\012\006\277\012\275\014\276\020\076\001\001\000" +
    "\002\001\001\000\004\020\301\001\001\000\006\007\264" +
    "\010\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\305\001\001" +
    "\000\012\006\306\012\275\014\276\020\076\001\001\000" +
    "\006\007\264\010\261\001\001\000\002\001\001\000\004" +
    "\020\311\001\001\000\002\001\001\000\012\013\313\014" +
    "\314\020\076\021\315\001\001\000\002\001\001\000\004" +
    "\020\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\314\020\076\021\324\001\001\000\002\001\001" +
    "\000\016\005\322\012\051\014\027\015\021\020\022\024" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\342\020\076\001\001\000\004\020" +
    "\327\001\001\000\002\001\001\000\004\020\335\001\001" +
    "\000\004\011\332\001\001\000\012\006\333\012\275\014" +
    "\276\020\076\001\001\000\006\007\264\010\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\337\001" +
    "\001\000\012\006\340\012\275\014\276\020\076\001\001" +
    "\000\006\007\264\010\261\001\001\000\002\001\001\000" +
    "\004\020\343\001\001\000\002\001\001\000\012\013\345" +
    "\014\314\020\076\021\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\350\012\051\014\027\015\021" +
    "\020\022\024\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\360\001\001\000\004" +
    "\011\355\001\001\000\012\006\356\012\275\014\276\020" +
    "\076\001\001\000\006\007\264\010\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\362\001\001\000" +
    "\012\006\363\012\275\014\276\020\076\001\001\000\006" +
    "\007\264\010\261\001\001\000\002\001\001\000\004\020" +
    "\366\001\001\000\002\001\001\000\012\013\370\014\314" +
    "\020\076\021\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\373\012\051\014\027\015\021\020\022" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\051\014\027\015\377\020\022" +
    "\024\050\001\001\000\004\022\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0107\020" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\051\014\027\015\u010b\020\022\024" +
    "\050\001\001\000\002\001\001\000\004\020\u010d\001\001" +
    "\000\002\001\001\000\006\016\u010f\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\u0112\020\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u0123\020\054\001\001\000\002\001\001" +
    "\000\006\016\u0120\020\054\001\001\000\002\001\001\000" +
    "\006\016\u011a\020\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u011d\020\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\u0126\020\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u012b\020\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\u0131\012\051\014\027\015\021" +
    "\020\022\024\050\001\001\000\002\001\001\000\004\006" +
    "\u0133\001\001\000\006\007\264\010\261\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // paramlist ::= expression 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParamList p  = new ParamList(); p.add(e); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramlist ::= expression COMMA paramlist 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= ARRAY type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= GETSTRING 
            {
              Expression RESULT =null;
		 RESULT = new GetString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= GETBOOLEAN 
            {
              Expression RESULT =null;
		 RESULT = new GetBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= GETFLOAT 
            {
              Expression RESULT =null;
		 RESULT = new GetFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= GETINT 
            {
              Expression RESULT =null;
		 RESULT = new GetInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= CREATE identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjectCreate(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= identifier 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= NIL 
            {
              Expression RESULT =null;
		 RESULT = new Nil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression DOT identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall(e, i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression POINTER identifier 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression MOD expression NT$1 expression GTHANE expression 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$1 ::= 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = new Modulo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else ::= ELSE statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ratherlist ::= ratherlist RATHER expression COLON statement 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_statement ::= identifier DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_statement ::= identifier INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_statement ::= PUBLIC type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_statement ::= PROTECTED type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_statement ::= PRIVATE type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_statement ::= type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_statement ::= DO statement WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_statement ::= FOR LPAREN statement expression SEMICOLON statement RPAREN COLON statement 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s3 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(e, s1, s2, s3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_statement ::= WHILE expression COLON statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement l = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_statement ::= IF expression COLON statement ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_statement ::= BEGIN statementlist END NT$0 IF expression COLON statement ratherlist else END 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$0 ::= 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = new Block(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arglist ::= parameter 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArgList l = new ArgList(); l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arglist ::= arglist COMMA parameter 
            {
              ArgList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vardeclist ::= vardeclist vardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // methoddef ::= SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // methoddef ::= PRIVATE SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methoddef ::= PUBLIC SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= CLASS identifier COLON vardeclist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classdef ::= PRIVATE CLASS identifier COLON vardeclist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON vardeclist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON vardeclist deflist END 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classdef ::= PUBLIC CLASS identifier COLON vardeclist deflist END 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i); ); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

