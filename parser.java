
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 14 13:19:57 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 14 13:19:57 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\006\000\002\002\004\000\002\002" +
    "\007\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\010\000" +
    "\002\005\012\000\002\006\013\000\002\007\004\000\002" +
    "\007\002\000\002\010\005\000\002\011\005\000\002\011" +
    "\003\000\002\017\004\000\002\012\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\010\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\004\000\002\023\002\000\002\022" +
    "\015\000\002\022\010\000\002\022\006\000\002\022\007" +
    "\000\002\022\006\000\002\022\011\000\002\022\011\000" +
    "\002\022\003\000\002\022\005\000\002\022\007\000\002" +
    "\022\007\000\002\022\004\000\002\022\004\000\002\020" +
    "\007\000\002\020\002\000\002\021\004\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\024" +
    "\002\000\002\014\011\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\006\000\002\014\006\000" +
    "\002\014\005\000\002\014\010\000\002\014\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\014\004" +
    "\000\002\014\003\000\002\014\007\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\007\000\002\014\010\000\002\014" +
    "\003\000\002\015\005\000\002\015\003\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\004\006\052\005\001\002\000\004\002" +
    "\326\001\002\000\004\004\322\001\002\000\046\005\ufffd" +
    "\013\033\014\013\015\027\016\025\017\030\020\026\022" +
    "\023\024\024\026\016\027\017\041\014\043\007\051\032" +
    "\053\031\054\010\056\021\106\020\001\002\000\004\100" +
    "\316\001\002\000\004\103\315\001\002\000\050\005\ufffd" +
    "\012\ufffd\013\033\014\013\015\027\016\025\017\030\020" +
    "\026\022\023\024\024\026\016\027\017\041\014\043\007" +
    "\051\032\053\031\054\010\056\021\106\020\001\002\000" +
    "\012\072\276\074\277\076\275\106\uffea\001\002\000\012" +
    "\057\uffef\074\uffef\077\uffef\106\uffef\001\002\000\004\100" +
    "\271\001\002\000\006\074\154\106\020\001\002\000\044" +
    "\017\053\021\060\035\043\036\055\037\046\040\045\042" +
    "\051\044\042\045\041\046\056\047\040\073\057\100\044" +
    "\105\050\106\020\107\054\110\047\001\002\000\044\017" +
    "\053\021\060\035\043\036\055\037\046\040\045\042\051" +
    "\044\042\045\041\046\056\047\040\073\057\100\044\105" +
    "\050\106\020\107\054\110\047\001\002\000\132\010\uffae" +
    "\017\uffae\021\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\042\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\055\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae" +
    "\105\uffae\106\uffae\107\uffae\110\uffae\001\002\000\042\013" +
    "\033\014\013\015\027\016\025\017\030\020\026\022\023" +
    "\024\024\026\016\027\017\041\014\043\007\051\032\053" +
    "\031\054\010\106\020\001\002\000\004\005\222\001\002" +
    "\000\044\017\053\021\060\035\043\036\055\037\046\040" +
    "\045\042\051\044\042\045\041\046\056\047\040\073\057" +
    "\100\044\105\050\106\020\107\054\110\047\001\002\000" +
    "\046\005\ufffd\013\033\014\013\015\027\016\025\017\030" +
    "\020\026\022\023\024\024\026\016\027\017\041\014\043" +
    "\007\051\032\053\031\054\010\056\021\106\020\001\002" +
    "\000\012\057\uffed\074\uffed\077\uffed\106\uffed\001\002\000" +
    "\012\057\uffec\074\uffec\077\uffec\106\uffec\001\002\000\012" +
    "\057\uffee\074\uffee\077\uffee\106\uffee\001\002\000\004\076" +
    "\170\001\002\000\004\103\167\001\002\000\004\100\036" +
    "\001\002\000\012\057\uffe9\074\uffe9\077\uffe9\106\uffe9\001" +
    "\002\000\054\005\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\041\uffde\043\uffde\051\uffde\053\uffde" +
    "\054\uffde\056\uffde\106\uffde\001\002\000\054\005\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\041" +
    "\uffe8\043\uffe8\051\uffe8\053\uffe8\054\uffe8\056\uffe8\106\uffe8" +
    "\001\002\000\044\017\053\021\060\035\043\036\055\037" +
    "\046\040\045\042\051\044\042\045\041\046\056\047\040" +
    "\073\057\100\044\105\050\106\020\107\054\110\047\001" +
    "\002\000\126\017\uffba\021\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\042" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\055\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\073\uffba\074\uffba\075\uffba" +
    "\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104" +
    "\uffba\105\uffba\106\uffba\107\uffba\110\uffba\001\002\000\126" +
    "\017\uffb4\021\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\055\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4" +
    "\106\uffb4\107\uffb4\110\uffb4\001\002\000\126\017\uffb6\021" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\042\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6" +
    "\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107" +
    "\uffb6\110\uffb6\001\002\000\126\017\uffb7\021\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\055\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\001\002\000\126\017\uffbf\021\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\042\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\055\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\070\uffbf\071\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf" +
    "\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\001\002\000" +
    "\044\017\053\021\060\035\043\036\055\037\046\040\045" +
    "\042\051\044\042\045\041\046\056\047\040\073\057\100" +
    "\044\105\050\106\020\107\054\110\047\001\002\000\126" +
    "\017\uffbd\021\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\055\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd" +
    "\070\uffbd\071\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\107\uffbd\110\uffbd\001\002\000\126\017\uffb8\021" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\042\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107" +
    "\uffb8\110\uffb8\001\002\000\126\017\uffc0\021\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\055\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0" +
    "\001\002\000\126\017\uffb1\021\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\042\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\055\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\071\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\001\002\000" +
    "\004\106\020\001\002\000\050\030\067\031\071\032\102" +
    "\033\072\034\076\055\106\060\070\061\104\062\077\063" +
    "\101\064\110\065\066\067\107\070\103\071\100\074\073" +
    "\076\074\101\157\102\105\001\002\000\004\076\151\001" +
    "\002\000\126\017\uffc1\021\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\055\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\070\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104" +
    "\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\001\002\000\126" +
    "\017\uffbe\021\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\055\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe" +
    "\106\uffbe\107\uffbe\110\uffbe\001\002\000\126\017\uffb5\021" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\042\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\055\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5" +
    "\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107" +
    "\uffb5\110\uffb5\001\002\000\044\017\053\021\060\035\043" +
    "\036\055\037\046\040\045\042\051\044\042\045\041\046" +
    "\056\047\040\073\057\100\044\105\050\106\020\107\054" +
    "\110\047\001\002\000\020\013\033\014\013\015\027\016" +
    "\025\017\030\020\026\106\020\001\002\000\012\057\uffea" +
    "\074\uffea\077\uffea\106\uffea\001\002\000\004\074\063\001" +
    "\002\000\046\017\053\021\060\035\043\036\055\037\046" +
    "\040\045\042\051\044\042\045\041\046\056\047\040\073" +
    "\057\075\064\100\044\105\050\106\020\107\054\110\047" +
    "\001\002\000\012\057\ufff0\074\ufff0\077\ufff0\106\ufff0\001" +
    "\002\000\050\030\067\031\071\032\102\033\072\034\076" +
    "\055\106\060\070\061\104\062\077\063\101\064\110\065" +
    "\066\067\107\070\103\071\100\074\073\075\075\076\074" +
    "\102\105\001\002\000\044\017\053\021\060\035\043\036" +
    "\055\037\046\040\045\042\051\044\042\045\041\046\056" +
    "\047\040\073\057\100\044\105\050\106\020\107\054\110" +
    "\047\001\002\000\044\017\053\021\060\035\043\036\055" +
    "\037\046\040\045\042\051\044\042\045\041\046\056\047" +
    "\040\073\057\100\044\105\050\106\020\107\054\110\047" +
    "\001\002\000\044\017\053\021\060\035\043\036\055\037" +
    "\046\040\045\042\051\044\042\045\041\046\056\047\040" +
    "\073\057\100\044\105\050\106\020\107\054\110\047\001" +
    "\002\000\044\017\053\021\060\035\043\036\055\037\046" +
    "\040\045\042\051\044\042\045\041\046\056\047\040\073" +
    "\057\100\044\105\050\106\020\107\054\110\047\001\002" +
    "\000\044\017\053\021\060\035\043\036\055\037\046\040" +
    "\045\042\051\044\042\045\041\046\056\047\040\073\057" +
    "\100\044\105\050\106\020\107\054\110\047\001\002\000" +
    "\044\017\053\021\060\035\043\036\055\037\046\040\045" +
    "\042\051\044\042\045\041\046\056\047\040\073\057\100" +
    "\044\105\050\106\020\107\054\110\047\001\002\000\044" +
    "\017\053\021\060\035\043\036\055\037\046\040\045\042" +
    "\051\044\042\045\041\046\056\047\040\073\057\100\044" +
    "\105\050\106\020\107\054\110\047\001\002\000\126\017" +
    "\uffb3\021\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\042\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\055\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\071\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\001\002\000\044\017\053\021\060" +
    "\035\043\036\055\037\046\040\045\042\051\044\042\045" +
    "\041\046\056\047\040\073\057\100\044\105\050\106\020" +
    "\107\054\110\047\001\002\000\044\017\053\021\060\035" +
    "\043\036\055\037\046\040\045\042\051\044\042\045\041" +
    "\046\056\047\040\073\057\100\044\105\050\106\020\107" +
    "\054\110\047\001\002\000\044\017\053\021\060\035\043" +
    "\036\055\037\046\040\045\042\051\044\042\045\041\046" +
    "\056\047\040\073\057\100\044\105\050\106\020\107\054" +
    "\110\047\001\002\000\044\017\053\021\060\035\043\036" +
    "\055\037\046\040\045\042\051\044\042\045\041\046\056" +
    "\047\040\073\057\100\044\105\050\106\020\107\054\110" +
    "\047\001\002\000\044\017\053\021\060\035\043\036\055" +
    "\037\046\040\045\042\051\044\042\045\041\046\056\047" +
    "\040\073\057\100\044\105\050\106\020\107\054\110\047" +
    "\001\002\000\044\017\053\021\060\035\043\036\055\037" +
    "\046\040\045\042\051\044\042\045\041\046\056\047\040" +
    "\073\057\100\044\105\050\106\020\107\054\110\047\001" +
    "\002\000\044\017\053\021\060\035\043\036\055\037\046" +
    "\040\045\042\051\044\042\045\041\046\056\047\040\073" +
    "\057\100\044\105\050\106\020\107\054\110\047\001\002" +
    "\000\006\050\115\106\020\001\002\000\004\106\020\001" +
    "\002\000\044\017\053\021\060\035\043\036\055\037\046" +
    "\040\045\042\051\044\042\045\041\046\056\047\040\073" +
    "\057\100\044\105\050\106\020\107\054\110\047\001\002" +
    "\000\044\017\053\021\060\035\043\036\055\037\046\040" +
    "\045\042\051\044\042\045\041\046\056\047\040\073\057" +
    "\100\044\105\050\106\020\107\054\110\047\001\002\000" +
    "\126\017\uffcd\021\uffcd\030\067\031\071\032\102\033\072" +
    "\034\076\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\055\uffcd\057\uffcd\060\070" +
    "\061\104\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
    "\107\070\103\071\100\073\uffcd\074\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105" +
    "\uffcd\106\uffcd\107\uffcd\110\uffcd\001\002\000\126\017\uffc9" +
    "\021\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\076\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9" +
    "\107\uffc9\110\uffc9\001\002\000\126\017\uffc4\021\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110" +
    "\uffc4\001\002\000\004\100\116\001\002\000\126\017\uffc2" +
    "\021\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2" +
    "\071\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\107\uffc2\110\uffc2\001\002\000\044\017\053\021\060\035" +
    "\043\036\055\037\046\040\045\042\051\044\042\045\041" +
    "\046\056\047\040\073\057\100\044\105\050\106\020\107" +
    "\054\110\047\001\002\000\052\030\067\031\071\032\102" +
    "\033\072\034\076\055\106\057\122\060\070\061\104\062" +
    "\077\063\101\064\110\065\066\067\107\070\103\071\100" +
    "\074\073\076\074\101\uffaf\102\105\001\002\000\004\101" +
    "\121\001\002\000\126\017\uffc3\021\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\055\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\001\002" +
    "\000\044\017\053\021\060\035\043\036\055\037\046\040" +
    "\045\042\051\044\042\045\041\046\056\047\040\073\057" +
    "\100\044\105\050\106\020\107\054\110\047\001\002\000" +
    "\004\101\uffb0\001\002\000\126\017\uffcf\021\uffcf\030\067" +
    "\031\071\032\102\033\072\034\076\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\055\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\067\107\070\103\071\100\073\uffcf" +
    "\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf" +
    "\001\002\000\126\017\uffc7\021\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\076\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\042\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\055\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000" +
    "\126\017\uffd3\021\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\076\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\055\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\107\070\103\071\100\073\uffd3\074\uffd3\075\uffd3\076\uffd3" +
    "\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105" +
    "\uffd3\106\uffd3\107\uffd3\110\uffd3\001\002\000\126\017\uffcc" +
    "\021\uffcc\030\067\031\071\032\102\033\072\034\076\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\055\uffcc\057\uffcc\060\070\061\104\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\107\070\103" +
    "\071\100\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100" +
    "\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc" +
    "\107\uffcc\110\uffcc\001\002\000\126\017\uffc8\021\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\076\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110" +
    "\uffc8\001\002\000\126\017\uffce\021\uffce\030\067\031\071" +
    "\032\102\033\072\034\076\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\042\uffce\044\uffce\045\uffce\046\uffce\047\uffce\055\uffce" +
    "\057\uffce\060\070\061\104\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\107\070\103\071\100\073\uffce\074\uffce" +
    "\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103" +
    "\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\001\002" +
    "\000\126\017\uffd1\021\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\055\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\106\uffd1\107\uffd1\110\uffd1\001\002\000\050\030" +
    "\067\031\071\032\102\033\072\034\076\055\106\060\070" +
    "\061\104\062\077\063\101\064\110\065\066\067\107\070" +
    "\103\071\100\074\073\076\074\077\134\102\105\001\002" +
    "\000\126\017\uffc5\021\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\055\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\067\uffc5\070\uffc5\071\uffc5\073\uffc5\074\uffc5\075\uffc5\076" +
    "\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5" +
    "\105\uffc5\106\uffc5\107\uffc5\110\uffc5\001\002\000\050\030" +
    "\067\031\071\032\102\033\072\034\076\055\106\060\070" +
    "\061\104\062\077\063\101\064\110\065\066\067\107\070" +
    "\103\071\100\074\073\075\136\076\074\102\105\001\002" +
    "\000\126\017\uffc6\021\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\055\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\073\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\105\uffc6\106\uffc6\107\uffc6\110\uffc6\001\002\000\126\017" +
    "\uffd2\021\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\076" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\055\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\107\070" +
    "\103\071\100\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106" +
    "\uffd2\107\uffd2\110\uffd2\001\002\000\126\017\uffd4\021\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\076\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\107\070\103\071\100" +
    "\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101" +
    "\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4" +
    "\110\uffd4\001\002\000\126\017\uffd0\021\uffd0\030\067\031" +
    "\071\032\102\033\072\034\076\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\055" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\107\070\103\071\100\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\001" +
    "\002\000\126\017\uffd5\021\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\076\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\055\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\107\070\103\071\100\073\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\001\002\000\110" +
    "\017\uffcb\021\uffcb\030\067\031\071\032\102\033\072\034" +
    "\076\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\055\106\060\070\061\104\062" +
    "\077\063\101\064\110\065\066\067\107\070\103\071\100" +
    "\073\uffcb\074\073\076\074\100\uffcb\102\105\105\uffcb\106" +
    "\uffcb\107\uffcb\110\uffcb\001\002\000\044\017\053\021\060" +
    "\035\043\036\055\037\046\040\045\042\051\044\042\045" +
    "\041\046\056\047\040\073\057\100\044\105\050\106\020" +
    "\107\054\110\047\001\002\000\050\030\067\031\071\032" +
    "\102\033\072\034\076\055\106\060\070\061\104\062\077" +
    "\063\101\064\110\065\066\066\146\067\107\070\103\071" +
    "\100\074\073\076\074\102\105\001\002\000\044\017\053" +
    "\021\060\035\043\036\055\037\046\040\045\042\051\044" +
    "\042\045\041\046\056\047\040\073\057\100\044\105\050" +
    "\106\020\107\054\110\047\001\002\000\126\017\uffca\021" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\076\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\042\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca" +
    "\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107" +
    "\uffca\110\uffca\001\002\000\126\017\uffbb\021\uffbb\030\067" +
    "\031\071\032\102\033\072\034\076\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\055\106\057\uffbb\060\070\061\104\062\077\063\101\064" +
    "\110\065\066\066\uffbb\067\107\070\103\071\100\073\uffbb" +
    "\074\073\075\uffbb\076\074\077\uffbb\100\uffbb\101\uffbb\102" +
    "\105\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb" +
    "\001\002\000\020\013\033\014\013\015\027\016\025\017" +
    "\030\020\026\106\020\001\002\000\006\057\153\074\154" +
    "\001\002\000\020\013\033\014\013\015\027\016\025\017" +
    "\030\020\026\106\020\001\002\000\004\075\064\001\002" +
    "\000\006\074\154\077\156\001\002\000\126\017\uffb2\021" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\042\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\055\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107" +
    "\uffb2\110\uffb2\001\002\000\004\103\160\001\002\000\054" +
    "\005\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\041\uffe2\043\uffe2\051\uffe2\053\uffe2\054\uffe2\056" +
    "\uffe2\106\uffe2\001\002\000\004\100\162\001\002\000\044" +
    "\017\053\021\060\035\043\036\055\037\046\040\045\042" +
    "\051\044\042\045\041\046\056\047\040\073\057\100\044" +
    "\105\050\106\020\107\054\110\047\001\002\000\004\101" +
    "\164\001\002\000\126\017\uffb9\021\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\055\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\001\002" +
    "\000\050\030\067\031\071\032\102\033\072\034\076\055" +
    "\106\060\070\061\104\062\077\063\101\064\110\065\066" +
    "\067\107\070\103\071\100\074\073\076\074\101\166\102" +
    "\105\001\002\000\126\017\uffbc\021\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\055\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065" +
    "\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\073\uffbc\074\uffbc" +
    "\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\001\002" +
    "\000\054\005\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\041\uffd9\043\uffd9\051\uffd9\053\uffd9\054" +
    "\uffd9\056\uffd9\106\uffd9\001\002\000\020\013\033\014\013" +
    "\015\027\016\025\017\030\020\026\106\020\001\002\000" +
    "\006\057\172\074\154\001\002\000\020\013\033\014\013" +
    "\015\027\016\025\017\030\020\026\106\020\001\002\000" +
    "\006\074\154\077\174\001\002\000\012\057\uffeb\074\uffeb" +
    "\077\uffeb\106\uffeb\001\002\000\004\005\176\001\002\000" +
    "\004\022\uffe6\001\002\000\004\022\200\001\002\000\044" +
    "\017\053\021\060\035\043\036\055\037\046\040\045\042" +
    "\051\044\042\045\041\046\056\047\040\073\057\100\044" +
    "\105\050\106\020\107\054\110\047\001\002\000\050\030" +
    "\067\031\071\032\102\033\072\034\076\055\106\060\070" +
    "\061\104\062\077\063\101\064\110\065\066\067\107\070" +
    "\103\071\100\074\073\076\074\102\105\104\202\001\002" +
    "\000\044\013\033\014\013\015\027\016\025\017\030\020" +
    "\026\022\023\024\024\026\016\027\017\041\014\043\007" +
    "\051\032\053\031\054\010\056\021\106\020\001\002\000" +
    "\006\023\uffd7\025\uffd7\001\002\000\006\023\206\025\205" +
    "\001\002\000\044\017\053\021\060\035\043\036\055\037" +
    "\046\040\045\042\051\044\042\045\041\046\056\047\040" +
    "\073\057\100\044\105\050\106\020\107\054\110\047\001" +
    "\002\000\044\013\033\014\013\015\027\016\025\017\030" +
    "\020\026\022\023\024\024\026\016\027\017\041\014\043" +
    "\007\051\032\053\031\054\010\056\021\106\020\001\002" +
    "\000\004\005\210\001\002\000\054\005\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\041\uffe5\043" +
    "\uffe5\051\uffe5\053\uffe5\054\uffe5\056\uffe5\106\uffe5\001\002" +
    "\000\004\005\uffd6\001\002\000\050\030\067\031\071\032" +
    "\102\033\072\034\076\055\106\060\070\061\104\062\077" +
    "\063\101\064\110\065\066\067\107\070\103\071\100\074" +
    "\073\076\074\102\105\104\213\001\002\000\044\013\033" +
    "\014\013\015\027\016\025\017\030\020\026\022\023\024" +
    "\024\026\016\027\017\041\014\043\007\051\032\053\031" +
    "\054\010\056\021\106\020\001\002\000\010\005\uffd8\023" +
    "\uffd8\025\uffd8\001\002\000\050\030\067\031\071\032\102" +
    "\033\072\034\076\055\106\060\070\061\104\062\077\063" +
    "\101\064\110\065\066\067\107\070\103\071\100\074\073" +
    "\076\074\102\105\104\216\001\002\000\044\013\033\014" +
    "\013\015\027\016\025\017\030\020\026\022\023\024\024" +
    "\026\016\027\017\041\014\043\007\051\032\053\031\054" +
    "\010\056\021\106\020\001\002\000\006\005\uffd7\025\uffd7" +
    "\001\002\000\006\005\221\025\205\001\002\000\054\005" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\041\uffe4\043\uffe4\051\uffe4\053\uffe4\054\uffe4\056\uffe4" +
    "\106\uffe4\001\002\000\010\002\ufffa\006\ufffa\011\ufffa\001" +
    "\002\000\010\002\001\006\226\011\225\001\002\000\012" +
    "\002\ufffb\006\ufffb\007\ufffb\011\ufffb\001\002\000\020\013" +
    "\033\014\013\015\027\016\025\017\030\020\026\106\020" +
    "\001\002\000\004\106\020\001\002\000\012\002\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\001\002\000\006\010\231\104\232" +
    "\001\002\000\004\106\020\001\002\000\026\006\ufff5\007" +
    "\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\106\ufff5\001\002\000\026\006\ufffa\007\ufffa\011" +
    "\ufffa\013\033\014\013\015\027\016\025\017\030\020\026" +
    "\106\020\001\002\000\026\006\ufff6\007\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\106\ufff6" +
    "\001\002\000\010\006\226\007\236\011\225\001\002\000" +
    "\012\002\ufff9\006\ufff9\007\ufff9\011\ufff9\001\002\000\004" +
    "\104\240\001\002\000\026\006\ufff5\007\ufff5\011\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\106\ufff5" +
    "\001\002\000\026\006\ufffa\007\ufffa\011\ufffa\013\033\014" +
    "\013\015\027\016\025\017\030\020\026\106\020\001\002" +
    "\000\010\006\226\007\243\011\225\001\002\000\012\002" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\001\002\000\006\074\154" +
    "\106\020\001\002\000\004\101\246\001\002\000\020\013" +
    "\033\014\013\015\027\016\025\017\030\020\026\106\020" +
    "\001\002\000\006\057\253\100\254\001\002\000\006\074" +
    "\154\106\020\001\002\000\006\057\ufff2\100\ufff2\001\002" +
    "\000\006\057\ufff1\100\ufff1\001\002\000\020\013\033\014" +
    "\013\015\027\016\025\017\030\020\026\106\020\001\002" +
    "\000\004\104\255\001\002\000\046\012\ufffd\013\033\014" +
    "\013\015\027\016\025\017\030\020\026\022\023\024\024" +
    "\026\016\027\017\041\014\043\007\051\032\053\031\054" +
    "\010\056\021\106\020\001\002\000\004\012\257\001\002" +
    "\000\012\002\ufff7\006\ufff7\007\ufff7\011\ufff7\001\002\000" +
    "\006\057\ufff3\100\ufff3\001\002\000\054\005\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\041\uffe7" +
    "\043\uffe7\051\uffe7\053\uffe7\054\uffe7\056\uffe7\106\uffe7\001" +
    "\002\000\050\030\067\031\071\032\102\033\072\034\076" +
    "\055\106\060\070\061\104\062\077\063\101\064\110\065" +
    "\066\067\107\070\103\071\100\074\073\076\074\102\105" +
    "\103\263\001\002\000\054\005\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\041\uffdd\043\uffdd\051" +
    "\uffdd\053\uffdd\054\uffdd\056\uffdd\106\uffdd\001\002\000\050" +
    "\030\067\031\071\032\102\033\072\034\076\055\106\060" +
    "\070\061\104\062\077\063\101\064\110\065\066\067\107" +
    "\070\103\071\100\074\073\076\074\102\105\104\265\001" +
    "\002\000\044\013\033\014\013\015\027\016\025\017\030" +
    "\020\026\022\023\024\024\026\016\027\017\041\014\043" +
    "\007\051\032\053\031\054\010\056\021\106\020\001\002" +
    "\000\054\005\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\041\uffe3\043\uffe3\051\uffe3\053\uffe3\054" +
    "\uffe3\056\uffe3\106\uffe3\001\002\000\004\103\270\001\002" +
    "\000\062\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\041\ufff4\043" +
    "\ufff4\051\ufff4\053\ufff4\054\ufff4\056\ufff4\106\ufff4\001\002" +
    "\000\044\017\053\021\060\035\043\036\055\037\046\040" +
    "\045\042\051\044\042\045\041\046\056\047\040\073\057" +
    "\100\044\105\050\106\020\107\054\110\047\001\002\000" +
    "\050\030\067\031\071\032\102\033\072\034\076\055\106" +
    "\060\070\061\104\062\077\063\101\064\110\065\066\067" +
    "\107\070\103\071\100\074\073\076\074\101\273\102\105" +
    "\001\002\000\004\103\274\001\002\000\054\005\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\041" +
    "\uffdc\043\uffdc\051\uffdc\053\uffdc\054\uffdc\056\uffdc\106\uffdc" +
    "\001\002\000\044\017\053\021\060\035\043\036\055\037" +
    "\046\040\045\042\051\044\042\045\041\046\056\047\040" +
    "\073\057\100\044\105\050\106\020\107\054\110\047\001" +
    "\002\000\044\017\053\021\060\035\043\036\055\037\046" +
    "\040\045\042\051\044\042\045\041\046\056\047\040\073" +
    "\057\100\044\105\050\106\020\107\054\110\047\001\002" +
    "\000\044\017\053\021\060\035\043\036\055\037\046\040" +
    "\045\042\051\044\042\045\041\046\056\047\040\073\057" +
    "\100\044\105\050\106\020\107\054\110\047\001\002\000" +
    "\050\030\067\031\071\032\102\033\072\034\076\055\106" +
    "\060\070\061\104\062\077\063\101\064\110\065\066\067" +
    "\107\070\103\071\100\074\073\075\301\076\074\102\105" +
    "\001\002\000\004\072\302\001\002\000\044\017\053\021" +
    "\060\035\043\036\055\037\046\040\045\042\051\044\042" +
    "\045\041\046\056\047\040\073\057\100\044\105\050\106" +
    "\020\107\054\110\047\001\002\000\050\030\067\031\071" +
    "\032\102\033\072\034\076\055\106\060\070\061\104\062" +
    "\077\063\101\064\110\065\066\067\107\070\103\071\100" +
    "\074\073\076\074\102\105\103\304\001\002\000\054\005" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\041\uffdf\043\uffdf\051\uffdf\053\uffdf\054\uffdf\056\uffdf" +
    "\106\uffdf\001\002\000\050\030\067\031\071\032\102\033" +
    "\072\034\076\055\106\060\070\061\104\062\077\063\101" +
    "\064\110\065\066\067\107\070\103\071\100\074\073\076" +
    "\074\102\105\103\306\001\002\000\054\005\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\041\uffe1" +
    "\043\uffe1\051\uffe1\053\uffe1\054\uffe1\056\uffe1\106\uffe1\001" +
    "\002\000\050\030\067\031\071\032\102\033\072\034\076" +
    "\055\106\060\070\061\104\062\077\063\101\064\110\065" +
    "\066\067\107\070\103\071\100\074\073\076\074\077\310" +
    "\102\105\001\002\000\004\072\311\001\002\000\044\017" +
    "\053\021\060\035\043\036\055\037\046\040\045\042\051" +
    "\044\042\045\041\046\056\047\040\073\057\100\044\105" +
    "\050\106\020\107\054\110\047\001\002\000\050\030\067" +
    "\031\071\032\102\033\072\034\076\055\106\060\070\061" +
    "\104\062\077\063\101\064\110\065\066\067\107\070\103" +
    "\071\100\074\073\076\074\102\105\103\313\001\002\000" +
    "\054\005\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\041\uffe0\043\uffe0\051\uffe0\053\uffe0\054\uffe0" +
    "\056\uffe0\106\uffe0\001\002\000\006\005\ufffe\012\ufffe\001" +
    "\002\000\054\005\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\041\uffda\043\uffda\051\uffda\053\uffda" +
    "\054\uffda\056\uffda\106\uffda\001\002\000\044\017\053\021" +
    "\060\035\043\036\055\037\046\040\045\042\051\044\042" +
    "\045\041\046\056\047\040\073\057\100\044\105\050\106" +
    "\020\107\054\110\047\001\002\000\050\030\067\031\071" +
    "\032\102\033\072\034\076\055\106\060\070\061\104\062" +
    "\077\063\101\064\110\065\066\067\107\070\103\071\100" +
    "\074\073\076\074\101\320\102\105\001\002\000\004\103" +
    "\321\001\002\000\054\005\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\041\uffdb\043\uffdb\051\uffdb" +
    "\053\uffdb\054\uffdb\056\uffdb\106\uffdb\001\002\000\046\005" +
    "\ufffd\013\033\014\013\015\027\016\025\017\030\020\026" +
    "\022\023\024\024\026\016\027\017\041\014\043\007\051" +
    "\032\053\031\054\010\056\021\106\020\001\002\000\004" +
    "\005\324\001\002\000\010\002\ufffa\006\ufffa\011\ufffa\001" +
    "\002\000\010\002\uffff\006\226\011\225\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\021\010\033\012\014\013\010" +
    "\016\011\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\313\010\033\012\014\013\010\016\011" +
    "\022\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\266\001\001\000\006\014\263" +
    "\016\036\001\001\000\006\014\261\016\036\001\001\000" +
    "\002\001\001\000\012\010\033\012\014\016\011\022\260" +
    "\001\001\000\002\001\001\000\006\014\214\016\036\001" +
    "\001\000\016\003\174\010\033\012\014\013\010\016\011" +
    "\022\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\051\016\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\164\016\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\147\016\036\001\001\000\006\012\061" +
    "\016\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\064\016\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\142\016\036\001\001\000\006\014" +
    "\141\016\036\001\001\000\006\014\140\016\036\001\001" +
    "\000\006\014\137\016\036\001\001\000\006\014\136\016" +
    "\036\001\001\000\006\014\134\016\036\001\001\000\006" +
    "\014\132\016\036\001\001\000\002\001\001\000\006\014" +
    "\131\016\036\001\001\000\006\014\130\016\036\001\001" +
    "\000\006\014\127\016\036\001\001\000\006\014\126\016" +
    "\036\001\001\000\006\014\125\016\036\001\001\000\006" +
    "\014\124\016\036\001\001\000\006\014\123\016\036\001" +
    "\001\000\004\016\113\001\001\000\004\016\112\001\001" +
    "\000\006\014\111\016\036\001\001\000\006\014\110\016" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\116\015\117\016\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\116\015\122\016" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\143\001\001\000\006\014\144\016" +
    "\036\001\001\000\002\001\001\000\006\014\146\016\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\151\016\060\001\001\000\002\001\001\000\006\012\154" +
    "\016\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\116\015\162\016\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\170\016\060\001" +
    "\001\000\002\001\001\000\006\012\172\016\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\176\001\001\000\002\001\001\000\006\014\200" +
    "\016\036\001\001\000\002\001\001\000\014\010\033\012" +
    "\014\013\202\016\011\022\034\001\001\000\004\020\203" +
    "\001\001\000\004\021\206\001\001\000\006\014\211\016" +
    "\036\001\001\000\014\010\033\012\014\013\210\016\011" +
    "\022\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\033\012\014" +
    "\013\213\016\011\022\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\033\012\014\013\216\016\011" +
    "\022\034\001\001\000\004\020\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\222\001\001\000\006" +
    "\005\226\006\223\001\001\000\002\001\001\000\006\012" +
    "\243\016\060\001\001\000\004\016\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\236\001\001\000" +
    "\004\007\232\001\001\000\012\004\234\010\233\012\014" +
    "\016\060\001\001\000\002\001\001\000\006\005\226\006" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\240\001\001\000\012\004\241\010\233\012\014\016" +
    "\060\001\001\000\006\005\226\006\223\001\001\000\002" +
    "\001\001\000\004\016\244\001\001\000\002\001\001\000" +
    "\012\011\246\012\247\016\060\017\250\001\001\000\002" +
    "\001\001\000\004\016\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\247\016\060\017\257\001\001" +
    "\000\002\001\001\000\016\003\255\010\033\012\014\013" +
    "\010\016\011\022\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\033" +
    "\012\014\013\265\016\011\022\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\271" +
    "\016\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\306\016\036\001\001\000\006" +
    "\014\304\016\036\001\001\000\006\014\277\016\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\302" +
    "\016\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\311\016\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\316\016\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\322\010\033" +
    "\012\014\013\010\016\011\022\034\001\001\000\002\001" +
    "\001\000\004\004\324\001\001\000\006\005\226\006\223" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramlist ::= expression 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParamList p  = new ParamList(); p.add(e); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramlist ::= expression COMMA paramlist 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= ARRAY type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= GETSTRING 
            {
              Expression RESULT =null;
		 RESULT = new GetString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= GETBOOLEAN 
            {
              Expression RESULT =null;
		 RESULT = new GetBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= GETFLOAT 
            {
              Expression RESULT =null;
		 RESULT = new GetFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= GETINT 
            {
              Expression RESULT =null;
		 RESULT = new GetInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= CREATE identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ObjectCreate(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= identifier 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= NIL 
            {
              Expression RESULT =null;
		 RESULT = new Nil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression DOT identifier LPAREN paramlist RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall(e, i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression POINTER identifier 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression MOD expression NT$1 expression GTHANE expression 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$1 ::= 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = new Modulo(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // else ::= ELSE statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ratherlist ::= ratherlist RATHER expression COLON statement 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_statement ::= WHILE expression COLON statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement l = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simple_statement ::= IF expression COLON statement ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_statement ::= BEGIN statementlist END NT$0 IF expression COLON statement ratherlist else END 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = new Block(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arglist ::= parameter 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArgList l = new ArgList(); l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arglist ::= arglist COMMA parameter 
            {
              ArgList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vardeclist ::= vardeclist vardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methoddef ::= SUBROUTINE type identifier RPAREN arglist LPAREN COLON statementlist ENDSUBR 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist deflist ENDCLASS 
            {
              ClassDef RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classdef ::= CLASS identifier COLON vardeclist deflist ENDCLASS 
            {
              ClassDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

