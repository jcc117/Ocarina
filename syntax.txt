Ocarina Syntax and Grammar
This language allows for inner classes and single inhertance

*lowercase = keyword, expcept for epsilon
*CAPS = production

keywords:
/*******************CLASS AND SUBROUTINE DEFINITIONS**********************/
start, end, class, endclass, extends, subroutine, endsubr
mock, endmock, stub, endstub

/**********************TYPES*****************************/
void, int, float, boolean, hashmap, string

/********************Control Statements******************/
if, else, while, endif, endwhile, return

/*******************Boolean Logic**********************/
and, or, nand, nor, true, false, equals

/***********************Other**********************/
this, nil, assert, create, +, -, *, ^, /, [], {}, ., ;, :, >, <, >=, <=, ->

**Mocks and stubs will be included later


PROGRAM := start STATEMENTLIST end DEFLIST <end of file>
STATEMENTLIST := STATEMENTLIST STATEMENT | epsilon
DEFLIST := DEFLIST CLASSDEF | DEFLIST METHODDEF | DEFLIST MOCKDEF | DEFLIST STUBDEF | epsilon
CLASSDEF := class IDENTIFIER ":" VARDECLIST DEFLIST endclass | class IDENTIFIER extends IDENTIFIER ":" VARDECLISTDEFLIST endclass
METHODDEF := subroutine RETURNTYPE IDENTIFIER "(" ARGLIST ")" ":" STATEMENTLIST endsubr
VARDECLIST := (TYPE IDENTIFIER ";")*

**MOCKDEF := mock IDENTIFIER(IDENTIFIER) ":" DEFLIST endmock
**STUBDEF := stub IDENTIFIER(IDENTIFIER) ":" STATEMENTLIST endstub

ARGLIST := TYPE IDENTIFIER ("," TYPE IDENTIFIER)
TYPE := int | float | boolean | hashmap | IDENTIFIER | TYPE "[]" | TYPE "{}" | string
RETURNTYPE := TYPE | void

STATEMENT := if EXPRESSION ":" STATEMENTLIST else STATEMENTLIST endif
	| while EXPRESSION ":" STATEMENTLIST endwhile
	| print EXPRESSION ";"
	| IDENTIFIER "=" EXPRESSION ";"
	| IDENTIFIER "{" EXPRESSION "}" "=" EXPRESSION ";"
	| IDENTIFIER "[" EXPRESSION "]" "=" EXPRESSION ";"
	| TYPE IDENTIFIER ";"
	| return EXPRESSION ";"
	| EXPRESSION ";"
	| assert EXPRESSION ";"

EXPRESSION := EXPRESSION (and | or | nand | nor | equals |"+" | "-" | "*" | "^" | "/"
	| "<" | ">" | ">=" | "<=") EXPRESSION
	| EXPRESSION "[" EXPRESSION "]"
	| EXPRESSION "{" EXPRESSION "}"
	| EXPRESSION "." length
	| INTLITERAL
	| FLOATLITERAL
	| true
	| false
	| nil
	| "(" EXPRESSION ")"
	| "!" EXPRESSION
	| IDENTIFIER
	| create IDENTIFIER "(" PARAMLIST ")"
	| EXPRESSION "@" IDENTIFIER "(" PARAMLIST ")"
	| this
	| EXPRESSION "->" IDENTIFIER
	| getInt
	| getFloat
	| getBoolean
	| getString

PARAMLIST := (EXPRESSION ("," EXPRESSION)* )?

IDENTIFER := (a-zA-Z_)(a-zA-Z0-9_?)*
INTLITERAL :=
FLOATLITERAL :=

/*Ignored by lexer, but useful to know*/
SINGLE_LINE_COMMENT := # text
MULTIPLE_LINE_COMMENT := ''' text with newlines '''
