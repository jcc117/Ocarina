package lexer_parser;
import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;
import filecatalog.FileCatalogBuilder;

/* Setup */
scan with {: return getScanner().next_token(); :};
parser code {: @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			:}

/* Terminals - Keywords*/

terminal START, END, SAGE, USING, PUBLIC, PRIVATE, PROTECTED;
terminal CLASS, EXTENDS, CONSTRUCTOR, SUPER, STATIC;
/* terminal MOCK; */
/* terminal STUB; */
terminal VOID, INT, FLOAT, BOOLEAN, STRING, VAR, CONST;
terminal DELEGATE;
terminal IF, ELSE, BEGIN, RATHER, UNLESS;
terminal WHILE, FOR, DO, UNTIL, FOREACH, IN;
terminal RETURN;
terminal AND, OR, NAND, NOR, EQUALS, DIFFERS;
terminal TRUE, FALSE;
terminal THIS, NIL;
terminal ASSERT, NEW, EXIT;
terminal LENGTH, PRINT;
terminal DEBUG, BREAK, CONTINUE;
terminal EXEC;
terminal TYPEOF;
terminal TRY, CATCH, FINALLY;
terminal THROW;

/* Terminals - Non Keywords */
terminal AT, COMMA, POINTER;
terminal PLUS, MINUS, MULT, DIV, POWER, MOD, INCREMENT, DECREMENT;
terminal GTHANE, LTHANE, LTHAN, GTHAN, EQUAL, BANG;
terminal LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal LPAREN, RPAREN;
terminal DOT, SEMICOLON, COLON;
terminal String STRINGLITERAL, IDENTIFIER;
terminal BigInteger INTLITERAL;
terminal BigDecimal FLOATLITERAL;

/* Non Terminals */
non terminal Sage sage;
non terminal UsingList usinglist;
non terminal Program program;
non terminal StatementList statementlist;
non terminal DefList deflist;
non terminal ClassDef classdef;
non terminal MethodDef methoddef, delegate;
/* non terminal MOCKDEF; */
/* non terminal STUBDEF; */
non terminal Statement vardec, classvardec;
non terminal ArgList arglist;
non terminal Type type;
non terminal Statement statement;
non terminal Expression expression;
non terminal Expression literal;
non terminal ParamList paramlist;
non terminal ParamList bracelist;
non terminal Identifier identifier;
non terminal Param parameter;
non terminal RatherList ratherlist;
non terminal StatementList else;
non terminal Statement simple_statement;
non terminal Statement semicolon_statement;
non terminal Constructor constructor;
non terminal MethodCall methodcall;
non terminal IdChain idchain;
non terminal Typeof typeof;
non terminal ExprChain expressionchain;
non terminal ArgChain argchain;
non terminal TryCatch trycatch;
non terminal CatchList catchlist;
non terminal PublicList publist;
non terminal PrivateList prilist;
non terminal ProtectedList prolist;
non terminal DefinitionList definitions;
non terminal DefWrapper def;

/* Note: some keywords replaced in the lexer to save work */
/* This includes subroutine(function), STATIC(static), float(decimal) */

/* Precedence */
precedence left LPAREN, RPAREN, DOT, AT, LBRACKET, RBRACKET, LBRACE, RBRACE;
precedence left BANG, INCREMENT, DECREMENT;
precedence left POWER;
precedence left DIV, MULT, MOD;
precedence left MINUS, PLUS;
precedence left GTHANE, LTHANE, GTHAN, LTHAN;
precedence left EQUALS, DIFFERS;
precedence left AND, NAND;
precedence left OR, NOR;

/* Productions */
/* Note on protection levels
	0 = private
	1 = stays within the defined block(only applies to variables) 
	2 = protected(stays within the sage)
	3 = public
*/
sage ::= SAGE identifier:i SEMICOLON usinglist:u program:p
		{: RESULT = new Sage(i, p, u, i.line, i.column); :}
		|
		SAGE identifier:i SEMICOLON usinglist:u definitions:d
		{: RESULT = new Sage(i, d, u, i.line, i.column); :}
		;
usinglist ::= usinglist:u USING identifier:i idchain:c SEMICOLON
		{: u.add(new Using(i, c, i.line, i.column)); RESULT = u; :}
		|
		{: RESULT = new UsingList(); :}
		;
program ::=	START:s1 COLON statementlist:s END definitions:d
		{: RESULT = new Program(s, d, false, s1left, s1right); :}
		|
		DEBUG START:s1 COLON statementlist:s END definitions:d
		{: RESULT = new Program(s, d, true, s1left, s1right); :}
		;

statementlist ::= statement:s statementlist:l
		{: l.add(s); RESULT = l;:}
		|
		{: RESULT = new StatementList(); :}
		;

deflist ::= deflist:d classdef:c
		{: d.add(c); RESULT = d; :}
		|
		deflist:d methoddef:m
		{: d.add(m); RESULT = d; :}
		|
		deflist:d constructor:c
		{: d.add(c); RESULT = d; :}
		|
		deflist:d classvardec:c
		{: d.add((Def)c); RESULT = d; :}
		|
		deflist:d delegate:d1
		{: d.add(d1); RESULT = d; :}
		|
		{: RESULT = new DefList(); :}
		;

def ::= classdef:c
		{: RESULT = new DefWrapper(c);:}
		|
		methoddef:m
		{: RESULT = new DefWrapper(m); :}
		|
		classvardec:c
		{: RESULT = new DefWrapper((Def)c); :}
		|
		constructor:c
		{: RESULT = new DefWrapper(c); :}
		|
		delegate:d
		{: RESULT = new DefWrapper(d); :}
		;

definitions ::= definitions:d1 def:d2
		{: d1.add(d2); RESULT = d1; :}
		|
		definitions:d publist:p
		{: d.add(p); RESULT = d; :}
		|
		definitions:d prilist:p
		{: d.add(p); RESULT = d; :}
		|
		definitions:d prolist:p
		{: d.add(p); RESULT = d; :}
		|
		{: RESULT = new DefinitionList(); :}
		;

delegate ::= DELEGATE:d type:t identifier:i arglist:c SEMICOLON
		{: RESULT = new MethodDef(t, i, c, null, false, true, dleft, dright); :}
		|
		STATIC:s DELEGATE type:t identifier:i arglist:c SEMICOLON
		{: RESULT = new MethodDef(t, i, c, null, true, true, sleft, sright); :}
		;

publist ::= PUBLIC:P COLON deflist:d END
		{: RESULT = new PublicList(d); :}
		;

prilist ::= PRIVATE:p COLON deflist:d END
		{: RESULT = new PrivateList(d); :}
		;

prolist ::= PROTECTED:p COLON deflist:d END
		{: RESULT = new ProtectedList(d); :}
		;

classdef ::= CLASS:c1 identifier:i1 EXTENDS identifier:i2 COLON definitions:d END
		{: RESULT = new ExtendsClassDef(i1, i2, d, false, c1left, c1right); :}
		|
		CLASS:c1 identifier:i COLON definitions:d END
		{: RESULT = new SimpleClassDef(i, d, false, c1left, c1right); :}
		|
		STATIC:s CLASS identifier:i1 EXTENDS identifier:i2 COLON definitions:d END
		{: RESULT = new ExtendsClassDef(i1, i2, d, true, sleft, sright); :}
		|
		STATIC:s CLASS identifier:i COLON definitions:d END
		{: RESULT = new SimpleClassDef(i, d, true, sleft, sright); :}
		;

constructor ::= CONSTRUCTOR:c arglist:a COLON statementlist:s END
		{: RESULT = new Constructor(a, s, cleft, cright); :}
		;

methoddef ::= type:r identifier:i arglist:a COLON statementlist:l END
		{: RESULT = new MethodDef(r, i, a, l, false, false, rleft, rright); :}
		|
		STATIC type:r identifier:i arglist:a COLON statementlist:l END
		{: RESULT = new MethodDef(r, i, a, l, true, false, rleft, rright); :}
		;

classvardec ::= type:t identifier:i SEMICOLON
		{: RESULT = new VarDecl(t, i, false,t.line, t.column); :}
		|
		type:t identifier:i EQUAL literal:l SEMICOLON
		{: RESULT = new VarDecAssignment(l, i, t, false,t.line, t.column); :}
		|
		STATIC type:t identifier:i SEMICOLON
		{: RESULT = new VarDecl(t, i, true, t.line, t.column); :}
		|
		STATIC type:t identifier:i EQUAL literal:l SEMICOLON
		{: RESULT = new VarDecAssignment(l, i, t, true, t.line, t.column); :}
		;

vardec ::= type:t identifier:i SEMICOLON
		{: RESULT = new VarDecl(t, i, false,t.line, t.column); :}
		;

arglist ::= LPAREN parameter:p argchain:c RPAREN
		{: RESULT = new ArgList(p, c); :}
		|
		LPAREN RPAREN
		{: RESULT = new ArgList(); :}
		;

argchain ::= COMMA parameter:p argchain:c
		{: c.add(p, 0); RESULT = c; :}
		|
		{: RESULT = new ArgChain(); :}
		;

parameter ::= type:t identifier:i
		{: RESULT = new Param(t, i, t.line, t.column); :}
		;

type ::= type:t LBRACKET RBRACKET
		{: RESULT = new ArrayType(t, false, t.line, t.column); :}
		|
		INT:i
		{: RESULT = new IntType(false, ileft, iright); :}
		|
		FLOAT:f
		{: RESULT = new FloatType(false, fleft, fright); :}
		|
		BOOLEAN:b
		{: RESULT = new BooleanType(false, bleft, bright); :}
		|
		STRING:s
		{: RESULT = new StringType(false, sleft, sright); :}
		|
		LBRACE:l type:t1 COMMA type:t2 RBRACE
		{: RESULT = new HashmapType(t1, t2, false, lleft, lright); :}
		|
		identifier:i idchain:c
		{: RESULT = new IdentifierType(i, c, false, i.line, i.column); :}
		|
		VOID:v
		{: RESULT = new VoidType(vleft, vright); :}
		|
		VAR:v
		{: RESULT = new VarType(false, vleft, vright); :}
		|
		CONST:c VAR
		{: RESULT = new VarType(true, cleft, cright); :}
		|
		CONST:c INT
		{: RESULT = new IntType(true, cleft, cright); :}
		|
		CONST:c FLOAT
		{: RESULT = new FloatType(true, cleft, cright); :}
		|
		CONST:c BOOLEAN
		{: RESULT = new BooleanType(true, cleft, cright); :}
		|
		CONST:c STRING
		{: RESULT = new StringType(true, cleft, cright); :}
		|
		CONST:c1 identifier:i idchain:c
		{: RESULT = new IdentifierType(i, c, true, c1left, c1right); :}
		;

typeof ::= identifier:i idchain:c TYPEOF type:t
		{: RESULT = new Typeof(i, c, t, i.line, i.column); :}
		;

methodcall ::= expression:e paramlist:l
		{: RESULT = new MethodCall(e, l, e.line, e.column); :}
		;

idchain ::= DOT identifier:i idchain:c
		{: c.add(i, 0); RESULT = c; :}
		|
		{: RESULT = new IdChain(); :}
		;

statement ::= simple_statement:s
		{: RESULT = s; :}
		|
		AT simple_statement:s
		{: s.breakPoint = true; RESULT = s;:}
		;

simple_statement ::= BEGIN:b COLON statementlist:l END
		{: RESULT = new Block(l, bleft, bright); :}
		|
		IF expression:e COLON statementlist:s1 ratherlist:l else:s2 END
		{: RESULT = new If(e, s1, l, s2, e.line, e.column); :}
		|
		IF expression:e COLON statementlist:s ratherlist:l END
		{: RESULT = new If(e, s, l, null, e.line, e.column); :}
		|
		UNLESS expression:e COLON statementlist:s END
		{: RESULT = new Unless(e, s, e.line, e.column); :}
		|
		WHILE expression:e COLON statementlist:l END
		{: RESULT = new While(e, l, e.line, e.column); :}
		|
		UNTIL expression:e COLON statementlist:l END
		{: RESULT = new Until(e, l, e.line, e.column); :}
		|
		FOR LPAREN semicolon_statement:s1 SEMICOLON expression:e SEMICOLON semicolon_statement:s2 RPAREN COLON statementlist:s3 END
		{: RESULT = new For(e, s1, s2, s3, s1.line, s1.column); :}
		|
		FOREACH type:t identifier:i1 IN identifier:i2 idchain:c COLON statementlist:s END
		{: RESULT = new Foreach(t, i1, i2, c, s, t.line, t.column); :}
		|
		DO statementlist:s END WHILE expression:e SEMICOLON
		{: RESULT = new DoWhile(e, s, e.line, e.column); :}
		|
		semicolon_statement:s SEMICOLON
		{: RESULT = s; :}
		|
		trycatch:t
		{: RESULT = t; :}
		|
		vardec:v
		{: RESULT = v; :}
		|
		ASSERT expression:e SEMICOLON
		{: RESULT = new Assert(e, e.line, e.column); :}
		|
		ASSERT expression:e COLON expression:e2 SEMICOLON
		{: RESULT = new Assert(e, e2, e.line, e.column); :}
		;

semicolon_statement ::= PRINT LPAREN expression:e RPAREN
		{: RESULT = new Print(e, e.line, e.column); :}
		|
		type:t identifier:i EQUAL expression:e
		{: RESULT = new VarDecAssignment(e, i, t, false, t.line, t.column); :}
		|
		identifier:i idchain:c EQUAL expression:e
		{: RESULT = new Assignment(e, i, c, i.line, i.column); :}
		|
		identifier:i idchain:c LBRACE expression:e1 RBRACE EQUAL expression:e2
		{: RESULT = new HashmapAssignment(i, c, e1, e2, i.line, i.column); :}
		|
		identifier:i idchain:c LBRACKET expression:e1 RBRACKET EQUAL expression:e2
		{: RESULT = new ArrayAssignment(i, c, e1, e2, i.line, i.column); :}
		|
		RETURN expression:e
		{: RESULT = new Return(e, e.line, e.column); :}
		|
		EXIT LPAREN expression:e RPAREN
		{: RESULT = new Exit(e, e.line, e.column); :}
		|
		CONTINUE:c
		{: RESULT = new Continue(cleft, cright); :}
		|
		BREAK:b
		{: RESULT = new Break(bleft, bright); :}
		|
		identifier:i idchain:c INCREMENT
		{: RESULT = new Increment(i, c, i.line, i.column); :}
		|
		THIS:t idchain:c INCREMENT
		{: RESULT = new Increment(new This(tleft, tright), c, tleft, tright); :}
		|
		INCREMENT identifier:i idchain:c
		{: RESULT = new Increment(i, c, i.line, i.column); :}
		|
		INCREMENT THIS:t idchain:c
		{: RESULT = new Increment(new This(tleft, tright), c, tleft, tright); :}
		|
		identifier:i idchain:c DECREMENT
		{: RESULT = new Decrement(i, c, i.line, i.column); :}
		|
		THIS:t idchain:c DECREMENT
		{: RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); :}
		|
		DECREMENT identifier:i idchain:c
		{: RESULT = new Decrement(i, c, i.line, i.column); :}
		|
		DECREMENT THIS:t idchain:c
		{: RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); :}
		|
		EXEC methodcall:m
		{: RESULT = new MethodCallStatement(m, m.line, m.column); :}
		|
		SUPER:s paramlist:p
		{: RESULT = new Super(p, sleft, sright);:}
		|
		THROW expression:e
		{: RESULT = new Throw(e, e.line, e.column);:}
		;

trycatch ::= TRY:t COLON statementlist:s1 catchlist:c END
		{: RESULT = new TryCatch(s1, c, tleft, tright); :}
		|
		TRY:t COLON statementlist:s1 catchlist:c FINALLY COLON statementlist:s2 END
		{: RESULT = new TryCatch(s1, c, s2, tleft, tright); :}
		;

catchlist ::= CATCH identifier:i idchain:c identifier:i2 COLON statementlist:s catchlist:l
		{: l.add(new Catch(i, c, i2, s, i.line, i.column), 0); RESULT = l; :}
		|
		{: RESULT = new CatchList(); :}
		;

ratherlist ::= ratherlist:l RATHER expression:e COLON statementlist:s
		{:l.add(new Rather(e, s, e.line, e.column)); RESULT = l;:}
		|
		{:RESULT = new RatherList(); :}
		;
else ::= ELSE COLON statementlist:s
		{: RESULT = s; :}
		;

expression ::= expression:e1 AND expression:e2
		{: RESULT = new And(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 OR expression:e2
		{: RESULT = new Or(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 NAND expression:e2
		{: RESULT = new Nand(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 NOR expression:e2
		{: RESULT = new Nor(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 EQUALS expression:e2
		{: RESULT = new Equals(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 DIFFERS expression:e2
		{: RESULT = new Differs(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 PLUS expression:e2
		{: RESULT = new Plus(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 MINUS expression:e2
		{: RESULT = new Minus(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 MULT expression:e2
		{: RESULT = new Multiply(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 POWER expression:e2
		{: RESULT = new Power(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 DIV expression:e2
		{: RESULT = new Divide(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 MOD expression:e2
		{: RESULT = new Modulo(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 GTHANE expression:e2
		{: RESULT = new GreaterThanEqualTo(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 LTHANE expression:e2
		{: RESULT = new LessThanEqualTo(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 GTHAN expression:e2
		{: RESULT = new GreaterThan(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 LTHAN expression:e2
		{: RESULT = new LessThan(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 LBRACE expression:e2 RBRACE
		{: RESULT = new HashmapExpr(e1, e2, e1.line, e1.column); :}
		|
		expression:e1 LBRACKET expression:e2 RBRACKET
		{: RESULT = new ArrayExpr(e1, e2, e1.line, e1.column); :}
		|
		identifier:i idchain:i2
		{: RESULT = new ObjectVarAccess(i, i2, i.line, i.column); :}
		|
		methodcall:m
		{: RESULT = m; :}
		|
		expression:e DOT LENGTH
		{: RESULT = new ArrayLength(e, e.line, e.column); :}
		|
		LPAREN expression:e RPAREN
		{: RESULT = new ParentExpr(e, e.line, e.column); :}
		|
		BANG expression:e
		{: RESULT = new Not(e, e.line, e.column); :}
		|
		THIS:t
		{: RESULT = new This(tleft, tright); :}
		|
		typeof:t
		{: RESULT = t; :}
		|
		identifier:i idchain:c INCREMENT
		{: RESULT = new PostIncrement(i, c, i.line, i.column); :}
		|
		THIS:t idchain:c INCREMENT
		{: RESULT = new PostIncrement(new This(tleft, tright), c, tleft, tright); :}
		|
		INCREMENT identifier:i idchain:c
		{: RESULT = new PreIncrement(i, c, i.line, i.column); :}
		|
		INCREMENT THIS:t idchain:c
		{: RESULT = new PreIncrement(new This(tleft, tright), c, tleft, tright); :}
		|
		identifier:i idchain:c DECREMENT
		{: RESULT = new PostDecrement(i, c, i.line, i.column); :}
		|
		THIS:t idchain:c DECREMENT
		{: RESULT = new PostDecrement(new This(tleft, tright), c, tleft, tright); :}
		|
		DECREMENT identifier:i idchain:c
		{: RESULT = new PreDecrement(i, c, i.line, i.column); :}
		|
		DECREMENT THIS:t idchain:c
		{: RESULT = new PreDecrement(new This(tleft, tright), c, tleft, tright); :}
		|
		literal:l
		{: RESULT = l; :}
		;

literal ::= INTLITERAL:i
		{: RESULT = new IntLiteral(i, ileft, iright); :}
		|
		FLOATLITERAL:f
		{: RESULT = new FloatLiteral(f, fleft, fright); :}
		|
		TRUE:t
		{: RESULT = new True(tleft, tright); :}
		|
		FALSE:f
		{: RESULT = new False(fleft, fright); :}
		|
		NIL:n
		{: RESULT = new Nil(nleft, nright); :}
		|
		NEW:c identifier:i idchain:d paramlist:l
		{: RESULT = new ObjectCreate(i, d, l, cleft, cright); :}
		|
		DELEGATE:d arglist:p POINTER COLON statementlist:l END
		{: RESULT = new MethodLiteral(l, p, FileCatalogBuilder.generateLiteralId(), dleft, dright); :}
		|
		MINUS:m expression:e
		{: RESULT = new UnaryMinus(e, mleft, mright); :}
		|
		NEW:c type:t LBRACKET expression:e RBRACKET
		{: RESULT = new ArrayCreate(t, e, cleft, cright); :}
		|
		LBRACE:l type:t1 COMMA type:t2 RBRACE
		{: RESULT = new HashmapCreate(t1, t2, lleft, lright); :}
		|
		STRINGLITERAL:s
		{: RESULT = new StringLiteral(s, sleft, sright); :}
		|
		NEW:c type:t LBRACKET RBRACKET bracelist:l
		{: RESULT = new ArrayLiteral(t, l, cleft, cright); :}
		;

bracelist ::= LBRACE expression:e expressionchain:c RBRACE
		{: RESULT = new ParamList(e, c); :}
		|
		LBRACE RBRACE
		{: RESULT = new ParamList(); :}
		;

paramlist ::= LPAREN expression:e expressionchain:c RPAREN
		{: RESULT = new ParamList(e, c); :}
		|
		LPAREN RPAREN
		{: RESULT = new ParamList(); :}
		;

expressionchain ::= COMMA expression:e expressionchain:c
		{: c.add(e, 0); RESULT = c; :}
		|
		{: RESULT = new ExprChain(); :} 
		;

identifier ::= IDENTIFIER:i
		{: RESULT = new Identifier(i, ileft, iright); :}
		;
