
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 07 21:15:15 EST 2018
//----------------------------------------------------

package lexer_parser;

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;
import filecatalog.FileCatalogBuilder;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 07 21:15:15 EST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\002\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\002\000\002\040\005\000\002\041\005\000\002" +
    "\042\005\000\002\007\011\000\002\007\007\000\002\007" +
    "\012\000\002\007\010\000\002\030\007\000\002\010\010" +
    "\000\002\010\011\000\002\012\005\000\002\012\007\000" +
    "\002\012\006\000\002\012\010\000\002\011\005\000\002" +
    "\013\006\000\002\013\004\000\002\035\005\000\002\035" +
    "\002\000\002\023\004\000\002\014\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\007\000\002\014\004\000\002\014\006\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\005\000\002\014\007\000\002\033\006\000" +
    "\002\031\004\000\002\032\005\000\002\032\002\000\002" +
    "\015\003\000\002\015\004\000\002\026\005\000\002\026" +
    "\011\000\002\026\010\000\002\026\007\000\002\026\007" +
    "\000\002\026\007\000\002\026\015\000\002\026\013\000" +
    "\002\026\010\000\002\026\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\005\000\002\026\007\000\002\027" +
    "\006\000\002\027\006\000\002\027\006\000\002\027\011" +
    "\000\002\027\011\000\002\027\004\000\002\027\006\000" +
    "\002\027\003\000\002\027\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\036\007\000\002\036\012\000\002\037\011\000\002" +
    "\037\002\000\002\024\007\000\002\024\002\000\002\025" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\006\000\002\016\006\000\002\016\004\000" +
    "\002\016\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\006\000\002\017\012\000\002\017\004" +
    "\000\002\017\007\000\002\017\007\000\002\017\003\000" +
    "\002\017\007\000\002\021\006\000\002\021\004\000\002" +
    "\020\006\000\002\020\004\000\002\034\005\000\002\034" +
    "\002\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0189\000\004\006\004\001\002\000\004\127\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\124\011\001\002\000\106\014\uff62\042\uff62\044" +
    "\uff62\045\uff62\046\uff62\047\uff62\050\uff62\051\uff62\067\uff62" +
    "\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62\102\uff62\103" +
    "\uff62\104\uff62\105\uff62\106\uff62\107\uff62\110\uff62\111\uff62" +
    "\112\uff62\113\uff62\115\uff62\116\uff62\117\uff62\120\uff62\121" +
    "\uff62\122\uff62\123\uff62\124\uff62\125\uff62\127\uff62\001\002" +
    "\000\052\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\063\ufffd\117" +
    "\ufffd\127\ufffd\001\002\000\052\002\uffeb\004\017\007\016" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\063\013\117\uffeb\127\uffeb\001\002\000\004\004" +
    "\u0188\001\002\000\004\002\001\001\002\000\044\002\uffff" +
    "\010\317\011\315\012\324\013\313\015\325\017\321\020" +
    "\022\021\047\022\024\023\056\024\040\025\060\026\063" +
    "\027\021\117\053\127\010\001\002\000\004\127\010\001" +
    "\002\000\104\005\ufff9\016\043\020\022\021\047\022\024" +
    "\023\056\024\040\025\060\026\063\027\021\030\036\032" +
    "\033\034\055\035\054\036\026\037\065\040\034\041\051" +
    "\043\042\054\037\056\030\060\035\062\064\064\046\065" +
    "\023\066\062\070\045\073\032\074\061\105\020\106\027" +
    "\117\053\127\010\001\002\000\006\054\u0182\127\010\001" +
    "\002\000\020\020\u0179\022\u017c\023\u017a\024\u017b\025\u0177" +
    "\026\u0176\127\010\001\002\000\004\117\u0173\001\002\000" +
    "\006\122\uffaa\124\uffaa\001\002\000\072\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\107\uffd5" +
    "\110\uffd5\111\uffd5\112\uffd5\115\uffd5\116\uffd5\117\uffd5\120" +
    "\uffd5\121\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\127\uffd5" +
    "\001\002\000\114\005\uffc1\016\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\043\uffc1\054\uffc1\056\uffc1\060\uffc1" +
    "\062\uffc1\064\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\073\uffc1\074\uffc1\105\uffc1\106\uffc1\117\uffc1\127\uffc1" +
    "\001\002\000\004\121\u0167\001\002\000\006\054\u0164\127" +
    "\010\001\002\000\042\020\117\052\100\053\112\054\104" +
    "\055\102\057\115\100\113\105\110\106\077\114\116\117" +
    "\103\121\101\126\106\127\010\130\111\131\105\001\002" +
    "\000\020\105\uffc2\106\uffc2\113\uffc2\115\uffc2\117\uffc2\123" +
    "\135\127\uffc2\001\002\000\042\020\117\052\100\053\112" +
    "\054\104\055\102\057\115\100\113\105\110\106\077\114" +
    "\116\117\103\121\101\126\106\127\010\130\111\131\105" +
    "\001\002\000\104\005\ufff9\016\043\020\022\021\047\022" +
    "\024\023\056\024\040\025\060\026\063\027\021\030\036" +
    "\032\033\034\055\035\054\036\026\037\065\040\034\041" +
    "\051\043\042\054\037\056\030\060\035\062\064\064\046" +
    "\065\023\066\062\070\045\073\032\074\061\105\020\106" +
    "\027\117\053\127\010\001\002\000\042\020\117\052\100" +
    "\053\112\054\104\055\102\057\115\100\113\105\110\106" +
    "\077\114\116\117\103\121\101\126\106\127\010\130\111" +
    "\131\105\001\002\000\004\121\u0145\001\002\000\042\020" +
    "\117\052\100\053\112\054\104\055\102\057\115\100\113" +
    "\105\110\106\077\114\116\117\103\121\101\126\106\127" +
    "\010\130\111\131\105\001\002\000\010\105\uffc2\106\uffc2" +
    "\123\135\001\002\000\072\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\101\uffd3\102\uffd3\103\uffd3\104\uffd3\107\uffd3\110\uffd3\111" +
    "\uffd3\112\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3" +
    "\122\uffd3\123\uffd3\124\uffd3\125\uffd3\127\uffd3\001\002\000" +
    "\114\005\ufff9\016\043\020\022\021\047\022\024\023\056" +
    "\024\040\025\060\026\063\027\021\030\036\031\ufff9\032" +
    "\033\033\ufff9\034\055\035\054\036\026\037\065\040\034" +
    "\041\051\043\042\054\037\056\030\060\035\062\064\064" +
    "\046\065\023\066\062\070\045\071\ufff9\072\ufff9\073\032" +
    "\074\061\105\020\106\027\117\053\127\010\001\002\000" +
    "\042\020\117\052\100\053\112\054\104\055\102\057\115" +
    "\100\113\105\110\106\077\114\116\117\103\121\101\126" +
    "\106\127\010\130\111\131\105\001\002\000\004\121\156" +
    "\001\002\000\114\005\uffb4\016\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\043\uffb4\054\uffb4\056\uffb4\060\uffb4" +
    "\062\uffb4\064\uffb4\065\uffb4\066\uffb4\070\uffb4\071\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\105\uffb4\106\uffb4\117\uffb4\127\uffb4" +
    "\001\002\000\004\125\u0122\001\002\000\006\122\uffa9\124" +
    "\uffa9\001\002\000\072\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101" +
    "\uffce\102\uffce\103\uffce\104\uffce\107\uffce\110\uffce\111\uffce" +
    "\112\uffce\115\uffce\116\uffce\117\uffce\120\uffce\121\uffce\122" +
    "\uffce\123\uffce\124\uffce\125\uffce\127\uffce\001\002\000\114" +
    "\005\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\043\uffb5\054\uffb5\056\uffb5\060\uffb5\062\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\105\uffb5\106\uffb5\117\uffb5\127\uffb5\001\002\000\026" +
    "\020\022\021\047\022\024\023\056\024\040\025\060\026" +
    "\063\027\021\117\053\127\010\001\002\000\004\124\u0119" +
    "\001\002\000\026\020\022\021\047\022\024\023\056\024" +
    "\040\025\060\026\063\027\021\117\053\127\010\001\002" +
    "\000\042\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\117\103\121\101" +
    "\126\106\127\010\130\111\131\105\001\002\000\042\020" +
    "\117\052\100\053\112\054\104\055\102\057\115\100\113" +
    "\105\110\106\077\114\116\117\103\121\101\126\106\127" +
    "\010\130\111\131\105\001\002\000\072\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\107\uffd4" +
    "\110\uffd4\111\uffd4\112\uffd4\115\uffd4\116\uffd4\117\uffd4\120" +
    "\uffd4\121\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\127\uffd4" +
    "\001\002\000\004\005\310\001\002\000\072\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\107" +
    "\uffd2\110\uffd2\111\uffd2\112\uffd2\115\uffd2\116\uffd2\117\uffd2" +
    "\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2\127" +
    "\uffd2\001\002\000\100\016\043\020\022\021\047\022\024" +
    "\023\056\024\040\025\060\026\063\027\021\030\036\032" +
    "\033\034\055\035\054\036\026\037\065\040\034\041\051" +
    "\043\042\054\037\056\030\060\035\062\064\064\046\065" +
    "\023\066\062\070\045\073\032\105\020\106\027\117\053" +
    "\127\010\001\002\000\042\020\117\052\100\053\112\054" +
    "\104\055\102\057\115\100\113\105\110\106\077\114\116" +
    "\117\103\121\101\126\106\127\010\130\111\131\105\001" +
    "\002\000\072\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\104\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd" +
    "\115\uffcd\116\uffcd\117\uffcd\120\uffcd\121\uffcd\122\uffcd\123" +
    "\uffcd\124\uffcd\125\uffcd\127\uffcd\001\002\000\004\121\302" +
    "\001\002\000\104\005\ufff9\016\043\020\022\021\047\022" +
    "\024\023\056\024\040\025\060\026\063\027\021\030\036" +
    "\032\033\034\055\035\054\036\026\037\065\040\034\041" +
    "\051\043\042\054\037\056\030\060\035\062\064\064\046" +
    "\065\023\066\062\070\045\073\032\074\061\105\020\106" +
    "\027\117\053\127\010\001\002\000\006\115\070\127\010" +
    "\001\002\000\006\113\073\124\072\001\002\000\004\116" +
    "\071\001\002\000\072\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\103\uffd6\104\uffd6\107\uffd6\110\uffd6\111\uffd6" +
    "\112\uffd6\115\uffd6\116\uffd6\117\uffd6\120\uffd6\121\uffd6\122" +
    "\uffd6\123\uffd6\124\uffd6\125\uffd6\127\uffd6\001\002\000\114" +
    "\005\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\043\uffdc\054\uffdc\056\uffdc\060\uffdc\062\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074" +
    "\uffdc\105\uffdc\106\uffdc\117\uffdc\127\uffdc\001\002\000\042" +
    "\020\117\052\100\053\112\054\104\055\102\057\115\100" +
    "\113\105\110\106\077\114\116\117\103\121\101\126\106" +
    "\127\010\130\111\131\105\001\002\000\066\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\075\uff7e\077\uff7e" +
    "\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\107\uff7e\110" +
    "\uff7e\111\uff7e\112\uff7e\115\uff7e\116\uff7e\117\uff7e\120\uff7e" +
    "\121\uff7e\122\uff7e\123\uff7e\124\uff7e\125\uff7e\001\002\000" +
    "\066\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\075\uff83\077\uff83\100\uff83\101\uff83\102\uff83\103\uff83\104" +
    "\uff83\107\uff83\110\uff83\111\uff83\112\uff83\115\uff83\116\uff83" +
    "\117\uff83\120\uff83\121\uff83\122\uff83\123\uff83\124\uff83\125" +
    "\uff83\001\002\000\074\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\067\uffc2\075\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2" +
    "\110\uffc2\111\uffc2\112\uffc2\115\uffc2\116\uffc2\117\uffc2\120" +
    "\uffc2\121\uffc2\122\uffc2\123\135\124\uffc2\125\uffc2\001\002" +
    "\000\006\054\265\127\010\001\002\000\066\044\uff72\045" +
    "\uff72\046\uff72\047\uff72\050\uff72\051\uff72\075\uff72\077\uff72" +
    "\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72\107\uff72\110" +
    "\uff72\111\uff72\112\uff72\115\uff72\116\uff72\117\uff72\120\uff72" +
    "\121\uff72\122\uff72\123\uff72\124\uff72\125\uff72\001\002\000" +
    "\042\020\117\052\100\053\112\054\104\055\102\057\115" +
    "\100\113\105\110\106\077\114\116\117\103\121\101\126" +
    "\106\127\010\130\111\131\105\001\002\000\066\044\uff70" +
    "\045\uff70\046\uff70\047\uff70\050\uff70\051\uff70\075\uff70\077" +
    "\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70\107\uff70" +
    "\110\uff70\111\uff70\112\uff70\115\uff70\116\uff70\117\uff70\120" +
    "\uff70\121\uff70\122\uff70\123\uff70\124\uff70\125\uff70\001\002" +
    "\000\026\020\022\021\047\022\024\023\056\024\040\025" +
    "\060\026\063\027\021\117\053\127\010\001\002\000\072" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\075" +
    "\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\105\uffc2\106\uffc2\107\uff7f\110\uff7f\111\uff7f\112\uff7f\115" +
    "\uff7f\116\uff7f\117\uff7f\120\uff7f\121\uff7f\122\uff7f\123\135" +
    "\124\uff7f\125\uff7f\001\002\000\066\044\uff73\045\uff73\046" +
    "\uff73\047\uff73\050\uff73\051\uff73\075\uff73\077\uff73\100\uff73" +
    "\101\uff73\102\uff73\103\uff73\104\uff73\107\uff73\110\uff73\111" +
    "\uff73\112\uff73\115\uff73\116\uff73\117\uff73\120\uff73\121\uff73" +
    "\122\uff73\123\uff73\124\uff73\125\uff73\001\002\000\066\044" +
    "\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\075\uff6a" +
    "\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\107" +
    "\uff6a\110\uff6a\111\uff6a\112\uff6a\115\uff6a\116\uff6a\117\uff6a" +
    "\120\uff6a\121\uff6a\122\uff6a\123\uff6a\124\uff6a\125\uff6a\001" +
    "\002\000\056\044\150\045\152\046\165\047\153\050\160" +
    "\051\154\077\151\100\167\101\161\102\163\103\173\104" +
    "\147\107\164\110\171\111\166\112\162\115\157\117\155" +
    "\121\156\122\uffb0\123\170\124\uffb0\001\002\000\006\054" +
    "\250\127\010\001\002\000\066\044\uff74\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\051\uff74\075\uff74\077\uff74\100\uff74\101" +
    "\uff74\102\uff74\103\uff74\104\uff74\107\uff74\110\uff74\111\uff74" +
    "\112\uff74\115\uff74\116\uff74\117\uff74\120\uff74\121\uff74\122" +
    "\uff74\123\uff74\124\uff74\125\uff74\001\002\000\066\044\uff71" +
    "\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\075\uff71\077" +
    "\uff71\100\uff71\101\uff71\102\uff71\103\uff71\104\uff71\107\uff71" +
    "\110\uff71\111\uff71\112\uff71\115\uff71\116\uff71\117\uff71\120" +
    "\uff71\121\uff71\122\uff71\123\uff71\124\uff71\125\uff71\001\002" +
    "\000\042\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\117\103\121\101" +
    "\126\106\127\010\130\111\131\105\001\002\000\066\044" +
    "\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\075\uff75" +
    "\077\uff75\100\uff75\101\uff75\102\uff75\103\uff75\104\uff75\107" +
    "\uff75\110\uff75\111\uff75\112\uff75\115\uff75\116\uff75\117\uff75" +
    "\120\uff75\121\uff75\122\uff75\123\uff75\124\uff75\125\uff75\001" +
    "\002\000\026\020\022\021\047\022\024\023\056\024\040" +
    "\025\060\026\063\027\021\117\053\127\010\001\002\000" +
    "\042\020\117\052\100\053\112\054\104\055\102\057\115" +
    "\100\113\105\110\106\077\114\116\117\103\121\101\126" +
    "\106\127\010\130\111\131\105\001\002\000\004\121\121" +
    "\001\002\000\004\125\140\001\002\000\030\020\022\021" +
    "\047\022\024\023\056\024\040\025\060\026\063\027\021" +
    "\117\053\122\124\127\010\001\002\000\072\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\107" +
    "\uffc2\110\uffc2\111\uffc2\112\uffc2\115\uffc2\116\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\122\uffc2\123\135\124\uffc2\125\uffc2\127" +
    "\uffc2\001\002\000\006\115\070\127\010\001\002\000\004" +
    "\125\uffda\001\002\000\006\075\126\122\uffd8\001\002\000" +
    "\026\020\022\021\047\022\024\023\056\024\040\025\060" +
    "\026\063\027\021\117\053\127\010\001\002\000\004\122" +
    "\130\001\002\000\004\125\uffdb\001\002\000\006\075\126" +
    "\122\uffd8\001\002\000\004\122\uffd9\001\002\000\006\075" +
    "\uffd7\122\uffd7\001\002\000\072\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\075\uffd0\076\uffd0\077\uffd0\100" +
    "\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\107\uffd0\110\uffd0" +
    "\111\uffd0\112\uffd0\115\uffd0\116\uffd0\117\uffd0\120\uffd0\121" +
    "\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0\127\uffd0\001\002" +
    "\000\004\127\010\001\002\000\102\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\067\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2" +
    "\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\123" +
    "\135\124\uffc2\125\uffc2\127\uffc2\001\002\000\102\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\067\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112" +
    "\uffc3\113\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3" +
    "\122\uffc3\123\uffc3\124\uffc3\125\uffc3\127\uffc3\001\002\000" +
    "\026\020\022\021\047\022\024\023\056\024\040\025\060" +
    "\026\063\027\021\117\053\127\010\001\002\000\006\076" +
    "\142\115\070\001\002\000\004\125\143\001\002\000\104" +
    "\005\ufff9\016\043\020\022\021\047\022\024\023\056\024" +
    "\040\025\060\026\063\027\021\030\036\032\033\034\055" +
    "\035\054\036\026\037\065\040\034\041\051\043\042\054" +
    "\037\056\030\060\035\062\064\064\046\065\023\066\062" +
    "\070\045\073\032\074\061\105\020\106\027\117\053\127" +
    "\010\001\002\000\004\005\145\001\002\000\066\044\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\075\uff6e\077" +
    "\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\107\uff6e" +
    "\110\uff6e\111\uff6e\112\uff6e\115\uff6e\116\uff6e\117\uff6e\120" +
    "\uff6e\121\uff6e\122\uff6e\123\uff6e\124\uff6e\125\uff6e\001\002" +
    "\000\066\044\150\045\152\046\165\047\153\050\160\051" +
    "\154\075\uff80\077\151\100\167\101\161\102\163\103\173" +
    "\104\147\107\164\110\171\111\166\112\162\115\uff80\116" +
    "\uff80\117\uff80\120\uff80\121\uff80\122\uff80\123\uff80\124\uff80" +
    "\125\uff80\001\002\000\042\020\117\052\100\053\112\054" +
    "\104\055\102\057\115\100\113\105\110\106\077\114\116" +
    "\117\103\121\101\126\106\127\010\130\111\131\105\001" +
    "\002\000\042\020\117\052\100\053\112\054\104\055\102" +
    "\057\115\100\113\105\110\106\077\114\116\117\103\121" +
    "\101\126\106\127\010\130\111\131\105\001\002\000\042" +
    "\020\117\052\100\053\112\054\104\055\102\057\115\100" +
    "\113\105\110\106\077\114\116\117\103\121\101\126\106" +
    "\127\010\130\111\131\105\001\002\000\042\020\117\052" +
    "\100\053\112\054\104\055\102\057\115\100\113\105\110" +
    "\106\077\114\116\117\103\121\101\126\106\127\010\130" +
    "\111\131\105\001\002\000\042\020\117\052\100\053\112" +
    "\054\104\055\102\057\115\100\113\105\110\106\077\114" +
    "\116\117\103\121\101\126\106\127\010\130\111\131\105" +
    "\001\002\000\042\020\117\052\100\053\112\054\104\055" +
    "\102\057\115\100\113\105\110\106\077\114\116\117\103" +
    "\121\101\126\106\127\010\130\111\131\105\001\002\000" +
    "\042\020\117\052\100\053\112\054\104\055\102\057\115" +
    "\100\113\105\110\106\077\114\116\117\103\121\101\126" +
    "\106\127\010\130\111\131\105\001\002\000\044\020\117" +
    "\052\100\053\112\054\104\055\102\057\115\100\113\105" +
    "\110\106\077\114\116\117\103\121\101\122\211\126\106" +
    "\127\010\130\111\131\105\001\002\000\042\020\117\052" +
    "\100\053\112\054\104\055\102\057\115\100\113\105\110" +
    "\106\077\114\116\117\103\121\101\126\106\127\010\130" +
    "\111\131\105\001\002\000\042\020\117\052\100\053\112" +
    "\054\104\055\102\057\115\100\113\105\110\106\077\114" +
    "\116\117\103\121\101\126\106\127\010\130\111\131\105" +
    "\001\002\000\042\020\117\052\100\053\112\054\104\055" +
    "\102\057\115\100\113\105\110\106\077\114\116\117\103" +
    "\121\101\126\106\127\010\130\111\131\105\001\002\000" +
    "\042\020\117\052\100\053\112\054\104\055\102\057\115" +
    "\100\113\105\110\106\077\114\116\117\103\121\101\126" +
    "\106\127\010\130\111\131\105\001\002\000\042\020\117" +
    "\052\100\053\112\054\104\055\102\057\115\100\113\105" +
    "\110\106\077\114\116\117\103\121\101\126\106\127\010" +
    "\130\111\131\105\001\002\000\042\020\117\052\100\053" +
    "\112\054\104\055\102\057\115\100\113\105\110\106\077" +
    "\114\116\117\103\121\101\126\106\127\010\130\111\131" +
    "\105\001\002\000\042\020\117\052\100\053\112\054\104" +
    "\055\102\057\115\100\113\105\110\106\077\114\116\117" +
    "\103\121\101\126\106\127\010\130\111\131\105\001\002" +
    "\000\042\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\117\103\121\101" +
    "\126\106\127\010\130\111\131\105\001\002\000\042\020" +
    "\117\052\100\053\112\054\104\055\102\057\115\100\113" +
    "\105\110\106\077\114\116\117\103\121\101\126\106\127" +
    "\010\130\111\131\105\001\002\000\004\061\176\001\002" +
    "\000\042\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\117\103\121\101" +
    "\126\106\127\010\130\111\131\105\001\002\000\066\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\075\uffc4" +
    "\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\107" +
    "\uffc4\110\uffc4\111\uffc4\112\uffc4\115\uffc4\116\uffc4\117\uffc4" +
    "\120\uffc4\121\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\001" +
    "\002\000\042\020\117\052\100\053\112\054\104\055\102" +
    "\057\115\100\113\105\110\106\077\114\116\117\103\121" +
    "\101\126\106\127\010\130\111\131\105\001\002\000\066" +
    "\044\150\045\152\046\165\047\153\050\160\051\154\075" +
    "\uff8d\077\151\100\167\101\161\102\163\103\uff8d\104\147" +
    "\107\164\110\171\111\166\112\162\115\uff8d\116\uff8d\117" +
    "\uff8d\120\uff8d\121\uff8d\122\uff8d\123\uff8d\124\uff8d\125\uff8d" +
    "\001\002\000\066\044\150\045\152\046\165\047\153\050" +
    "\160\051\154\075\uff89\077\uff89\100\uff89\101\uff89\102\uff89" +
    "\103\uff89\104\uff89\107\uff89\110\uff89\111\uff89\112\uff89\115" +
    "\uff89\116\uff89\117\uff89\120\uff89\121\uff89\122\uff89\123\uff89" +
    "\124\uff89\125\uff89\001\002\000\066\044\uff82\045\uff82\046" +
    "\uff82\047\uff82\050\uff82\051\uff82\075\uff82\077\uff82\100\uff82" +
    "\101\uff82\102\uff82\103\uff82\104\uff82\107\uff82\110\uff82\111" +
    "\uff82\112\uff82\115\uff82\116\uff82\117\uff82\120\uff82\121\uff82" +
    "\122\uff82\123\uff82\124\uff82\125\uff82\001\002\000\066\044" +
    "\150\045\152\046\165\047\153\050\160\051\154\075\uff8f" +
    "\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\107" +
    "\164\110\171\111\166\112\162\115\uff8f\116\uff8f\117\uff8f" +
    "\120\uff8f\121\uff8f\122\uff8f\123\uff8f\124\uff8f\125\uff8f\001" +
    "\002\000\066\044\150\045\152\046\165\047\153\050\160" +
    "\051\154\075\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103" +
    "\uff87\104\uff87\107\uff87\110\uff87\111\uff87\112\uff87\115\uff87" +
    "\116\uff87\117\uff87\120\uff87\121\uff87\122\uff87\123\uff87\124" +
    "\uff87\125\uff87\001\002\000\066\044\uff94\045\152\046\uff94" +
    "\047\153\050\uff94\051\uff94\075\uff94\077\uff94\100\uff94\101" +
    "\uff94\102\uff94\103\uff94\104\uff94\107\uff94\110\uff94\111\uff94" +
    "\112\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122" +
    "\uff94\123\uff94\124\uff94\125\uff94\001\002\000\066\044\150" +
    "\045\152\046\165\047\153\050\160\051\154\075\uff8a\077" +
    "\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\107\uff8a" +
    "\110\uff8a\111\uff8a\112\uff8a\115\uff8a\116\uff8a\117\uff8a\120" +
    "\uff8a\121\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\001\002" +
    "\000\066\044\150\045\152\046\165\047\153\050\160\051" +
    "\154\075\uff8c\077\151\100\167\101\uff8c\102\uff8c\103\uff8c" +
    "\104\uff8c\107\164\110\171\111\166\112\162\115\uff8c\116" +
    "\uff8c\117\uff8c\120\uff8c\121\uff8c\122\uff8c\123\uff8c\124\uff8c" +
    "\125\uff8c\001\002\000\066\044\150\045\152\046\165\047" +
    "\153\050\160\051\154\075\uff88\077\uff88\100\uff88\101\uff88" +
    "\102\uff88\103\uff88\104\uff88\107\uff88\110\uff88\111\uff88\112" +
    "\uff88\115\uff88\116\uff88\117\uff88\120\uff88\121\uff88\122\uff88" +
    "\123\uff88\124\uff88\125\uff88\001\002\000\066\044\150\045" +
    "\152\046\165\047\153\050\160\051\154\075\uff8e\077\151" +
    "\100\167\101\uff8e\102\uff8e\103\uff8e\104\uff8e\107\164\110" +
    "\171\111\166\112\162\115\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\121\uff8e\122\uff8e\123\uff8e\124\uff8e\125\uff8e\001\002\000" +
    "\066\044\150\045\152\046\165\047\153\050\uff92\051\uff92" +
    "\075\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\104" +
    "\uff92\107\uff92\110\uff92\111\uff92\112\uff92\115\uff92\116\uff92" +
    "\117\uff92\120\uff92\121\uff92\122\uff92\123\uff92\124\uff92\125" +
    "\uff92\001\002\000\054\044\150\045\152\046\165\047\153" +
    "\050\160\051\154\077\151\100\167\101\161\102\163\103" +
    "\173\104\147\107\164\110\171\111\166\112\162\115\157" +
    "\116\210\117\155\121\156\123\170\001\002\000\066\044" +
    "\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\075\uff85" +
    "\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\107" +
    "\uff85\110\uff85\111\uff85\112\uff85\115\uff85\116\uff85\117\uff85" +
    "\120\uff85\121\uff85\122\uff85\123\uff85\124\uff85\125\uff85\001" +
    "\002\000\066\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65" +
    "\051\uff65\075\uff65\077\uff65\100\uff65\101\uff65\102\uff65\103" +
    "\uff65\104\uff65\107\uff65\110\uff65\111\uff65\112\uff65\115\uff65" +
    "\116\uff65\117\uff65\120\uff65\121\uff65\122\uff65\123\uff65\124" +
    "\uff65\125\uff65\001\002\000\056\044\150\045\152\046\165" +
    "\047\153\050\160\051\154\075\213\077\151\100\167\101" +
    "\161\102\163\103\173\104\147\107\164\110\171\111\166" +
    "\112\162\115\157\117\155\121\156\122\uff63\123\170\001" +
    "\002\000\042\020\117\052\100\053\112\054\104\055\102" +
    "\057\115\100\113\105\110\106\077\114\116\117\103\121" +
    "\101\126\106\127\010\130\111\131\105\001\002\000\004" +
    "\122\215\001\002\000\066\044\uff66\045\uff66\046\uff66\047" +
    "\uff66\050\uff66\051\uff66\075\uff66\077\uff66\100\uff66\101\uff66" +
    "\102\uff66\103\uff66\104\uff66\107\uff66\110\uff66\111\uff66\112" +
    "\uff66\115\uff66\116\uff66\117\uff66\120\uff66\121\uff66\122\uff66" +
    "\123\uff66\124\uff66\125\uff66\001\002\000\060\044\150\045" +
    "\152\046\165\047\153\050\160\051\154\075\213\077\151" +
    "\100\167\101\161\102\163\103\173\104\147\107\164\110" +
    "\171\111\166\112\162\115\157\117\155\120\uff63\121\156" +
    "\122\uff63\123\170\001\002\000\006\120\uff64\122\uff64\001" +
    "\002\000\054\044\150\045\152\046\165\047\153\050\160" +
    "\051\154\077\151\100\167\101\161\102\163\103\173\104" +
    "\147\107\164\110\171\111\166\112\162\115\157\117\155" +
    "\120\221\121\156\123\170\001\002\000\066\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\075\uff86\077\uff86" +
    "\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\107\uff86\110" +
    "\uff86\111\uff86\112\uff86\115\uff86\116\uff86\117\uff86\120\uff86" +
    "\121\uff86\122\uff86\123\uff86\124\uff86\125\uff86\001\002\000" +
    "\066\044\150\045\152\046\165\047\153\050\uff91\051\uff91" +
    "\075\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104" +
    "\uff91\107\uff91\110\uff91\111\uff91\112\uff91\115\uff91\116\uff91" +
    "\117\uff91\120\uff91\121\uff91\122\uff91\123\uff91\124\uff91\125" +
    "\uff91\001\002\000\066\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\075\uff93\077\uff93\100\uff93\101\uff93\102" +
    "\uff93\103\uff93\104\uff93\107\uff93\110\uff93\111\uff93\112\uff93" +
    "\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93\122\uff93\123" +
    "\uff93\124\uff93\125\uff93\001\002\000\066\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\075\uff95\077\uff95\100" +
    "\uff95\101\uff95\102\uff95\103\uff95\104\uff95\107\uff95\110\uff95" +
    "\111\uff95\112\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121" +
    "\uff95\122\uff95\123\uff95\124\uff95\125\uff95\001\002\000\066" +
    "\044\150\045\152\046\165\047\153\050\160\051\154\075" +
    "\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90" +
    "\107\164\110\171\111\166\112\162\115\uff90\116\uff90\117" +
    "\uff90\120\uff90\121\uff90\122\uff90\123\uff90\124\uff90\125\uff90" +
    "\001\002\000\066\044\uff96\045\152\046\uff96\047\153\050" +
    "\uff96\051\uff96\075\uff96\077\uff96\100\uff96\101\uff96\102\uff96" +
    "\103\uff96\104\uff96\107\uff96\110\uff96\111\uff96\112\uff96\115" +
    "\uff96\116\uff96\117\uff96\120\uff96\121\uff96\122\uff96\123\uff96" +
    "\124\uff96\125\uff96\001\002\000\066\044\150\045\152\046" +
    "\165\047\153\050\160\051\154\075\uff8b\077\151\100\167" +
    "\101\uff8b\102\uff8b\103\uff8b\104\uff8b\107\164\110\171\111" +
    "\166\112\162\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b" +
    "\122\uff8b\123\uff8b\124\uff8b\125\uff8b\001\002\000\010\115" +
    "\uffc2\121\uffc2\123\135\001\002\000\004\115\232\001\002" +
    "\000\044\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\116\233\117\103" +
    "\121\101\126\106\127\010\130\111\131\105\001\002\000" +
    "\006\115\uffd6\117\236\001\002\000\054\044\150\045\152" +
    "\046\165\047\153\050\160\051\154\077\151\100\167\101" +
    "\161\102\163\103\173\104\147\107\164\110\171\111\166" +
    "\112\162\115\157\116\235\117\155\121\156\123\170\001" +
    "\002\000\066\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c" +
    "\051\uff6c\075\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\103" +
    "\uff6c\104\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\115\uff6c" +
    "\116\uff6c\117\uff6c\120\uff6c\121\uff6c\122\uff6c\123\uff6c\124" +
    "\uff6c\125\uff6c\001\002\000\044\020\117\052\100\053\112" +
    "\054\104\055\102\057\115\100\113\105\110\106\077\114" +
    "\116\117\103\120\240\121\101\126\106\127\010\130\111" +
    "\131\105\001\002\000\066\044\uff69\045\uff69\046\uff69\047" +
    "\uff69\050\uff69\051\uff69\075\uff69\077\uff69\100\uff69\101\uff69" +
    "\102\uff69\103\uff69\104\uff69\107\uff69\110\uff69\111\uff69\112" +
    "\uff69\115\uff69\116\uff69\117\uff69\120\uff69\121\uff69\122\uff69" +
    "\123\uff69\124\uff69\125\uff69\001\002\000\066\044\uff67\045" +
    "\uff67\046\uff67\047\uff67\050\uff67\051\uff67\075\uff67\077\uff67" +
    "\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\107\uff67\110" +
    "\uff67\111\uff67\112\uff67\115\uff67\116\uff67\117\uff67\120\uff67" +
    "\121\uff67\122\uff67\123\uff67\124\uff67\125\uff67\001\002\000" +
    "\056\044\150\045\152\046\165\047\153\050\160\051\154" +
    "\075\213\077\151\100\167\101\161\102\163\103\173\104" +
    "\147\107\164\110\171\111\166\112\162\115\157\117\155" +
    "\120\uff63\121\156\123\170\001\002\000\004\120\243\001" +
    "\002\000\066\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68" +
    "\051\uff68\075\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103" +
    "\uff68\104\uff68\107\uff68\110\uff68\111\uff68\112\uff68\115\uff68" +
    "\116\uff68\117\uff68\120\uff68\121\uff68\122\uff68\123\uff68\124" +
    "\uff68\125\uff68\001\002\000\006\115\uffd0\121\156\001\002" +
    "\000\066\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051" +
    "\uff6f\075\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f" +
    "\104\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f\115\uff6f\116" +
    "\uff6f\117\uff6f\120\uff6f\121\uff6f\122\uff6f\123\uff6f\124\uff6f" +
    "\125\uff6f\001\002\000\066\044\150\045\152\046\165\047" +
    "\153\050\160\051\154\075\uff6d\077\uff6d\100\uff6d\101\uff6d" +
    "\102\uff6d\103\uff6d\104\uff6d\107\164\110\171\111\166\112" +
    "\162\115\uff6d\116\uff6d\117\uff6d\120\uff6d\121\uff6d\122\uff6d" +
    "\123\uff6d\124\uff6d\125\uff6d\001\002\000\066\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\075\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\107\uffc2\110" +
    "\uffc2\111\uffc2\112\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2" +
    "\121\uffc2\122\uffc2\123\135\124\uffc2\125\uffc2\001\002\000" +
    "\066\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\075\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\115\uffc2\116\uffc2" +
    "\117\uffc2\120\uffc2\121\uffc2\122\uffc2\123\135\124\uffc2\125" +
    "\uffc2\001\002\000\066\044\uff7a\045\uff7a\046\uff7a\047\uff7a" +
    "\050\uff7a\051\uff7a\075\uff7a\077\uff7a\100\uff7a\101\uff7a\102" +
    "\uff7a\103\uff7a\104\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a" +
    "\115\uff7a\116\uff7a\117\uff7a\120\uff7a\121\uff7a\122\uff7a\123" +
    "\uff7a\124\uff7a\125\uff7a\001\002\000\066\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\075\uff7b\077\uff7b\100" +
    "\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\107\uff7b\110\uff7b" +
    "\111\uff7b\112\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\121" +
    "\uff7b\122\uff7b\123\uff7b\124\uff7b\125\uff7b\001\002\000\006" +
    "\105\255\106\254\001\002\000\066\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\075\uff78\077\uff78\100\uff78" +
    "\101\uff78\102\uff78\103\uff78\104\uff78\107\uff78\110\uff78\111" +
    "\uff78\112\uff78\115\uff78\116\uff78\117\uff78\120\uff78\121\uff78" +
    "\122\uff78\123\uff78\124\uff78\125\uff78\001\002\000\066\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\075\uff7c" +
    "\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c\104\uff7c\107" +
    "\uff7c\110\uff7c\111\uff7c\112\uff7c\115\uff7c\116\uff7c\117\uff7c" +
    "\120\uff7c\121\uff7c\122\uff7c\123\uff7c\124\uff7c\125\uff7c\001" +
    "\002\000\006\075\257\115\070\001\002\000\026\020\022" +
    "\021\047\022\024\023\056\024\040\025\060\026\063\027" +
    "\021\117\053\127\010\001\002\000\006\115\070\120\261" +
    "\001\002\000\066\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\051\uff6b\075\uff6b\077\uff6b\100\uff6b\101\uff6b\102\uff6b" +
    "\103\uff6b\104\uff6b\107\uff6b\110\uff6b\111\uff6b\112\uff6b\115" +
    "\uff6b\116\uff6b\117\uff6b\120\uff6b\121\uff6b\122\uff6b\123\uff6b" +
    "\124\uff6b\125\uff6b\001\002\000\054\044\150\045\152\046" +
    "\165\047\153\050\160\051\154\077\151\100\167\101\161" +
    "\102\163\103\173\104\147\107\164\110\171\111\166\112" +
    "\162\115\157\117\155\121\156\122\263\123\170\001\002" +
    "\000\066\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051" +
    "\uff81\075\uff81\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81" +
    "\104\uff81\107\uff81\110\uff81\111\uff81\112\uff81\115\uff81\116" +
    "\uff81\117\uff81\120\uff81\121\uff81\122\uff81\123\uff81\124\uff81" +
    "\125\uff81\001\002\000\066\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\075\uffc2\077\uffc2\100\uffc2\101\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\107\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2" +
    "\123\135\124\uffc2\125\uffc2\001\002\000\066\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\075\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\107\uffc2\110" +
    "\uffc2\111\uffc2\112\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2" +
    "\121\uffc2\122\uffc2\123\135\124\uffc2\125\uffc2\001\002\000" +
    "\066\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76" +
    "\075\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103\uff76\104" +
    "\uff76\107\uff76\110\uff76\111\uff76\112\uff76\115\uff76\116\uff76" +
    "\117\uff76\120\uff76\121\uff76\122\uff76\123\uff76\124\uff76\125" +
    "\uff76\001\002\000\066\044\uff77\045\uff77\046\uff77\047\uff77" +
    "\050\uff77\051\uff77\075\uff77\077\uff77\100\uff77\101\uff77\102" +
    "\uff77\103\uff77\104\uff77\107\uff77\110\uff77\111\uff77\112\uff77" +
    "\115\uff77\116\uff77\117\uff77\120\uff77\121\uff77\122\uff77\123" +
    "\uff77\124\uff77\125\uff77\001\002\000\074\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\067\271\075\uff84\077" +
    "\uff84\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105\273" +
    "\106\272\107\uff84\110\uff84\111\uff84\112\uff84\115\uff84\116" +
    "\uff84\117\uff84\120\uff84\121\uff84\122\uff84\123\uff84\124\uff84" +
    "\125\uff84\001\002\000\026\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\117\053\127\010" +
    "\001\002\000\066\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\051\uff79\075\uff79\077\uff79\100\uff79\101\uff79\102\uff79" +
    "\103\uff79\104\uff79\107\uff79\110\uff79\111\uff79\112\uff79\115" +
    "\uff79\116\uff79\117\uff79\120\uff79\121\uff79\122\uff79\123\uff79" +
    "\124\uff79\125\uff79\001\002\000\066\044\uff7d\045\uff7d\046" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\075\uff7d\077\uff7d\100\uff7d" +
    "\101\uff7d\102\uff7d\103\uff7d\104\uff7d\107\uff7d\110\uff7d\111" +
    "\uff7d\112\uff7d\115\uff7d\116\uff7d\117\uff7d\120\uff7d\121\uff7d" +
    "\122\uff7d\123\uff7d\124\uff7d\125\uff7d\001\002\000\066\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\075\uffc5" +
    "\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\107" +
    "\uffc5\110\uffc5\111\uffc5\112\uffc5\115\070\116\uffc5\117\uffc5" +
    "\120\uffc5\121\uffc5\122\uffc5\123\uffc5\124\uffc5\125\uffc5\001" +
    "\002\000\004\005\276\001\002\000\004\035\277\001\002" +
    "\000\042\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\117\103\121\101" +
    "\126\106\127\010\130\111\131\105\001\002\000\054\044" +
    "\150\045\152\046\165\047\153\050\160\051\154\077\151" +
    "\100\167\101\161\102\163\103\173\104\147\107\164\110" +
    "\171\111\166\112\162\115\157\117\155\121\156\123\170" +
    "\124\301\001\002\000\114\005\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7\054\uffb7\056\uffb7" +
    "\060\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\105\uffb7\106\uffb7\117\uffb7" +
    "\127\uffb7\001\002\000\042\020\117\052\100\053\112\054" +
    "\104\055\102\057\115\100\113\105\110\106\077\114\116" +
    "\117\103\121\101\126\106\127\010\130\111\131\105\001" +
    "\002\000\054\044\150\045\152\046\165\047\153\050\160" +
    "\051\154\077\151\100\167\101\161\102\163\103\173\104" +
    "\147\107\164\110\171\111\166\112\162\115\157\117\155" +
    "\121\156\122\304\123\170\001\002\000\006\122\uffb1\124" +
    "\uffb1\001\002\000\056\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\051\uff83\077\uff83\100\uff83\101\uff83\102\uff83\103" +
    "\uff83\104\uff83\107\uff83\110\uff83\111\uff83\112\uff83\115\uff83" +
    "\117\uff83\121\uff83\122\uffa0\123\uff83\124\uffa0\001\002\000" +
    "\052\044\150\045\152\046\165\047\153\050\160\051\154" +
    "\077\151\100\167\101\161\102\163\103\173\104\147\107" +
    "\164\110\171\111\166\112\162\115\157\117\155\121\156" +
    "\123\170\001\002\000\114\005\uffc0\016\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0\054\uffc0\056\uffc0" +
    "\060\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\105\uffc0\106\uffc0\117\uffc0" +
    "\127\uffc0\001\002\000\044\002\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\117\uffeb\127" +
    "\uffeb\001\002\000\044\002\ufffc\010\317\011\315\012\324" +
    "\013\313\015\325\017\321\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\117\053\127\010" +
    "\001\002\000\046\002\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\117\ufff2\127" +
    "\ufff2\001\002\000\004\127\010\001\002\000\046\002\uffec" +
    "\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\117\uffec\127\uffec\001\002\000\036\005" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\117\ufff4\127" +
    "\ufff4\001\002\000\006\115\070\127\010\001\002\000\036" +
    "\005\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\117\ufff4" +
    "\127\ufff4\001\002\000\046\002\uffed\005\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\015\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\117" +
    "\uffed\127\uffed\001\002\000\030\013\344\020\022\021\047" +
    "\022\024\023\056\024\040\025\060\026\063\027\021\117" +
    "\053\127\010\001\002\000\046\002\uffee\005\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\015\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\117\uffee\127\uffee\001\002\000\046\002\uffef\005\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\117\uffef\127\uffef\001\002\000\036\005\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\117\ufff4\127\ufff4\001\002" +
    "\000\004\121\121\001\002\000\046\002\ufff0\005\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\117\ufff0\127\ufff0\001\002\000\046\002\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\117\ufff1\127\ufff1\001\002\000\046\002\ufff3\005" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\117\ufff3\127\ufff3\001\002\000\004\125\332" +
    "\001\002\000\104\005\ufff9\016\043\020\022\021\047\022" +
    "\024\023\056\024\040\025\060\026\063\027\021\030\036" +
    "\032\033\034\055\035\054\036\026\037\065\040\034\041" +
    "\051\043\042\054\037\056\030\060\035\062\064\064\046" +
    "\065\023\066\062\070\045\073\032\074\061\105\020\106" +
    "\027\117\053\127\010\001\002\000\004\005\334\001\002" +
    "\000\046\002\uffe3\005\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\117\uffe3\127\uffe3\001" +
    "\002\000\036\005\337\013\313\015\325\017\321\020\022" +
    "\021\047\022\024\023\056\024\040\025\060\026\063\027" +
    "\021\117\053\127\010\001\002\000\036\005\ufff7\013\ufff7" +
    "\015\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\117\ufff7\127\ufff7\001\002" +
    "\000\046\002\uffe8\005\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\117\uffe8\127\uffe8\001" +
    "\002\000\036\005\ufff6\013\ufff6\015\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\117\ufff6\127\ufff6\001\002\000\036\005\ufff5\013\ufff5" +
    "\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\117\ufff5\127\ufff5\001\002" +
    "\000\036\005\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\117\ufff8\127\ufff8\001\002\000\006\115\070\127\010\001" +
    "\002\000\004\127\010\001\002\000\006\014\346\125\347" +
    "\001\002\000\004\127\010\001\002\000\044\005\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\117\uffeb\127\uffeb\001\002\000\044\005\351\010\317" +
    "\011\315\012\324\013\313\015\325\017\321\020\022\021" +
    "\047\022\024\023\056\024\040\025\060\026\063\027\021" +
    "\117\053\127\010\001\002\000\046\002\uffe4\005\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\117\uffe4\127\uffe4\001\002\000\004\125\353\001\002" +
    "\000\044\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\117\uffeb\127\uffeb\001\002\000" +
    "\044\005\355\010\317\011\315\012\324\013\313\015\325" +
    "\017\321\020\022\021\047\022\024\023\056\024\040\025" +
    "\060\026\063\027\021\117\053\127\010\001\002\000\046" +
    "\002\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\117\uffe5\127\uffe5\001\002\000" +
    "\010\113\360\121\121\124\357\001\002\000\046\002\uffde" +
    "\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\117\uffde\127\uffde\001\002\000\026\020" +
    "\117\052\100\053\112\055\102\057\115\100\113\117\103" +
    "\126\106\130\111\131\105\001\002\000\004\125\362\001" +
    "\002\000\104\005\ufff9\016\043\020\022\021\047\022\024" +
    "\023\056\024\040\025\060\026\063\027\021\030\036\032" +
    "\033\034\055\035\054\036\026\037\065\040\034\041\051" +
    "\043\042\054\037\056\030\060\035\062\064\064\046\065" +
    "\023\066\062\070\045\073\032\074\061\105\020\106\027" +
    "\117\053\127\010\001\002\000\004\005\364\001\002\000" +
    "\046\002\uffe1\005\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\117\uffe1\127\uffe1\001\002" +
    "\000\004\124\366\001\002\000\046\002\uffdd\005\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\117\uffdd\127\uffdd\001\002\000\036\005\370\013\313" +
    "\015\325\017\321\020\022\021\047\022\024\023\056\024" +
    "\040\025\060\026\063\027\021\117\053\127\010\001\002" +
    "\000\046\002\uffea\005\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\117\uffea\127\uffea\001" +
    "\002\000\010\113\373\121\121\124\372\001\002\000\046" +
    "\002\uffe0\005\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\117\uffe0\127\uffe0\001\002\000" +
    "\026\020\117\052\100\053\112\055\102\057\115\100\113" +
    "\117\103\126\106\130\111\131\105\001\002\000\004\125" +
    "\375\001\002\000\104\005\ufff9\016\043\020\022\021\047" +
    "\022\024\023\056\024\040\025\060\026\063\027\021\030" +
    "\036\032\033\034\055\035\054\036\026\037\065\040\034" +
    "\041\051\043\042\054\037\056\030\060\035\062\064\064" +
    "\046\065\023\066\062\070\045\073\032\074\061\105\020" +
    "\106\027\117\053\127\010\001\002\000\004\005\377\001" +
    "\002\000\046\002\uffe2\005\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\117\uffe2\127\uffe2" +
    "\001\002\000\004\124\u0101\001\002\000\046\002\uffdf\005" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\117\uffdf\127\uffdf\001\002\000\036\005\u0103" +
    "\013\313\015\325\017\321\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\117\053\127\010" +
    "\001\002\000\046\002\uffe9\005\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\117\uffe9\127" +
    "\uffe9\001\002\000\006\014\u0105\125\u0106\001\002\000\004" +
    "\127\010\001\002\000\044\005\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\117\uffeb\127" +
    "\uffeb\001\002\000\044\005\u0108\010\317\011\315\012\324" +
    "\013\313\015\325\017\321\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\117\053\127\010" +
    "\001\002\000\046\002\uffe6\005\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\117\uffe6\127" +
    "\uffe6\001\002\000\004\125\u010a\001\002\000\044\005\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\117\uffeb\127\uffeb\001\002\000\044\005\u010c\010" +
    "\317\011\315\012\324\013\313\015\325\017\321\020\022" +
    "\021\047\022\024\023\056\024\040\025\060\026\063\027" +
    "\021\117\053\127\010\001\002\000\046\002\uffe7\005\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\117\uffe7\127\uffe7\001\002\000\054\044\150\045" +
    "\152\046\165\047\153\050\160\051\154\077\151\100\167" +
    "\101\161\102\163\103\173\104\147\107\164\110\171\111" +
    "\166\112\162\115\157\117\155\121\156\123\170\125\u010e" +
    "\001\002\000\104\005\ufff9\016\043\020\022\021\047\022" +
    "\024\023\056\024\040\025\060\026\063\027\021\030\036" +
    "\032\033\034\055\035\054\036\026\037\065\040\034\041" +
    "\051\043\042\054\037\056\030\060\035\062\064\064\046" +
    "\065\023\066\062\070\045\073\032\074\061\105\020\106" +
    "\027\117\053\127\010\001\002\000\004\005\u0110\001\002" +
    "\000\114\005\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\043\uffbc\054\uffbc\056\uffbc\060\uffbc\062\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\105\uffbc\106\uffbc\117\uffbc\127\uffbc\001\002" +
    "\000\054\044\150\045\152\046\165\047\153\050\160\051" +
    "\154\077\151\100\167\101\161\102\163\103\173\104\147" +
    "\107\164\110\171\111\166\112\162\115\157\117\155\121" +
    "\156\123\170\125\u0112\001\002\000\104\005\ufff9\016\043" +
    "\020\022\021\047\022\024\023\056\024\040\025\060\026" +
    "\063\027\021\030\036\032\033\034\055\035\054\036\026" +
    "\037\065\040\034\041\051\043\042\054\037\056\030\060" +
    "\035\062\064\064\046\065\023\066\062\070\045\073\032" +
    "\074\061\105\020\106\027\117\053\127\010\001\002\000" +
    "\004\005\u0114\001\002\000\114\005\uffbb\016\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\054\uffbb\056" +
    "\uffbb\060\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\105\uffbb\106\uffbb\117" +
    "\uffbb\127\uffbb\001\002\000\006\075\u0116\115\070\001\002" +
    "\000\026\020\022\021\047\022\024\023\056\024\040\025" +
    "\060\026\063\027\021\117\053\127\010\001\002\000\006" +
    "\115\070\120\u0118\001\002\000\072\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\075\uffd1\076\uffd1\077\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\107\uffd1\110" +
    "\uffd1\111\uffd1\112\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1" +
    "\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\127\uffd1\001" +
    "\002\000\114\005\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\043\uffb6\054\uffb6\056\uffb6\060\uffb6\062" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\070\uffb6\071\uffb6\072\uffb6" +
    "\073\uffb6\074\uffb6\105\uffb6\106\uffb6\117\uffb6\127\uffb6\001" +
    "\002\000\006\115\070\127\010\001\002\000\004\042\u011c" +
    "\001\002\000\004\127\010\001\002\000\006\123\135\125" +
    "\uffc2\001\002\000\004\125\u011f\001\002\000\104\005\ufff9" +
    "\016\043\020\022\021\047\022\024\023\056\024\040\025" +
    "\060\026\063\027\021\030\036\032\033\034\055\035\054" +
    "\036\026\037\065\040\034\041\051\043\042\054\037\056" +
    "\030\060\035\062\064\064\046\065\023\066\062\070\045" +
    "\073\032\074\061\105\020\106\027\117\053\127\010\001" +
    "\002\000\004\005\u0121\001\002\000\114\005\uffb8\016\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\054" +
    "\uffb8\056\uffb8\060\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\105\uffb8\106" +
    "\uffb8\117\uffb8\127\uffb8\001\002\000\110\005\ufff9\016\043" +
    "\020\022\021\047\022\024\023\056\024\040\025\060\026" +
    "\063\027\021\030\036\032\033\034\055\035\054\036\026" +
    "\037\065\040\034\041\051\043\042\054\037\056\030\060" +
    "\035\062\064\064\046\065\023\066\062\070\045\071\ufff9" +
    "\072\ufff9\073\032\074\061\105\020\106\027\117\053\127" +
    "\010\001\002\000\010\005\uff9a\071\u0124\072\uff9a\001\002" +
    "\000\004\127\010\001\002\000\006\005\u0127\072\u0126\001" +
    "\002\000\004\125\u0128\001\002\000\114\005\uff9d\016\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\043\uff9d\054" +
    "\uff9d\056\uff9d\060\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\105\uff9d\106" +
    "\uff9d\117\uff9d\127\uff9d\001\002\000\104\005\ufff9\016\043" +
    "\020\022\021\047\022\024\023\056\024\040\025\060\026" +
    "\063\027\021\030\036\032\033\034\055\035\054\036\026" +
    "\037\065\040\034\041\051\043\042\054\037\056\030\060" +
    "\035\062\064\064\046\065\023\066\062\070\045\073\032" +
    "\074\061\105\020\106\027\117\053\127\010\001\002\000" +
    "\004\005\u012a\001\002\000\114\005\uff9c\016\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\043\uff9c\054\uff9c\056" +
    "\uff9c\060\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\105\uff9c\106\uff9c\117" +
    "\uff9c\127\uff9c\001\002\000\006\123\135\127\uffc2\001\002" +
    "\000\004\127\010\001\002\000\004\125\u012e\001\002\000" +
    "\110\005\ufff9\016\043\020\022\021\047\022\024\023\056" +
    "\024\040\025\060\026\063\027\021\030\036\032\033\034" +
    "\055\035\054\036\026\037\065\040\034\041\051\043\042" +
    "\054\037\056\030\060\035\062\064\064\046\065\023\066" +
    "\062\070\045\071\ufff9\072\ufff9\073\032\074\061\105\020" +
    "\106\027\117\053\127\010\001\002\000\010\005\uff9a\071" +
    "\u0124\072\uff9a\001\002\000\006\005\uff9b\072\uff9b\001\002" +
    "\000\006\122\uff9f\124\uff9f\001\002\000\056\044\150\045" +
    "\152\046\165\047\153\050\160\051\154\077\151\100\167" +
    "\101\161\102\163\103\173\104\147\107\164\110\171\111" +
    "\166\112\162\115\157\117\155\121\156\122\uffac\123\170" +
    "\124\uffac\001\002\000\014\005\ufffa\031\ufffa\033\ufffa\071" +
    "\ufffa\072\ufffa\001\002\000\006\105\u0136\106\u0135\001\002" +
    "\000\006\122\uffa3\124\uffa3\001\002\000\006\122\uffa7\124" +
    "\uffa7\001\002\000\054\044\150\045\152\046\165\047\153" +
    "\050\160\051\154\077\151\100\167\101\161\102\163\103" +
    "\173\104\147\107\164\110\171\111\166\112\162\115\157" +
    "\117\155\121\156\123\170\125\u0138\001\002\000\110\005" +
    "\ufff9\016\043\020\022\021\047\022\024\023\056\024\040" +
    "\025\060\026\063\027\021\030\036\031\ufff9\032\033\033" +
    "\ufff9\034\055\035\054\036\026\037\065\040\034\041\051" +
    "\043\042\054\037\056\030\060\035\062\064\064\046\065" +
    "\023\066\062\070\045\073\032\074\061\105\020\106\027" +
    "\117\053\127\010\001\002\000\010\005\uff98\031\uff98\033" +
    "\uff98\001\002\000\010\005\u013d\031\u013c\033\u013b\001\002" +
    "\000\042\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\117\103\121\101" +
    "\126\106\127\010\130\111\131\105\001\002\000\004\125" +
    "\u0140\001\002\000\114\005\uffbd\016\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\043\uffbd\054\uffbd\056\uffbd\060" +
    "\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\105\uffbd\106\uffbd\117\uffbd\127" +
    "\uffbd\001\002\000\004\005\u013f\001\002\000\114\005\uffbe" +
    "\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\043" +
    "\uffbe\054\uffbe\056\uffbe\060\uffbe\062\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\105" +
    "\uffbe\106\uffbe\117\uffbe\127\uffbe\001\002\000\104\005\ufff9" +
    "\016\043\020\022\021\047\022\024\023\056\024\040\025" +
    "\060\026\063\027\021\030\036\032\033\034\055\035\054" +
    "\036\026\037\065\040\034\041\051\043\042\054\037\056" +
    "\030\060\035\062\064\064\046\065\023\066\062\070\045" +
    "\073\032\074\061\105\020\106\027\117\053\127\010\001" +
    "\002\000\004\005\uff97\001\002\000\054\044\150\045\152" +
    "\046\165\047\153\050\160\051\154\077\151\100\167\101" +
    "\161\102\163\103\173\104\147\107\164\110\171\111\166" +
    "\112\162\115\157\117\155\121\156\123\170\125\u0143\001" +
    "\002\000\110\005\ufff9\016\043\020\022\021\047\022\024" +
    "\023\056\024\040\025\060\026\063\027\021\030\036\031" +
    "\ufff9\032\033\033\ufff9\034\055\035\054\036\026\037\065" +
    "\040\034\041\051\043\042\054\037\056\030\060\035\062" +
    "\064\064\046\065\023\066\062\070\045\073\032\074\061" +
    "\105\020\106\027\117\053\127\010\001\002\000\010\005" +
    "\uff99\031\uff99\033\uff99\001\002\000\042\020\117\052\100" +
    "\053\112\054\104\055\102\057\115\100\113\105\110\106" +
    "\077\114\116\117\103\121\101\126\106\127\010\130\111" +
    "\131\105\001\002\000\054\044\150\045\152\046\165\047" +
    "\153\050\160\051\154\077\151\100\167\101\161\102\163" +
    "\103\173\104\147\107\164\110\171\111\166\112\162\115" +
    "\157\117\155\121\156\122\u0147\123\170\001\002\000\006" +
    "\122\uffab\124\uffab\001\002\000\054\044\150\045\152\046" +
    "\165\047\153\050\160\051\154\077\151\100\167\101\161" +
    "\102\163\103\173\104\147\107\164\110\171\111\166\112" +
    "\162\115\157\117\155\121\156\123\170\125\u0149\001\002" +
    "\000\104\005\ufff9\016\043\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\030\036\032\033" +
    "\034\055\035\054\036\026\037\065\040\034\041\051\043" +
    "\042\054\037\056\030\060\035\062\064\064\046\065\023" +
    "\066\062\070\045\073\032\074\061\105\020\106\027\117" +
    "\053\127\010\001\002\000\004\005\u014b\001\002\000\114" +
    "\005\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\043\uffba\054\uffba\056\uffba\060\uffba\062\uffba\064\uffba" +
    "\065\uffba\066\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\105\uffba\106\uffba\117\uffba\127\uffba\001\002\000\004" +
    "\005\u014d\001\002\000\114\005\uffbf\016\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\054\uffbf\056\uffbf" +
    "\060\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\105\uffbf\106\uffbf\117\uffbf" +
    "\127\uffbf\001\002\000\056\044\150\045\152\046\165\047" +
    "\153\050\160\051\154\077\151\100\167\101\161\102\163" +
    "\103\173\104\147\107\164\110\171\111\166\112\162\115" +
    "\157\117\155\121\156\122\uff9e\123\170\124\uff9e\001\002" +
    "\000\016\105\u0153\106\u0151\113\u0152\115\u0154\117\u0150\127" +
    "\uffd0\001\002\000\042\020\117\052\100\053\112\054\104" +
    "\055\102\057\115\100\113\105\110\106\077\114\116\117" +
    "\103\121\101\126\106\127\010\130\111\131\105\001\002" +
    "\000\006\122\uffa4\124\uffa4\001\002\000\042\020\117\052" +
    "\100\053\112\054\104\055\102\057\115\100\113\105\110" +
    "\106\077\114\116\117\103\121\101\126\106\127\010\130" +
    "\111\131\105\001\002\000\006\122\uffa8\124\uffa8\001\002" +
    "\000\042\020\117\052\100\053\112\054\104\055\102\057" +
    "\115\100\113\105\110\106\077\114\116\117\103\121\101" +
    "\126\106\127\010\130\111\131\105\001\002\000\054\044" +
    "\150\045\152\046\165\047\153\050\160\051\154\077\151" +
    "\100\167\101\161\102\163\103\173\104\147\107\164\110" +
    "\171\111\166\112\162\115\157\116\u0156\117\155\121\156" +
    "\123\170\001\002\000\004\113\u0157\001\002\000\042\020" +
    "\117\052\100\053\112\054\104\055\102\057\115\100\113" +
    "\105\110\106\077\114\116\117\103\121\101\126\106\127" +
    "\010\130\111\131\105\001\002\000\056\044\150\045\152" +
    "\046\165\047\153\050\160\051\154\077\151\100\167\101" +
    "\161\102\163\103\173\104\147\107\164\110\171\111\166" +
    "\112\162\115\157\117\155\121\156\122\uffad\123\170\124" +
    "\uffad\001\002\000\056\044\150\045\152\046\165\047\153" +
    "\050\160\051\154\077\151\100\167\101\161\102\163\103" +
    "\173\104\147\107\164\110\171\111\166\112\162\115\157" +
    "\117\155\121\156\122\uffaf\123\170\124\uffaf\001\002\000" +
    "\054\044\150\045\152\046\165\047\153\050\160\051\154" +
    "\077\151\100\167\101\161\102\163\103\173\104\147\107" +
    "\164\110\171\111\166\112\162\115\157\117\155\120\u015b" +
    "\121\156\123\170\001\002\000\004\113\u015c\001\002\000" +
    "\042\020\117\052\100\053\112\054\104\055\102\057\115" +
    "\100\113\105\110\106\077\114\116\117\103\121\101\126" +
    "\106\127\010\130\111\131\105\001\002\000\056\044\150" +
    "\045\152\046\165\047\153\050\160\051\154\077\151\100" +
    "\167\101\161\102\163\103\173\104\147\107\164\110\171" +
    "\111\166\112\162\115\157\117\155\121\156\122\uffae\123" +
    "\170\124\uffae\001\002\000\056\044\150\045\152\046\165" +
    "\047\153\050\160\051\154\077\151\100\167\101\161\102" +
    "\163\103\173\104\147\107\164\110\171\111\166\112\162" +
    "\115\157\117\155\121\156\123\170\124\u015f\125\u0160\001" +
    "\002\000\114\005\uffb3\016\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\043\uffb3\054\uffb3\056\uffb3\060\uffb3\062" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\105\uffb3\106\uffb3\117\uffb3\127\uffb3\001" +
    "\002\000\042\020\117\052\100\053\112\054\104\055\102" +
    "\057\115\100\113\105\110\106\077\114\116\117\103\121" +
    "\101\126\106\127\010\130\111\131\105\001\002\000\054" +
    "\044\150\045\152\046\165\047\153\050\160\051\154\077" +
    "\151\100\167\101\161\102\163\103\173\104\147\107\164" +
    "\110\171\111\166\112\162\115\157\117\155\121\156\123" +
    "\170\124\u0162\001\002\000\114\005\uffb2\016\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\054\uffb2\056" +
    "\uffb2\060\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\105\uffb2\106\uffb2\117" +
    "\uffb2\127\uffb2\001\002\000\010\122\uffc2\123\135\124\uffc2" +
    "\001\002\000\010\122\uffc2\123\135\124\uffc2\001\002\000" +
    "\006\122\uffa1\124\uffa1\001\002\000\006\122\uffa2\124\uffa2" +
    "\001\002\000\054\016\043\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\043\042\054\037" +
    "\060\035\062\064\064\046\065\023\066\062\073\032\105" +
    "\020\106\027\117\053\127\010\001\002\000\004\124\u016b" +
    "\001\002\000\006\115\070\127\010\001\002\000\004\113" +
    "\073\001\002\000\042\020\117\052\100\053\112\054\104" +
    "\055\102\057\115\100\113\105\110\106\077\114\116\117" +
    "\103\121\101\126\106\127\010\130\111\131\105\001\002" +
    "\000\054\044\150\045\152\046\165\047\153\050\160\051" +
    "\154\077\151\100\167\101\161\102\163\103\173\104\147" +
    "\107\164\110\171\111\166\112\162\115\157\117\155\121" +
    "\156\123\170\124\u016d\001\002\000\054\016\043\020\022" +
    "\021\047\022\024\023\056\024\040\025\060\026\063\027" +
    "\021\043\042\054\037\060\035\062\064\064\046\065\023" +
    "\066\062\073\032\105\020\106\027\117\053\127\010\001" +
    "\002\000\004\122\u016f\001\002\000\004\125\u0170\001\002" +
    "\000\104\005\ufff9\016\043\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\030\036\032\033" +
    "\034\055\035\054\036\026\037\065\040\034\041\051\043" +
    "\042\054\037\056\030\060\035\062\064\064\046\065\023" +
    "\066\062\070\045\073\032\074\061\105\020\106\027\117" +
    "\053\127\010\001\002\000\004\005\u0172\001\002\000\114" +
    "\005\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\043\uffb9\054\uffb9\056\uffb9\060\uffb9\062\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074" +
    "\uffb9\105\uffb9\106\uffb9\117\uffb9\127\uffb9\001\002\000\026" +
    "\020\022\021\047\022\024\023\056\024\040\025\060\026" +
    "\063\027\021\117\053\127\010\001\002\000\006\115\070" +
    "\120\u0175\001\002\000\072\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\104\uffcf\107\uffcf\110\uffcf\111" +
    "\uffcf\112\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\121\uffcf" +
    "\122\uffcf\123\uffcf\124\uffcf\125\uffcf\127\uffcf\001\002\000" +
    "\072\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\104\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\115\uffcc" +
    "\116\uffcc\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123\uffcc\124" +
    "\uffcc\125\uffcc\127\uffcc\001\002\000\072\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\112\uffc8\115\uffc8\116\uffc8\117\uffc8\120" +
    "\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8\127\uffc8" +
    "\001\002\000\072\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\107\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2" +
    "\123\135\124\uffc2\125\uffc2\127\uffc2\001\002\000\004\117" +
    "\u017d\001\002\000\072\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\104\uffca\107\uffca\110\uffca\111\uffca" +
    "\112\uffca\115\uffca\116\uffca\117\uffca\120\uffca\121\uffca\122" +
    "\uffca\123\uffca\124\uffca\125\uffca\127\uffca\001\002\000\072" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9" +
    "\104\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\115\uffc9\116" +
    "\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9" +
    "\125\uffc9\127\uffc9\001\002\000\072\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\075\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\115\uffcb\116\uffcb\117\uffcb\120\uffcb" +
    "\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125\uffcb\127\uffcb\001" +
    "\002\000\026\020\022\021\047\022\024\023\056\024\040" +
    "\025\060\026\063\027\021\117\053\127\010\001\002\000" +
    "\006\115\070\120\u017f\001\002\000\072\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\107\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\115\uffc6\116\uffc6\117\uffc6\120" +
    "\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\125\uffc6\127\uffc6" +
    "\001\002\000\072\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\103\uffc7\104\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\115\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7" +
    "\123\uffc7\124\uffc7\125\uffc7\127\uffc7\001\002\000\010\122" +
    "\uffc2\123\135\124\uffc2\001\002\000\010\122\uffc2\123\135" +
    "\124\uffc2\001\002\000\006\122\uffa5\124\uffa5\001\002\000" +
    "\006\122\uffa6\124\uffa6\001\002\000\006\123\135\124\uffc2" +
    "\001\002\000\004\124\u0187\001\002\000\052\002\ufffe\004" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\063\ufffe\117\ufffe\127\ufffe\001\002" +
    "\000\104\005\ufff9\016\043\020\022\021\047\022\024\023" +
    "\056\024\040\025\060\026\063\027\021\030\036\032\033" +
    "\034\055\035\054\036\026\037\065\040\034\041\051\043" +
    "\042\054\037\056\030\060\035\062\064\064\046\065\023" +
    "\066\062\070\045\073\032\074\061\105\020\106\027\117" +
    "\053\127\010\001\002\000\004\005\u018a\001\002\000\044" +
    "\002\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\117\uffeb\127\uffeb\001\002\000\044\002" +
    "\ufffb\010\317\011\315\012\324\013\313\015\325\017\321" +
    "\020\022\021\047\022\024\023\056\024\040\025\060\026" +
    "\063\027\021\117\053\127\010\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0189\000\004\002\004\001\001\000\004\022\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\043\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\327\010\311\012\326\014\315\022\121\030" +
    "\325\040\321\041\317\042\313\044\322\001\001\000\004" +
    "\022\u0184\001\001\000\022\005\056\011\043\014\065\015" +
    "\040\022\030\026\024\027\051\036\047\001\001\000\004" +
    "\022\u0180\001\001\000\004\022\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u0162\001\001\000\014\016" +
    "\u015d\017\113\022\075\031\074\033\073\001\001\000\004" +
    "\032\u014e\001\001\000\014\016\u014d\017\113\022\075\031" +
    "\074\033\073\001\001\000\022\005\u014b\011\043\014\065" +
    "\015\040\022\030\026\024\027\051\036\047\001\001\000" +
    "\014\016\u0147\017\113\022\075\031\074\033\073\001\001" +
    "\000\002\001\001\000\014\016\u0136\017\113\022\075\031" +
    "\074\033\073\001\001\000\004\032\u0133\001\001\000\002" +
    "\001\001\000\022\005\u0132\011\043\014\065\015\040\022" +
    "\030\026\024\027\051\036\047\001\001\000\014\016\u0131" +
    "\017\113\022\075\031\074\033\073\001\001\000\004\020" +
    "\u0130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\u0119\022\121\001\001\000\002\001\001\000\006\014\u0114" +
    "\022\121\001\001\000\014\016\u0110\017\113\022\075\031" +
    "\074\033\073\001\001\000\014\016\u010c\017\113\022\075" +
    "\031\074\033\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\043\014\065\022\030" +
    "\026\306\027\051\036\047\001\001\000\014\016\305\017" +
    "\113\022\075\031\304\033\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\274\011\043\014\065\015" +
    "\040\022\030\026\024\027\051\036\047\001\001\000\004" +
    "\022\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\106\017\113" +
    "\022\075\031\074\033\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\267\001\001\000\004\022\263" +
    "\001\001\000\002\001\001\000\014\016\261\017\113\022" +
    "\075\031\074\033\073\001\001\000\002\001\001\000\006" +
    "\014\255\022\121\001\001\000\004\032\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\171\001\001" +
    "\000\004\022\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\245\017\113\022\075\031\074\033\073" +
    "\001\001\000\002\001\001\000\006\014\230\022\227\001" +
    "\001\000\014\016\145\017\113\022\075\031\074\033\073" +
    "\001\001\000\004\013\117\001\001\000\002\001\001\000" +
    "\010\014\122\022\121\023\124\001\001\000\004\032\133" +
    "\001\001\000\004\022\132\001\001\000\002\001\001\000" +
    "\004\035\126\001\001\000\010\014\122\022\121\023\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\135\001\001\000\004\032\136\001" +
    "\001\000\002\001\001\000\006\014\140\022\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\143\011" +
    "\043\014\065\015\040\022\030\026\024\027\051\036\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\171\001\001\000\014\016\226\017\113\022\075\031\074" +
    "\033\073\001\001\000\014\016\225\017\113\022\075\031" +
    "\074\033\073\001\001\000\014\016\224\017\113\022\075" +
    "\031\074\033\073\001\001\000\014\016\223\017\113\022" +
    "\075\031\074\033\073\001\001\000\014\016\222\017\113" +
    "\022\075\031\074\033\073\001\001\000\014\016\221\017" +
    "\113\022\075\031\074\033\073\001\001\000\014\016\217" +
    "\017\113\022\075\031\074\033\073\001\001\000\014\016" +
    "\211\017\113\022\075\031\074\033\073\001\001\000\014" +
    "\016\206\017\113\022\075\031\074\033\073\001\001\000" +
    "\014\016\205\017\113\022\075\031\074\033\073\001\001" +
    "\000\014\016\204\017\113\022\075\031\074\033\073\001" +
    "\001\000\014\016\203\017\113\022\075\031\074\033\073" +
    "\001\001\000\014\016\202\017\113\022\075\031\074\033" +
    "\073\001\001\000\014\016\201\017\113\022\075\031\074" +
    "\033\073\001\001\000\014\016\200\017\113\022\075\031" +
    "\074\033\073\001\001\000\014\016\177\017\113\022\075" +
    "\031\074\033\073\001\001\000\014\016\176\017\113\022" +
    "\075\031\074\033\073\001\001\000\002\001\001\000\014" +
    "\016\174\017\113\022\075\031\074\033\073\001\001\000" +
    "\002\001\001\000\014\016\173\017\113\022\075\031\074" +
    "\033\073\001\001\000\004\020\171\001\001\000\004\020" +
    "\171\001\001\000\002\001\001\000\004\020\171\001\001" +
    "\000\004\020\171\001\001\000\004\020\171\001\001\000" +
    "\004\020\171\001\001\000\004\020\171\001\001\000\004" +
    "\020\171\001\001\000\004\020\171\001\001\000\004\020" +
    "\171\001\001\000\004\020\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\171\034\213\001\001\000" +
    "\014\016\215\017\113\022\075\031\074\033\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\171\034" +
    "\216\001\001\000\002\001\001\000\004\020\171\001\001" +
    "\000\002\001\001\000\004\020\171\001\001\000\004\020" +
    "\171\001\001\000\004\020\171\001\001\000\004\020\171" +
    "\001\001\000\004\020\171\001\001\000\004\020\171\001" +
    "\001\000\004\032\243\001\001\000\002\001\001\000\014" +
    "\016\233\017\113\022\075\031\074\033\073\001\001\000" +
    "\004\021\236\001\001\000\004\020\171\001\001\000\002" +
    "\001\001\000\014\016\240\017\113\022\075\031\074\033" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\171\034\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\244\001\001\000\002\001\001\000\004" +
    "\020\171\001\001\000\004\032\251\001\001\000\004\032" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\257\022\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\171\001\001\000\002\001" +
    "\001\000\004\032\266\001\001\000\004\032\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\273\022\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\277\017\113\022\075\031\074\033\073" +
    "\001\001\000\004\020\171\001\001\000\002\001\001\000" +
    "\014\016\302\017\113\022\075\031\074\033\073\001\001" +
    "\000\004\020\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\171\001\001\000\002\001\001\000\004" +
    "\043\310\001\001\000\026\007\327\010\311\012\326\014" +
    "\315\022\121\030\325\040\321\041\317\042\313\044\322" +
    "\001\001\000\002\001\001\000\004\022\u0103\001\001\000" +
    "\002\001\001\000\004\006\u0101\001\001\000\004\022\370" +
    "\001\001\000\004\006\366\001\001\000\002\001\001\000" +
    "\006\014\342\022\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\334\001\001\000\004\013\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\332\011\043\014\065\015" +
    "\040\022\030\026\024\027\051\036\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\341\010\335\012" +
    "\340\014\315\022\121\030\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\355\001\001\000\004\022\344" +
    "\001\001\000\002\001\001\000\004\022\351\001\001\000" +
    "\004\043\347\001\001\000\026\007\327\010\311\012\326" +
    "\014\315\022\121\030\325\040\321\041\317\042\313\044" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\353\001\001\000\026\007\327\010\311\012\326\014" +
    "\315\022\121\030\325\040\321\041\317\042\313\044\322" +
    "\001\001\000\002\001\001\000\004\013\360\001\001\000" +
    "\002\001\001\000\004\017\364\001\001\000\002\001\001" +
    "\000\022\005\362\011\043\014\065\015\040\022\030\026" +
    "\024\027\051\036\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\341\010\335\012\340\014\315\022\121\030\337\001\001" +
    "\000\002\001\001\000\004\013\373\001\001\000\002\001" +
    "\001\000\004\017\377\001\001\000\002\001\001\000\022" +
    "\005\375\011\043\014\065\015\040\022\030\026\024\027" +
    "\051\036\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\341\010" +
    "\335\012\340\014\315\022\121\030\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0108\001\001\000" +
    "\004\043\u0106\001\001\000\026\007\327\010\311\012\326" +
    "\014\315\022\121\030\325\040\321\041\317\042\313\044" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u010a\001\001\000\026\007\327\010\311\012\326\014" +
    "\315\022\121\030\325\040\321\041\317\042\313\044\322" +
    "\001\001\000\002\001\001\000\004\020\171\001\001\000" +
    "\022\005\u010e\011\043\014\065\015\040\022\030\026\024" +
    "\027\051\036\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\171\001\001\000\022\005\u0112\011\043" +
    "\014\065\015\040\022\030\026\024\027\051\036\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\u0116\022\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u011a\001\001" +
    "\000\002\001\001\000\004\022\u011c\001\001\000\004\032" +
    "\u011d\001\001\000\002\001\001\000\022\005\u011f\011\043" +
    "\014\065\015\040\022\030\026\024\027\051\036\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\u0122" +
    "\011\043\014\065\015\040\022\030\026\024\027\051\036" +
    "\047\001\001\000\004\037\u0124\001\001\000\004\022\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\u0128\011\043\014\065\015\040\022\030" +
    "\026\024\027\051\036\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u012b\001\001\000\004\022\u012c" +
    "\001\001\000\002\001\001\000\022\005\u012e\011\043\014" +
    "\065\015\040\022\030\026\024\027\051\036\047\001\001" +
    "\000\004\037\u012f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\171\001\001\000\022\005\u0138\011\043\014\065\015\040" +
    "\022\030\026\024\027\051\036\047\001\001\000\004\024" +
    "\u0139\001\001\000\004\025\u013d\001\001\000\014\016\u0141" +
    "\017\113\022\075\031\074\033\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\u0140\011\043\014\065\015\040\022\030\026" +
    "\024\027\051\036\047\001\001\000\002\001\001\000\004" +
    "\020\171\001\001\000\022\005\u0143\011\043\014\065\015" +
    "\040\022\030\026\024\027\051\036\047\001\001\000\002" +
    "\001\001\000\014\016\u0145\017\113\022\075\031\074\033" +
    "\073\001\001\000\004\020\171\001\001\000\002\001\001" +
    "\000\004\020\171\001\001\000\022\005\u0149\011\043\014" +
    "\065\015\040\022\030\026\024\027\051\036\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\171\001\001\000\002\001\001" +
    "\000\014\016\u0159\017\113\022\075\031\074\033\073\001" +
    "\001\000\002\001\001\000\014\016\u0158\017\113\022\075" +
    "\031\074\033\073\001\001\000\002\001\001\000\014\016" +
    "\u0154\017\113\022\075\031\074\033\073\001\001\000\004" +
    "\020\171\001\001\000\002\001\001\000\014\016\u0157\017" +
    "\113\022\075\031\074\033\073\001\001\000\004\020\171" +
    "\001\001\000\004\020\171\001\001\000\004\020\171\001" +
    "\001\000\002\001\001\000\014\016\u015c\017\113\022\075" +
    "\031\074\033\073\001\001\000\004\020\171\001\001\000" +
    "\004\020\171\001\001\000\002\001\001\000\014\016\u0160" +
    "\017\113\022\075\031\074\033\073\001\001\000\004\020" +
    "\171\001\001\000\002\001\001\000\004\032\u0165\001\001" +
    "\000\004\032\u0164\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\u0168\022\030\027\u0167\001\001\000\002" +
    "\001\001\000\004\022\u0169\001\001\000\002\001\001\000" +
    "\014\016\u016b\017\113\022\075\031\074\033\073\001\001" +
    "\000\004\020\171\001\001\000\010\014\u0168\022\030\027" +
    "\u016d\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\u0170\011\043\014\065\015\040\022\030\026\024\027" +
    "\051\036\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\u0173\022\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u017f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u017d\022\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0183\001\001\000\004\032\u0182\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0185\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\u0188" +
    "\011\043\014\065\015\040\022\030\026\024\027\051\036" +
    "\047\001\001\000\002\001\001\000\004\043\u018a\001\001" +
    "\000\026\007\327\010\311\012\326\014\315\022\121\030" +
    "\325\040\321\041\317\042\313\044\322\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expressionchain ::= 
            {
              ExprChain RESULT =null;
		 RESULT = new ExprChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expressionchain ::= COMMA expression expressionchain 
            {
              ExprChain RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(e, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // paramlist ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // paramlist ::= LPAREN expression expressionchain RPAREN 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // bracelist ::= LBRACE RBRACE 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracelist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bracelist ::= LBRACE expression expressionchain RBRACE 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracelist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // literal ::= NEW type LBRACKET RBRACKET bracelist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayLiteral(t, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // literal ::= LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2, lleft, lright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // literal ::= NEW type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= MINUS expression 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e, mleft, mright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // literal ::= SUBROUTINE arglist COLON type POINTER COLON statementlist END 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArgList p = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodLiteral(p, l, FileCatalogBuilder.generateLiteralId(), t, dleft, dright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= NEW identifier idchain paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain d = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectCreate(i, d, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= NIL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nil(nleft, nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // literal ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // literal ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // literal ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // literal ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= DECREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= DECREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= THIS idchain DECREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= identifier idchain DECREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= INCREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= INCREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= THIS idchain INCREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= identifier idchain INCREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= typeof 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Typeof t = (Typeof)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression DIFFERS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Differs(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s, e.line, e.column)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // catchlist ::= 
            {
              CatchList RESULT =null;
		 RESULT = new CatchList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // catchlist ::= CATCH identifier idchain identifier COLON statementlist catchlist 
            {
              CatchList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CatchList l = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new Catch(i, c, i2, s, i.line, i.column), 0); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // trycatch ::= TRY COLON statementlist catchlist FINALLY COLON statementlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, s2, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // trycatch ::= TRY COLON statementlist catchlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // semicolon_statement ::= THROW expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Throw(e, e.line, e.column);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // semicolon_statement ::= SUPER paramlist 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Super(p, sleft, sright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // semicolon_statement ::= EXEC methodcall 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCallStatement(m, m.line, m.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // semicolon_statement ::= DECREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // semicolon_statement ::= DECREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // semicolon_statement ::= THIS idchain DECREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // semicolon_statement ::= identifier idchain DECREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // semicolon_statement ::= INCREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // semicolon_statement ::= INCREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // semicolon_statement ::= THIS idchain INCREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // semicolon_statement ::= identifier idchain INCREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // semicolon_statement ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // semicolon_statement ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continue(cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // semicolon_statement ::= EXIT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // semicolon_statement ::= RETURN expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // semicolon_statement ::= identifier idchain LBRACKET expression RBRACKET EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayAssignment(i, c, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // semicolon_statement ::= identifier idchain LBRACE expression RBRACE EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashmapAssignment(i, c, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // semicolon_statement ::= identifier idchain EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assignment(e, i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // semicolon_statement ::= type identifier EQUAL expression 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecAssignment(e, i, t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // semicolon_statement ::= PRINT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_statement ::= ASSERT expression COLON expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, e2, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_statement ::= ASSERT expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement v = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_statement ::= trycatch 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TryCatch t = (TryCatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_statement ::= semicolon_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_statement ::= FOREACH type identifier IN identifier idchain COLON statementlist END 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Foreach(t, i1, i2, c, s, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_statement ::= FOR LPAREN semicolon_statement SEMICOLON expression SEMICOLON semicolon_statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3, s1.line, s1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // methodcall ::= expression paramlist 
            {
              MethodCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typeof ::= identifier idchain TYPEOF type 
            {
              Typeof RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Typeof(i, c, t, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeof",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= CONST SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= CONST identifier idchain 
            {
              Type RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, true, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= CONST STRING 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= CONST BOOLEAN 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BooleanType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CONST FLOAT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FloatType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= CONST INT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= CONST VAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= VAR 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarType(false, vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidType(vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, false, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, false, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2, false, lleft, lright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringType(false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatType(false, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(false, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argchain ::= 
            {
              ArgChain RESULT =null;
		 RESULT = new ArgChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argchain ::= COMMA parameter argchain 
            {
              ArgChain RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arglist ::= LPAREN RPAREN 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arglist ::= LPAREN parameter argchain RPAREN 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArgList(p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // classvardec ::= STATIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // classvardec ::= STATIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classvardec ::= type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classvardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methoddef ::= STATIC type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, true, rleft, rright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // methoddef ::= type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, false, rleft, rright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constructor ::= CONSTRUCTOR arglist COLON statementlist END 
            {
              Constructor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdef ::= STATIC CLASS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdef ::= STATIC CLASS identifier EXTENDS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdef ::= CLASS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdef ::= CLASS identifier EXTENDS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // prolist ::= PROTECTED deflist END 
            {
              ProtectedList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtectedList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prolist",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // prilist ::= PRIVATE deflist END 
            {
              PrivateList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrivateList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prilist",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // publist ::= PUBLIC deflist END 
            {
              PublicList RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PublicList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("publist",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definitions ::= 
            {
              DefinitionList RESULT =null;
		 RESULT = new DefinitionList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // definitions ::= definitions prolist 
            {
              DefinitionList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProtectedList p = (ProtectedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(p); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definitions ::= definitions prilist 
            {
              DefinitionList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrivateList p = (PrivateList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(p); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definitions ::= definitions publist 
            {
              DefinitionList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PublicList p = (PublicList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(p); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definitions ::= definitions def 
            {
              DefinitionList RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d1 = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefWrapper d2 = (DefWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d1.add(d2); RESULT = d1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def ::= constructor 
            {
              DefWrapper RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def ::= classvardec 
            {
              DefWrapper RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper((Def)c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def ::= methoddef 
            {
              DefWrapper RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def ::= classdef 
            {
              DefWrapper RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // deflist ::= deflist classvardec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add((Def)c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= deflist constructor 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END definitions 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END definitions 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c, i.line, i.column)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist definitions 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

