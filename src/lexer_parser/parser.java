
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 03 19:25:37 EDT 2018
//----------------------------------------------------

package lexer_parser;

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 03 19:25:37 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\002\000\002\011" +
    "\010\000\002\011\011\000\002\011\011\000\002\011\011" +
    "\000\002\007\010\000\002\007\012\000\002\007\012\000" +
    "\002\007\010\000\002\007\011\000\002\007\007\000\002" +
    "\007\012\000\002\007\010\000\002\007\011\000\002\007" +
    "\013\000\002\007\013\000\002\007\011\000\002\007\012" +
    "\000\002\007\010\000\002\007\013\000\002\007\011\000" +
    "\002\030\007\000\002\010\012\000\002\010\012\000\002" +
    "\010\011\000\002\010\012\000\002\013\005\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\007" +
    "\000\002\013\010\000\002\013\010\000\002\013\010\000" +
    "\002\012\005\000\002\014\006\000\002\014\004\000\002" +
    "\035\005\000\002\035\002\000\002\023\004\000\002\015" +
    "\005\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\010\000\002\015\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\005\000\002\015\007\000\002\033\006" +
    "\000\002\031\007\000\002\031\007\000\002\032\005\000" +
    "\002\032\002\000\002\016\003\000\002\016\004\000\002" +
    "\026\005\000\002\026\011\000\002\026\010\000\002\026" +
    "\007\000\002\026\007\000\002\026\007\000\002\026\015" +
    "\000\002\026\010\000\002\026\004\000\002\026\003\000" +
    "\002\026\003\000\002\027\006\000\002\027\006\000\002" +
    "\027\005\000\002\027\010\000\002\027\010\000\002\027" +
    "\004\000\002\027\006\000\002\027\006\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\036\007\000\002\036\012\000\002\037\011\000" +
    "\002\037\002\000\002\024\007\000\002\024\002\000\002" +
    "\025\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\006\000\002\017\006\000\002\017\004" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\007\000\002\020" +
    "\004\000\002\020\007\000\002\020\010\000\002\020\003" +
    "\000\002\020\007\000\002\021\006\000\002\021\004\000" +
    "\002\034\005\000\002\034\002\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e7\000\004\006\004\001\002\000\004\130\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\125\011\001\002\000\104\014\uff5a\043\uff5a\044" +
    "\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\066\uff5a\067\uff5a" +
    "\076\uff5a\100\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105" +
    "\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a\112\uff5a\113\uff5a" +
    "\114\uff5a\116\uff5a\117\uff5a\120\uff5a\121\uff5a\122\uff5a\123" +
    "\uff5a\124\uff5a\125\uff5a\126\uff5a\130\uff5a\001\002\000\054" +
    "\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\062\ufffd\074" +
    "\ufffd\130\ufffd\001\002\000\054\002\ufff3\004\016\007\015" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\062\013\074\ufff3\130\ufff3\001\002\000" +
    "\004\004\u01e6\001\002\000\004\002\001\001\002\000\004" +
    "\130\010\001\002\000\100\005\ufff9\016\106\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\031\102\033\077\035\115\036\114\037\072\040\123\041" +
    "\100\042\105\053\103\055\074\057\101\061\122\063\111" +
    "\064\070\065\120\070\110\073\076\075\117\106\067\107" +
    "\073\130\010\001\002\000\046\002\uffff\010\031\011\027" +
    "\012\035\013\021\015\036\017\030\020\046\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\074\022\130\010\001\002\000\050\002\ufff7\005\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\074\ufff7\130\ufff7\001\002\000\004\130\010" +
    "\001\002\000\004\130\010\001\002\000\050\002\ufff6\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\074\ufff6\130\ufff6\001\002\000\066" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\076" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7" +
    "\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\123\uffb7\124\235\125\uffb7\126\uffb7\130\uffb7" +
    "\001\002\000\066\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\076\uffca\100\uffca\101\uffca\102\uffca\103\uffca" +
    "\104\uffca\105\uffca\110\uffca\111\uffca\112\uffca\113\uffca\116" +
    "\uffca\117\uffca\120\uffca\121\uffca\123\uffca\124\uffca\125\uffca" +
    "\126\uffca\130\uffca\001\002\000\006\116\051\130\010\001" +
    "\002\000\034\013\u01a9\017\u01a7\020\u01a5\021\044\022\025" +
    "\023\034\024\032\025\037\026\033\027\045\030\040\074" +
    "\u01a6\130\010\001\002\000\004\013\u019b\001\002\000\034" +
    "\013\u0177\017\u0175\020\u0173\021\044\022\025\023\034\024" +
    "\032\025\037\026\033\027\045\030\040\074\u0174\130\010" +
    "\001\002\000\066\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\076\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\105\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\116" +
    "\uffc8\117\uffc8\120\uffc8\121\uffc8\123\uffc8\124\uffc8\125\uffc8" +
    "\126\uffc8\130\uffc8\001\002\000\066\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\076\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\103\uffc7\104\uffc7\105\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\113\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\123\uffc7" +
    "\124\uffc7\125\uffc7\126\uffc7\130\uffc7\001\002\000\066\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\076\uffc9" +
    "\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\110" +
    "\uffc9\111\uffc9\112\uffc9\113\uffc9\116\uffc9\117\uffc9\120\uffc9" +
    "\121\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9\130\uffc9\001" +
    "\002\000\034\013\u014f\017\u014d\020\u014b\021\044\022\025" +
    "\023\034\024\032\025\037\026\033\027\045\030\040\074" +
    "\u014c\130\010\001\002\000\004\122\054\001\002\000\004" +
    "\120\u0142\001\002\000\020\020\u013a\022\u013d\023\u013c\024" +
    "\u013b\026\u0138\027\u0137\130\010\001\002\000\050\002\ufff5" +
    "\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\074\ufff5\130\ufff5\001\002\000" +
    "\050\002\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\074\ufff4\130\ufff4" +
    "\001\002\000\050\002\ufff8\005\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\074" +
    "\ufff8\130\ufff8\001\002\000\066\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\076\uffc4\100\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\104\uffc4\105\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\113\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\123\uffc4\124" +
    "\uffc4\125\uffc4\126\uffc4\130\uffc4\001\002\000\066\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\076\uffc3\100" +
    "\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\110\uffc3" +
    "\111\uffc3\112\uffc3\113\uffc3\116\uffc3\117\uffc3\120\uffc3\121" +
    "\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3\130\uffc3\001\002" +
    "\000\024\021\044\022\025\023\034\024\032\025\037\026" +
    "\033\027\045\030\040\130\010\001\002\000\006\116\051" +
    "\130\010\001\002\000\004\122\054\001\002\000\004\117" +
    "\052\001\002\000\066\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\076\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\110\uffcb\111\uffcb\112\uffcb\113\uffcb" +
    "\116\uffcb\117\uffcb\120\uffcb\121\uffcb\123\uffcb\124\uffcb\125" +
    "\uffcb\126\uffcb\130\uffcb\001\002\000\004\126\066\001\002" +
    "\000\026\021\044\022\025\023\034\024\032\025\037\026" +
    "\033\027\045\030\040\123\056\130\010\001\002\000\006" +
    "\116\051\130\010\001\002\000\004\126\uffcf\001\002\000" +
    "\006\076\060\123\uffcd\001\002\000\024\021\044\022\025" +
    "\023\034\024\032\025\037\026\033\027\045\030\040\130" +
    "\010\001\002\000\004\123\062\001\002\000\004\126\uffd0" +
    "\001\002\000\006\076\060\123\uffcd\001\002\000\004\123" +
    "\uffce\001\002\000\006\076\uffcc\123\uffcc\001\002\000\100" +
    "\005\ufff9\016\106\021\044\022\025\023\034\024\032\025" +
    "\037\026\033\027\045\030\040\031\102\033\077\035\115" +
    "\036\114\037\072\040\123\041\100\042\105\053\103\055" +
    "\074\057\101\061\122\063\111\064\070\065\120\070\110" +
    "\073\076\075\117\106\067\107\073\130\010\001\002\000" +
    "\006\053\u0134\130\010\001\002\000\006\123\uffa1\125\uffa1" +
    "\001\002\000\112\005\uffb6\016\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\053\uffb6\055\uffb6\057\uffb6\061\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\070\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\075\uffb6\106\uffb6\107\uffb6\121\uffb6\130\uffb6\001\002" +
    "\000\004\122\u0127\001\002\000\006\053\u0124\130\010\001" +
    "\002\000\004\122\u0120\001\002\000\020\106\uffb7\107\uffb7" +
    "\114\u0113\116\u0114\120\u0111\124\235\130\uffb7\001\002\000" +
    "\006\053\u010e\130\010\001\002\000\100\005\ufff9\016\106" +
    "\021\044\022\025\023\034\024\032\025\037\026\033\027" +
    "\045\030\040\031\102\033\077\035\115\036\114\037\072" +
    "\040\123\041\100\042\105\053\103\055\074\057\101\061" +
    "\122\063\111\064\070\065\120\070\110\073\076\075\117" +
    "\106\067\107\073\130\010\001\002\000\042\025\144\051" +
    "\134\052\150\053\137\054\136\056\142\065\120\101\147" +
    "\106\145\107\133\115\152\122\135\127\141\130\010\131" +
    "\146\132\140\001\002\000\004\122\u0104\001\002\000\042" +
    "\025\144\051\134\052\150\053\137\054\136\056\142\065" +
    "\120\101\147\106\145\107\133\115\152\122\135\127\141" +
    "\130\010\131\146\132\140\001\002\000\010\106\uffb7\107" +
    "\uffb7\124\235\001\002\000\112\005\ufff9\016\106\021\044" +
    "\022\025\023\034\024\032\025\037\026\033\027\045\030" +
    "\040\031\102\032\ufff9\033\077\034\ufff9\035\115\036\114" +
    "\037\072\040\123\041\100\042\105\053\103\055\074\057" +
    "\101\061\122\063\111\064\070\065\120\070\110\071\ufff9" +
    "\072\ufff9\073\076\075\117\106\067\107\073\121\ufff9\130" +
    "\010\001\002\000\042\025\144\051\134\052\150\053\137" +
    "\054\136\056\142\065\120\101\147\106\145\107\133\115" +
    "\152\122\135\127\141\130\010\131\146\132\140\001\002" +
    "\000\004\122\357\001\002\000\112\005\uffaa\016\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\053\uffaa\055\uffaa" +
    "\057\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa\070\uffaa\071" +
    "\uffaa\072\uffaa\073\uffaa\075\uffaa\106\uffaa\107\uffaa\121\uffaa" +
    "\130\uffaa\001\002\000\004\126\340\001\002\000\006\123" +
    "\uffa0\125\uffa0\001\002\000\112\005\uffab\016\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\053\uffab\055\uffab\057" +
    "\uffab\061\uffab\063\uffab\064\uffab\065\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\075\uffab\106\uffab\107\uffab\121\uffab\130" +
    "\uffab\001\002\000\004\125\337\001\002\000\042\025\144" +
    "\051\134\052\150\053\137\054\136\056\142\065\120\101" +
    "\147\106\145\107\133\115\152\122\135\127\141\130\010" +
    "\131\146\132\140\001\002\000\042\025\144\051\134\052" +
    "\150\053\137\054\136\056\142\065\120\101\147\106\145" +
    "\107\133\115\152\122\135\127\141\130\010\131\146\132" +
    "\140\001\002\000\004\005\326\001\002\000\074\016\106" +
    "\021\044\022\025\023\034\024\032\025\037\026\033\027" +
    "\045\030\040\031\102\033\077\035\115\036\114\037\072" +
    "\040\123\041\100\042\105\053\103\055\074\057\101\061" +
    "\122\063\111\064\070\065\120\070\110\073\076\106\067" +
    "\107\073\130\010\001\002\000\006\053\316\130\010\001" +
    "\002\000\006\123\uff97\125\uff97\001\002\000\004\122\312" +
    "\001\002\000\100\005\ufff9\016\106\021\044\022\025\023" +
    "\034\024\032\025\037\026\033\027\045\030\040\031\102" +
    "\033\077\035\115\036\114\037\072\040\123\041\100\042" +
    "\105\053\103\055\074\057\101\061\122\063\111\064\070" +
    "\065\120\070\110\073\076\075\117\106\067\107\073\130" +
    "\010\001\002\000\006\116\051\130\010\001\002\000\006" +
    "\114\127\125\126\001\002\000\112\005\uffd1\016\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\053\uffd1\055\uffd1" +
    "\057\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1\070\uffd1\071" +
    "\uffd1\072\uffd1\073\uffd1\075\uffd1\106\uffd1\107\uffd1\121\uffd1" +
    "\130\uffd1\001\002\000\042\025\144\051\134\052\150\053" +
    "\137\054\136\056\142\065\120\101\147\106\145\107\133" +
    "\115\152\122\135\127\141\130\010\131\146\132\140\001" +
    "\002\000\064\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74" +
    "\050\uff74\076\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104" +
    "\uff74\105\uff74\110\uff74\111\uff74\112\uff74\113\uff74\116\uff74" +
    "\117\uff74\120\uff74\121\uff74\123\uff74\124\uff74\125\uff74\126" +
    "\uff74\001\002\000\064\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\050\uff79\076\uff79\100\uff79\101\uff79\102\uff79\103" +
    "\uff79\104\uff79\105\uff79\110\uff79\111\uff79\112\uff79\113\uff79" +
    "\116\uff79\117\uff79\120\uff79\121\uff79\123\uff79\124\uff79\125" +
    "\uff79\126\uff79\001\002\000\072\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\067\uffb7\076\uffb7\100\uffb7\101" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7" +
    "\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\123\uffb7\124\235\125\uffb7\126\uffb7\001\002" +
    "\000\006\053\275\130\010\001\002\000\064\043\uff68\044" +
    "\uff68\045\uff68\046\uff68\047\uff68\050\uff68\076\uff68\100\uff68" +
    "\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68\110\uff68\111" +
    "\uff68\112\uff68\113\uff68\116\uff68\117\uff68\120\uff68\121\uff68" +
    "\123\uff68\124\uff68\125\uff68\126\uff68\001\002\000\044\025" +
    "\144\051\134\052\150\053\137\054\136\056\142\065\120" +
    "\101\147\106\145\107\133\115\152\122\135\123\256\127" +
    "\141\130\010\131\146\132\140\001\002\000\064\043\uff66" +
    "\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66\076\uff66\100" +
    "\uff66\101\uff66\102\uff66\103\uff66\104\uff66\105\uff66\110\uff66" +
    "\111\uff66\112\uff66\113\uff66\116\uff66\117\uff66\120\uff66\121" +
    "\uff66\123\uff66\124\uff66\125\uff66\126\uff66\001\002\000\070" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\076" +
    "\uff75\100\uff75\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75" +
    "\106\uffb7\107\uffb7\110\uff75\111\uff75\112\uff75\113\uff75\116" +
    "\uff75\117\uff75\120\uff75\121\uff75\123\uff75\124\235\125\uff75" +
    "\126\uff75\001\002\000\064\043\uff69\044\uff69\045\uff69\046" +
    "\uff69\047\uff69\050\uff69\076\uff69\100\uff69\101\uff69\102\uff69" +
    "\103\uff69\104\uff69\105\uff69\110\uff69\111\uff69\112\uff69\113" +
    "\uff69\116\uff69\117\uff69\120\uff69\121\uff69\123\uff69\124\uff69" +
    "\125\uff69\126\uff69\001\002\000\064\043\uff60\044\uff60\045" +
    "\uff60\046\uff60\047\uff60\050\uff60\076\uff60\100\uff60\101\uff60" +
    "\102\uff60\103\uff60\104\uff60\105\uff60\110\uff60\111\uff60\112" +
    "\uff60\113\uff60\116\uff60\117\uff60\120\uff60\121\uff60\123\uff60" +
    "\124\uff60\125\uff60\126\uff60\001\002\000\024\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\130\010\001\002\000\054\043\162\044\164\045\176\046" +
    "\165\047\171\050\166\100\163\101\200\102\172\103\174" +
    "\104\203\105\161\110\175\111\202\112\177\113\173\116" +
    "\167\120\170\123\uffa8\124\201\125\uffa8\001\002\000\004" +
    "\120\241\001\002\000\006\053\233\130\010\001\002\000" +
    "\064\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a" +
    "\076\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105" +
    "\uff6a\110\uff6a\111\uff6a\112\uff6a\113\uff6a\116\uff6a\117\uff6a" +
    "\120\uff6a\121\uff6a\123\uff6a\124\uff6a\125\uff6a\126\uff6a\001" +
    "\002\000\042\025\144\051\134\052\150\053\137\054\136" +
    "\056\142\065\120\101\147\106\145\107\133\115\152\122" +
    "\135\127\141\130\010\131\146\132\140\001\002\000\064" +
    "\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67\076" +
    "\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\105\uff67" +
    "\110\uff67\111\uff67\112\uff67\113\uff67\116\uff67\117\uff67\120" +
    "\uff67\121\uff67\123\uff67\124\uff67\125\uff67\126\uff67\001\002" +
    "\000\064\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\076\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b" +
    "\105\uff6b\110\uff6b\111\uff6b\112\uff6b\113\uff6b\116\uff6b\117" +
    "\uff6b\120\uff6b\121\uff6b\123\uff6b\124\uff6b\125\uff6b\126\uff6b" +
    "\001\002\000\042\025\144\051\134\052\150\053\137\054" +
    "\136\056\142\065\120\101\147\106\145\107\133\115\152" +
    "\122\135\127\141\130\010\131\146\132\140\001\002\000" +
    "\004\077\154\001\002\000\004\120\155\001\002\000\100" +
    "\016\106\021\044\022\025\023\034\024\032\025\037\026" +
    "\033\027\045\030\040\031\102\033\077\035\115\036\114" +
    "\037\072\040\123\041\100\042\105\053\103\055\074\057" +
    "\101\061\122\063\111\064\070\065\120\070\110\073\076" +
    "\075\117\106\067\107\073\121\ufff9\130\010\001\002\000" +
    "\004\121\157\001\002\000\064\043\uff64\044\uff64\045\uff64" +
    "\046\uff64\047\uff64\050\uff64\076\uff64\100\uff64\101\uff64\102" +
    "\uff64\103\uff64\104\uff64\105\uff64\110\uff64\111\uff64\112\uff64" +
    "\113\uff64\116\uff64\117\uff64\120\uff64\121\uff64\123\uff64\124" +
    "\uff64\125\uff64\126\uff64\001\002\000\064\043\162\044\164" +
    "\045\176\046\165\047\171\050\166\076\uff76\100\163\101" +
    "\200\102\172\103\174\104\203\105\161\110\175\111\202" +
    "\112\177\113\173\116\167\117\uff76\120\170\121\uff76\123" +
    "\uff76\124\201\125\uff76\126\uff76\001\002\000\042\025\144" +
    "\051\134\052\150\053\137\054\136\056\142\065\120\101" +
    "\147\106\145\107\133\115\152\122\135\127\141\130\010" +
    "\131\146\132\140\001\002\000\042\025\144\051\134\052" +
    "\150\053\137\054\136\056\142\065\120\101\147\106\145" +
    "\107\133\115\152\122\135\127\141\130\010\131\146\132" +
    "\140\001\002\000\042\025\144\051\134\052\150\053\137" +
    "\054\136\056\142\065\120\101\147\106\145\107\133\115" +
    "\152\122\135\127\141\130\010\131\146\132\140\001\002" +
    "\000\042\025\144\051\134\052\150\053\137\054\136\056" +
    "\142\065\120\101\147\106\145\107\133\115\152\122\135" +
    "\127\141\130\010\131\146\132\140\001\002\000\042\025" +
    "\144\051\134\052\150\053\137\054\136\056\142\065\120" +
    "\101\147\106\145\107\133\115\152\122\135\127\141\130" +
    "\010\131\146\132\140\001\002\000\042\025\144\051\134" +
    "\052\150\053\137\054\136\056\142\065\120\101\147\106" +
    "\145\107\133\115\152\122\135\127\141\130\010\131\146" +
    "\132\140\001\002\000\042\025\144\051\134\052\150\053" +
    "\137\054\136\056\142\065\120\101\147\106\145\107\133" +
    "\115\152\122\135\127\141\130\010\131\146\132\140\001" +
    "\002\000\042\025\144\051\134\052\150\053\137\054\136" +
    "\056\142\065\120\101\147\106\145\107\133\115\152\122" +
    "\135\127\141\130\010\131\146\132\140\001\002\000\042" +
    "\025\144\051\134\052\150\053\137\054\136\056\142\065" +
    "\120\101\147\106\145\107\133\115\152\122\135\127\141" +
    "\130\010\131\146\132\140\001\002\000\042\025\144\051" +
    "\134\052\150\053\137\054\136\056\142\065\120\101\147" +
    "\106\145\107\133\115\152\122\135\127\141\130\010\131" +
    "\146\132\140\001\002\000\042\025\144\051\134\052\150" +
    "\053\137\054\136\056\142\065\120\101\147\106\145\107" +
    "\133\115\152\122\135\127\141\130\010\131\146\132\140" +
    "\001\002\000\042\025\144\051\134\052\150\053\137\054" +
    "\136\056\142\065\120\101\147\106\145\107\133\115\152" +
    "\122\135\127\141\130\010\131\146\132\140\001\002\000" +
    "\042\025\144\051\134\052\150\053\137\054\136\056\142" +
    "\065\120\101\147\106\145\107\133\115\152\122\135\127" +
    "\141\130\010\131\146\132\140\001\002\000\042\025\144" +
    "\051\134\052\150\053\137\054\136\056\142\065\120\101" +
    "\147\106\145\107\133\115\152\122\135\127\141\130\010" +
    "\131\146\132\140\001\002\000\042\025\144\051\134\052" +
    "\150\053\137\054\136\056\142\065\120\101\147\106\145" +
    "\107\133\115\152\122\135\127\141\130\010\131\146\132" +
    "\140\001\002\000\042\025\144\051\134\052\150\053\137" +
    "\054\136\056\142\065\120\101\147\106\145\107\133\115" +
    "\152\122\135\127\141\130\010\131\146\132\140\001\002" +
    "\000\004\060\206\001\002\000\042\025\144\051\134\052" +
    "\150\053\137\054\136\056\142\065\120\101\147\106\145" +
    "\107\133\115\152\122\135\127\141\130\010\131\146\132" +
    "\140\001\002\000\042\025\144\051\134\052\150\053\137" +
    "\054\136\056\142\065\120\101\147\106\145\107\133\115" +
    "\152\122\135\127\141\130\010\131\146\132\140\001\002" +
    "\000\064\043\162\044\164\045\176\046\165\047\171\050" +
    "\166\076\uff83\100\163\101\200\102\uff83\103\uff83\104\uff83" +
    "\105\uff83\110\175\111\202\112\177\113\173\116\uff83\117" +
    "\uff83\120\uff83\121\uff83\123\uff83\124\uff83\125\uff83\126\uff83" +
    "\001\002\000\064\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047" +
    "\171\050\166\076\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f" +
    "\104\uff7f\105\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f\116" +
    "\uff7f\117\uff7f\120\uff7f\121\uff7f\123\uff7f\124\uff7f\125\uff7f" +
    "\126\uff7f\001\002\000\064\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\076\uff78\100\uff78\101\uff78\102\uff78" +
    "\103\uff78\104\uff78\105\uff78\110\uff78\111\uff78\112\uff78\113" +
    "\uff78\116\uff78\117\uff78\120\uff78\121\uff78\123\uff78\124\uff78" +
    "\125\uff78\126\uff78\001\002\000\064\043\162\044\164\045" +
    "\176\046\165\047\171\050\166\076\uff85\100\uff85\101\uff85" +
    "\102\uff85\103\uff85\104\uff85\105\uff85\110\175\111\202\112" +
    "\177\113\173\116\uff85\117\uff85\120\uff85\121\uff85\123\uff85" +
    "\124\uff85\125\uff85\126\uff85\001\002\000\064\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\171\050\166\076\uff7d\100\uff7d" +
    "\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\110\uff7d\111" +
    "\uff7d\112\uff7d\113\uff7d\116\uff7d\117\uff7d\120\uff7d\121\uff7d" +
    "\123\uff7d\124\uff7d\125\uff7d\126\uff7d\001\002\000\064\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\171\050\166\076\uff8a" +
    "\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\110" +
    "\175\111\202\112\177\113\173\116\uff8a\117\uff8a\120\uff8a" +
    "\121\uff8a\123\uff8a\124\uff8a\125\uff8a\126\uff8a\001\002\000" +
    "\064\043\uff80\044\uff80\045\uff80\046\uff80\047\171\050\166" +
    "\076\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105" +
    "\uff80\110\uff80\111\uff80\112\uff80\113\uff80\116\uff80\117\uff80" +
    "\120\uff80\121\uff80\123\uff80\124\uff80\125\uff80\126\uff80\001" +
    "\002\000\064\043\162\044\164\045\176\046\165\047\171" +
    "\050\166\076\uff82\100\163\101\200\102\uff82\103\uff82\104" +
    "\uff82\105\uff82\110\175\111\202\112\177\113\173\116\uff82" +
    "\117\uff82\120\uff82\121\uff82\123\uff82\124\uff82\125\uff82\126" +
    "\uff82\001\002\000\064\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\171\050\166\076\uff7e\100\uff7e\101\uff7e\102\uff7e\103" +
    "\uff7e\104\uff7e\105\uff7e\110\uff7e\111\uff7e\112\uff7e\113\uff7e" +
    "\116\uff7e\117\uff7e\120\uff7e\121\uff7e\123\uff7e\124\uff7e\125" +
    "\uff7e\126\uff7e\001\002\000\064\043\162\044\164\045\176" +
    "\046\165\047\171\050\166\076\uff84\100\163\101\200\102" +
    "\uff84\103\uff84\104\uff84\105\uff84\110\175\111\202\112\177" +
    "\113\173\116\uff84\117\uff84\120\uff84\121\uff84\123\uff84\124" +
    "\uff84\125\uff84\126\uff84\001\002\000\064\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\050\uff88\076\uff88\100\uff88\101" +
    "\uff88\102\uff88\103\uff88\104\uff88\105\uff88\110\uff88\111\uff88" +
    "\112\uff88\113\uff88\116\uff88\117\uff88\120\uff88\121\uff88\123" +
    "\uff88\124\uff88\125\uff88\126\uff88\001\002\000\052\043\162" +
    "\044\164\045\176\046\165\047\171\050\166\100\163\101" +
    "\200\102\172\103\174\104\203\105\161\110\175\111\202" +
    "\112\177\113\173\116\167\120\170\121\220\124\201\001" +
    "\002\000\064\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\076\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c\104" +
    "\uff7c\105\uff7c\110\uff7c\111\uff7c\112\uff7c\113\uff7c\116\uff7c" +
    "\117\uff7c\120\uff7c\121\uff7c\123\uff7c\124\uff7c\125\uff7c\126" +
    "\uff7c\001\002\000\052\043\162\044\164\045\176\046\165" +
    "\047\171\050\166\100\163\101\200\102\172\103\174\104" +
    "\203\105\161\110\175\111\202\112\177\113\173\116\167" +
    "\117\222\120\170\124\201\001\002\000\064\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\076\uff7b\100\uff7b" +
    "\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\110\uff7b\111" +
    "\uff7b\112\uff7b\113\uff7b\116\uff7b\117\uff7b\120\uff7b\121\uff7b" +
    "\123\uff7b\124\uff7b\125\uff7b\126\uff7b\001\002\000\064\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\076\uff87" +
    "\100\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\110" +
    "\uff87\111\uff87\112\uff87\113\uff87\116\uff87\117\uff87\120\uff87" +
    "\121\uff87\123\uff87\124\uff87\125\uff87\126\uff87\001\002\000" +
    "\064\043\uff89\044\uff89\045\uff89\046\uff89\047\171\050\166" +
    "\076\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105" +
    "\uff89\110\175\111\202\112\177\113\173\116\uff89\117\uff89" +
    "\120\uff89\121\uff89\123\uff89\124\uff89\125\uff89\126\uff89\001" +
    "\002\000\064\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\171" +
    "\050\166\076\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104" +
    "\uff8b\105\uff8b\110\175\111\202\112\177\113\173\116\uff8b" +
    "\117\uff8b\120\uff8b\121\uff8b\123\uff8b\124\uff8b\125\uff8b\126" +
    "\uff8b\001\002\000\064\043\162\044\164\045\176\046\165" +
    "\047\171\050\166\076\uff86\100\uff86\101\uff86\102\uff86\103" +
    "\uff86\104\uff86\105\uff86\110\175\111\202\112\177\113\173" +
    "\116\uff86\117\uff86\120\uff86\121\uff86\123\uff86\124\uff86\125" +
    "\uff86\126\uff86\001\002\000\064\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\047\171\050\166\076\uff8c\100\uff8c\101\uff8c\102" +
    "\uff8c\103\uff8c\104\uff8c\105\uff8c\110\175\111\202\112\177" +
    "\113\173\116\uff8c\117\uff8c\120\uff8c\121\uff8c\123\uff8c\124" +
    "\uff8c\125\uff8c\126\uff8c\001\002\000\064\043\162\044\164" +
    "\045\176\046\165\047\171\050\166\076\uff81\100\163\101" +
    "\200\102\uff81\103\uff81\104\uff81\105\uff81\110\175\111\202" +
    "\112\177\113\173\116\uff81\117\uff81\120\uff81\121\uff81\123" +
    "\uff81\124\uff81\125\uff81\126\uff81\001\002\000\064\043\162" +
    "\044\164\045\176\046\165\047\171\050\166\076\uff63\100" +
    "\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105\uff63\110\175" +
    "\111\202\112\177\113\173\116\uff63\117\uff63\120\uff63\121" +
    "\uff63\123\uff63\124\uff63\125\uff63\126\uff63\001\002\000\064" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\076" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7" +
    "\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\123\uffb7\124\235\125\uffb7\126\uffb7\001\002" +
    "\000\064\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7" +
    "\105\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7\117" +
    "\uffb7\120\uffb7\121\uffb7\123\uffb7\124\235\125\uffb7\126\uffb7" +
    "\001\002\000\064\043\uff70\044\uff70\045\uff70\046\uff70\047" +
    "\uff70\050\uff70\076\uff70\100\uff70\101\uff70\102\uff70\103\uff70" +
    "\104\uff70\105\uff70\110\uff70\111\uff70\112\uff70\113\uff70\116" +
    "\uff70\117\uff70\120\uff70\121\uff70\123\uff70\124\uff70\125\uff70" +
    "\126\uff70\001\002\000\004\130\010\001\002\000\076\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\066\uffb7" +
    "\067\uffb7\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7" +
    "\113\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7\123\uffb7\124" +
    "\235\125\uffb7\126\uffb7\130\uffb7\001\002\000\076\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\066\uffb8\067" +
    "\uffb8\076\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8" +
    "\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8\123\uffb8\124\uffb8" +
    "\125\uffb8\126\uffb8\130\uffb8\001\002\000\064\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\047\uff71\050\uff71\076\uff71\100\uff71" +
    "\101\uff71\102\uff71\103\uff71\104\uff71\105\uff71\110\uff71\111" +
    "\uff71\112\uff71\113\uff71\116\uff71\117\uff71\120\uff71\121\uff71" +
    "\123\uff71\124\uff71\125\uff71\126\uff71\001\002\000\024\021" +
    "\044\022\025\023\034\024\032\025\037\026\033\027\045" +
    "\030\040\130\010\001\002\000\006\076\243\116\051\001" +
    "\002\000\024\021\044\022\025\023\034\024\032\025\037" +
    "\026\033\027\045\030\040\130\010\001\002\000\006\116" +
    "\051\121\245\001\002\000\064\043\uff61\044\uff61\045\uff61" +
    "\046\uff61\047\uff61\050\uff61\076\uff61\100\uff61\101\uff61\102" +
    "\uff61\103\uff61\104\uff61\105\uff61\110\uff61\111\uff61\112\uff61" +
    "\113\uff61\116\uff61\117\uff61\120\uff61\121\uff61\123\uff61\124" +
    "\uff61\125\uff61\126\uff61\001\002\000\010\116\uffb7\122\255" +
    "\124\235\001\002\000\004\116\250\001\002\000\044\025" +
    "\144\051\134\052\150\053\137\054\136\056\142\065\120" +
    "\101\147\106\145\107\133\115\152\117\251\122\135\127" +
    "\141\130\010\131\146\132\140\001\002\000\006\116\uffcb" +
    "\122\255\001\002\000\052\043\162\044\164\045\176\046" +
    "\165\047\171\050\166\100\163\101\200\102\172\103\174" +
    "\104\203\105\161\110\175\111\202\112\177\113\173\116" +
    "\167\117\253\120\170\124\201\001\002\000\064\043\uff62" +
    "\044\uff62\045\uff62\046\uff62\047\uff62\050\uff62\076\uff62\100" +
    "\uff62\101\uff62\102\uff62\103\uff62\104\uff62\105\uff62\110\uff62" +
    "\111\uff62\112\uff62\113\uff62\116\uff62\117\uff62\120\uff62\121" +
    "\uff62\123\uff62\124\uff62\125\uff62\126\uff62\001\002\000\064" +
    "\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\076" +
    "\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f" +
    "\110\uff5f\111\uff5f\112\uff5f\113\uff5f\116\uff5f\117\uff5f\120" +
    "\uff5f\121\uff5f\123\uff5f\124\uff5f\125\uff5f\126\uff5f\001\002" +
    "\000\044\025\144\051\134\052\150\053\137\054\136\056" +
    "\142\065\120\101\147\106\145\107\133\115\152\122\135" +
    "\123\256\127\141\130\010\131\146\132\140\001\002\000" +
    "\066\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d" +
    "\076\uff5d\077\uff5d\100\uff5d\101\uff5d\102\uff5d\103\uff5d\104" +
    "\uff5d\105\uff5d\110\uff5d\111\uff5d\112\uff5d\113\uff5d\116\uff5d" +
    "\117\uff5d\120\uff5d\121\uff5d\123\uff5d\124\uff5d\125\uff5d\126" +
    "\uff5d\001\002\000\054\043\162\044\164\045\176\046\165" +
    "\047\171\050\166\076\260\100\163\101\200\102\172\103" +
    "\174\104\203\105\161\110\175\111\202\112\177\113\173" +
    "\116\167\120\170\123\uff5b\124\201\001\002\000\042\025" +
    "\144\051\134\052\150\053\137\054\136\056\142\065\120" +
    "\101\147\106\145\107\133\115\152\122\135\127\141\130" +
    "\010\131\146\132\140\001\002\000\004\123\262\001\002" +
    "\000\066\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047\uff5e\050" +
    "\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e" +
    "\104\uff5e\105\uff5e\110\uff5e\111\uff5e\112\uff5e\113\uff5e\116" +
    "\uff5e\117\uff5e\120\uff5e\121\uff5e\123\uff5e\124\uff5e\125\uff5e" +
    "\126\uff5e\001\002\000\054\043\162\044\164\045\176\046" +
    "\165\047\171\050\166\076\260\100\163\101\200\102\172" +
    "\103\174\104\203\105\161\110\175\111\202\112\177\113" +
    "\173\116\167\120\170\123\uff5b\124\201\001\002\000\004" +
    "\123\uff5c\001\002\000\064\043\uff65\044\uff65\045\uff65\046" +
    "\uff65\047\uff65\050\uff65\076\uff65\100\uff65\101\uff65\102\uff65" +
    "\103\uff65\104\uff65\105\uff65\110\uff65\111\uff65\112\uff65\113" +
    "\uff65\116\uff65\117\uff65\120\uff65\121\uff65\123\uff65\124\uff65" +
    "\125\uff65\126\uff65\001\002\000\066\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\076\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\105\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\113\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\123\uffc5" +
    "\124\uffc5\125\uffc5\126\uffc5\130\uffc5\001\002\000\006\106" +
    "\271\107\270\001\002\000\064\043\uff6e\044\uff6e\045\uff6e" +
    "\046\uff6e\047\uff6e\050\uff6e\076\uff6e\100\uff6e\101\uff6e\102" +
    "\uff6e\103\uff6e\104\uff6e\105\uff6e\110\uff6e\111\uff6e\112\uff6e" +
    "\113\uff6e\116\uff6e\117\uff6e\120\uff6e\121\uff6e\123\uff6e\124" +
    "\uff6e\125\uff6e\126\uff6e\001\002\000\064\043\uff72\044\uff72" +
    "\045\uff72\046\uff72\047\uff72\050\uff72\076\uff72\100\uff72\101" +
    "\uff72\102\uff72\103\uff72\104\uff72\105\uff72\110\uff72\111\uff72" +
    "\112\uff72\113\uff72\116\uff72\117\uff72\120\uff72\121\uff72\123" +
    "\uff72\124\uff72\125\uff72\126\uff72\001\002\000\054\043\162" +
    "\044\164\045\176\046\165\047\171\050\166\076\260\100" +
    "\163\101\200\102\172\103\174\104\203\105\161\110\175" +
    "\111\202\112\177\113\173\116\167\120\170\123\273\124" +
    "\201\001\002\000\064\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\076\uff77\100\uff77\101\uff77\102\uff77\103" +
    "\uff77\104\uff77\105\uff77\110\uff77\111\uff77\112\uff77\113\uff77" +
    "\116\uff77\117\uff77\120\uff77\121\uff77\123\uff77\124\uff77\125" +
    "\uff77\126\uff77\001\002\000\064\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\076\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\110\uffb7\111\uffb7\112\uffb7" +
    "\113\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7\123\uffb7\124" +
    "\235\125\uffb7\126\uffb7\001\002\000\064\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\076\uffb7\100\uffb7\101" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\110\uffb7\111\uffb7" +
    "\112\uffb7\113\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7\123" +
    "\uffb7\124\235\125\uffb7\126\uffb7\001\002\000\064\043\uff6c" +
    "\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\076\uff6c\100" +
    "\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c\110\uff6c" +
    "\111\uff6c\112\uff6c\113\uff6c\116\uff6c\117\uff6c\120\uff6c\121" +
    "\uff6c\123\uff6c\124\uff6c\125\uff6c\126\uff6c\001\002\000\064" +
    "\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\076" +
    "\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d" +
    "\110\uff6d\111\uff6d\112\uff6d\113\uff6d\116\uff6d\117\uff6d\120" +
    "\uff6d\121\uff6d\123\uff6d\124\uff6d\125\uff6d\126\uff6d\001\002" +
    "\000\072\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050" +
    "\uff7a\067\301\076\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a" +
    "\104\uff7a\105\uff7a\106\303\107\302\110\uff7a\111\uff7a\112" +
    "\uff7a\113\uff7a\116\uff7a\117\uff7a\120\uff7a\121\uff7a\123\uff7a" +
    "\124\uff7a\125\uff7a\126\uff7a\001\002\000\024\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\130\010\001\002\000\064\043\uff6f\044\uff6f\045\uff6f\046" +
    "\uff6f\047\uff6f\050\uff6f\076\uff6f\100\uff6f\101\uff6f\102\uff6f" +
    "\103\uff6f\104\uff6f\105\uff6f\110\uff6f\111\uff6f\112\uff6f\113" +
    "\uff6f\116\uff6f\117\uff6f\120\uff6f\121\uff6f\123\uff6f\124\uff6f" +
    "\125\uff6f\126\uff6f\001\002\000\064\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\076\uff73\100\uff73\101\uff73" +
    "\102\uff73\103\uff73\104\uff73\105\uff73\110\uff73\111\uff73\112" +
    "\uff73\113\uff73\116\uff73\117\uff73\120\uff73\121\uff73\123\uff73" +
    "\124\uff73\125\uff73\126\uff73\001\002\000\064\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\076\uffbb\100\uffbb" +
    "\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\110\uffbb\111" +
    "\uffbb\112\uffbb\113\uffbb\116\051\117\uffbb\120\uffbb\121\uffbb" +
    "\123\uffbb\124\uffbb\125\uffbb\126\uffbb\001\002\000\004\005" +
    "\306\001\002\000\004\036\307\001\002\000\042\025\144" +
    "\051\134\052\150\053\137\054\136\056\142\065\120\101" +
    "\147\106\145\107\133\115\152\122\135\127\141\130\010" +
    "\131\146\132\140\001\002\000\052\043\162\044\164\045" +
    "\176\046\165\047\171\050\166\100\163\101\200\102\172" +
    "\103\174\104\203\105\161\110\175\111\202\112\177\113" +
    "\173\116\167\120\170\124\201\125\311\001\002\000\112" +
    "\005\uffad\016\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\053\uffad\055\uffad\057\uffad\061\uffad\063\uffad\064\uffad" +
    "\065\uffad\070\uffad\071\uffad\072\uffad\073\uffad\075\uffad\106" +
    "\uffad\107\uffad\121\uffad\130\uffad\001\002\000\042\025\144" +
    "\051\134\052\150\053\137\054\136\056\142\065\120\101" +
    "\147\106\145\107\133\115\152\122\135\127\141\130\010" +
    "\131\146\132\140\001\002\000\052\043\162\044\164\045" +
    "\176\046\165\047\171\050\166\100\163\101\200\102\172" +
    "\103\174\104\203\105\161\110\175\111\202\112\177\113" +
    "\173\116\167\120\170\123\314\124\201\001\002\000\006" +
    "\123\uffa9\125\uffa9\001\002\000\006\066\uffb7\124\235\001" +
    "\002\000\006\066\uffb7\124\235\001\002\000\004\066\320" +
    "\001\002\000\004\122\255\001\002\000\064\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\076\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9" +
    "\123\uffb9\124\uffb9\125\uffb9\126\uffb9\001\002\000\004\066" +
    "\323\001\002\000\004\122\255\001\002\000\064\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\076\uffba\100" +
    "\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\110\uffba" +
    "\111\uffba\112\uffba\113\uffba\116\uffba\117\uffba\120\uffba\121" +
    "\uffba\123\uffba\124\uffba\125\uffba\126\uffba\001\002\000\112" +
    "\005\uffb5\016\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\053\uffb5\055\uffb5\057\uffb5\061\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\075\uffb5\106" +
    "\uffb5\107\uffb5\121\uffb5\130\uffb5\001\002\000\050\002\uffdb" +
    "\005\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\074\uffdb\130\uffdb\001\002\000" +
    "\052\043\162\044\164\045\176\046\165\047\171\050\166" +
    "\100\163\101\200\102\172\103\174\104\203\105\161\110" +
    "\175\111\202\112\177\113\173\116\167\120\170\124\201" +
    "\126\330\001\002\000\100\005\ufff9\016\106\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\031\102\033\077\035\115\036\114\037\072\040\123\041" +
    "\100\042\105\053\103\055\074\057\101\061\122\063\111" +
    "\064\070\065\120\070\110\073\076\075\117\106\067\107" +
    "\073\130\010\001\002\000\004\005\332\001\002\000\112" +
    "\005\uffb1\016\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\053\uffb1\055\uffb1\057\uffb1\061\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\075\uffb1\106" +
    "\uffb1\107\uffb1\121\uffb1\130\uffb1\001\002\000\052\043\162" +
    "\044\164\045\176\046\165\047\171\050\166\100\163\101" +
    "\200\102\172\103\174\104\203\105\161\110\175\111\202" +
    "\112\177\113\173\116\167\120\170\124\201\126\334\001" +
    "\002\000\100\005\ufff9\016\106\021\044\022\025\023\034" +
    "\024\032\025\037\026\033\027\045\030\040\031\102\033" +
    "\077\035\115\036\114\037\072\040\123\041\100\042\105" +
    "\053\103\055\074\057\101\061\122\063\111\064\070\065" +
    "\120\070\110\073\076\075\117\106\067\107\073\130\010" +
    "\001\002\000\004\005\336\001\002\000\112\005\uffb0\016" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\053\uffb0" +
    "\055\uffb0\057\uffb0\061\uffb0\063\uffb0\064\uffb0\065\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\075\uffb0\106\uffb0\107\uffb0" +
    "\121\uffb0\130\uffb0\001\002\000\112\005\uffac\016\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\053\uffac\055\uffac" +
    "\057\uffac\061\uffac\063\uffac\064\uffac\065\uffac\070\uffac\071" +
    "\uffac\072\uffac\073\uffac\075\uffac\106\uffac\107\uffac\121\uffac" +
    "\130\uffac\001\002\000\104\005\ufff9\016\106\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\031\102\033\077\035\115\036\114\037\072\040\123\041" +
    "\100\042\105\053\103\055\074\057\101\061\122\063\111" +
    "\064\070\065\120\070\110\071\ufff9\072\ufff9\073\076\075" +
    "\117\106\067\107\073\130\010\001\002\000\010\005\uff90" +
    "\071\343\072\uff90\001\002\000\006\005\353\072\352\001" +
    "\002\000\004\130\010\001\002\000\006\124\235\130\uffb7" +
    "\001\002\000\004\130\010\001\002\000\004\126\347\001" +
    "\002\000\104\005\ufff9\016\106\021\044\022\025\023\034" +
    "\024\032\025\037\026\033\027\045\030\040\031\102\033" +
    "\077\035\115\036\114\037\072\040\123\041\100\042\105" +
    "\053\103\055\074\057\101\061\122\063\111\064\070\065" +
    "\120\070\110\071\ufff9\072\ufff9\073\076\075\117\106\067" +
    "\107\073\130\010\001\002\000\010\005\uff90\071\343\072" +
    "\uff90\001\002\000\006\005\uff91\072\uff91\001\002\000\004" +
    "\126\354\001\002\000\112\005\uff93\016\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\042\uff93\053\uff93\055\uff93\057\uff93" +
    "\061\uff93\063\uff93\064\uff93\065\uff93\070\uff93\071\uff93\072" +
    "\uff93\073\uff93\075\uff93\106\uff93\107\uff93\121\uff93\130\uff93" +
    "\001\002\000\100\005\ufff9\016\106\021\044\022\025\023" +
    "\034\024\032\025\037\026\033\027\045\030\040\031\102" +
    "\033\077\035\115\036\114\037\072\040\123\041\100\042" +
    "\105\053\103\055\074\057\101\061\122\063\111\064\070" +
    "\065\120\070\110\073\076\075\117\106\067\107\073\130" +
    "\010\001\002\000\004\005\356\001\002\000\112\005\uff92" +
    "\016\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\053" +
    "\uff92\055\uff92\057\uff92\061\uff92\063\uff92\064\uff92\065\uff92" +
    "\070\uff92\071\uff92\072\uff92\073\uff92\075\uff92\106\uff92\107" +
    "\uff92\121\uff92\130\uff92\001\002\000\004\123\360\001\002" +
    "\000\006\123\uff96\125\uff96\001\002\000\054\043\162\044" +
    "\164\045\176\046\165\047\171\050\166\100\163\101\200" +
    "\102\172\103\174\104\203\105\161\110\175\111\202\112" +
    "\177\113\173\116\167\120\170\123\uffa4\124\201\125\uffa4" +
    "\001\002\000\016\005\ufffa\032\ufffa\034\ufffa\071\ufffa\072" +
    "\ufffa\121\ufffa\001\002\000\006\106\365\107\364\001\002" +
    "\000\006\123\uff9a\125\uff9a\001\002\000\006\123\uff9e\125" +
    "\uff9e\001\002\000\052\043\162\044\164\045\176\046\165" +
    "\047\171\050\166\100\163\101\200\102\172\103\174\104" +
    "\203\105\161\110\175\111\202\112\177\113\173\116\167" +
    "\120\170\124\201\126\367\001\002\000\104\005\ufff9\016" +
    "\106\021\044\022\025\023\034\024\032\025\037\026\033" +
    "\027\045\030\040\031\102\032\ufff9\033\077\034\ufff9\035" +
    "\115\036\114\037\072\040\123\041\100\042\105\053\103" +
    "\055\074\057\101\061\122\063\111\064\070\065\120\070" +
    "\110\073\076\075\117\106\067\107\073\130\010\001\002" +
    "\000\010\005\uff8e\032\uff8e\034\uff8e\001\002\000\010\005" +
    "\374\032\373\034\372\001\002\000\042\025\144\051\134" +
    "\052\150\053\137\054\136\056\142\065\120\101\147\106" +
    "\145\107\133\115\152\122\135\127\141\130\010\131\146" +
    "\132\140\001\002\000\004\126\377\001\002\000\112\005" +
    "\uffb2\016\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\053\uffb2\055\uffb2\057\uffb2\061\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\075\uffb2\106\uffb2" +
    "\107\uffb2\121\uffb2\130\uffb2\001\002\000\004\005\376\001" +
    "\002\000\112\005\uffb3\016\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\053\uffb3\055\uffb3\057\uffb3\061\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\075\uffb3\106\uffb3\107\uffb3\121\uffb3\130\uffb3\001\002\000" +
    "\100\005\ufff9\016\106\021\044\022\025\023\034\024\032" +
    "\025\037\026\033\027\045\030\040\031\102\033\077\035" +
    "\115\036\114\037\072\040\123\041\100\042\105\053\103" +
    "\055\074\057\101\061\122\063\111\064\070\065\120\070" +
    "\110\073\076\075\117\106\067\107\073\130\010\001\002" +
    "\000\004\005\uff8d\001\002\000\052\043\162\044\164\045" +
    "\176\046\165\047\171\050\166\100\163\101\200\102\172" +
    "\103\174\104\203\105\161\110\175\111\202\112\177\113" +
    "\173\116\167\120\170\124\201\126\u0102\001\002\000\104" +
    "\005\ufff9\016\106\021\044\022\025\023\034\024\032\025" +
    "\037\026\033\027\045\030\040\031\102\032\ufff9\033\077" +
    "\034\ufff9\035\115\036\114\037\072\040\123\041\100\042" +
    "\105\053\103\055\074\057\101\061\122\063\111\064\070" +
    "\065\120\070\110\073\076\075\117\106\067\107\073\130" +
    "\010\001\002\000\010\005\uff8f\032\uff8f\034\uff8f\001\002" +
    "\000\042\025\144\051\134\052\150\053\137\054\136\056" +
    "\142\065\120\101\147\106\145\107\133\115\152\122\135" +
    "\127\141\130\010\131\146\132\140\001\002\000\052\043" +
    "\162\044\164\045\176\046\165\047\171\050\166\100\163" +
    "\101\200\102\172\103\174\104\203\105\161\110\175\111" +
    "\202\112\177\113\173\116\167\120\170\123\u0106\124\201" +
    "\001\002\000\006\123\uffa2\125\uffa2\001\002\000\052\043" +
    "\162\044\164\045\176\046\165\047\171\050\166\100\163" +
    "\101\200\102\172\103\174\104\203\105\161\110\175\111" +
    "\202\112\177\113\173\116\167\120\170\124\201\126\u0108" +
    "\001\002\000\100\005\ufff9\016\106\021\044\022\025\023" +
    "\034\024\032\025\037\026\033\027\045\030\040\031\102" +
    "\033\077\035\115\036\114\037\072\040\123\041\100\042" +
    "\105\053\103\055\074\057\101\061\122\063\111\064\070" +
    "\065\120\070\110\073\076\075\117\106\067\107\073\130" +
    "\010\001\002\000\004\005\u010a\001\002\000\112\005\uffaf" +
    "\016\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\053" +
    "\uffaf\055\uffaf\057\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\075\uffaf\106\uffaf\107" +
    "\uffaf\121\uffaf\130\uffaf\001\002\000\004\005\u010c\001\002" +
    "\000\112\005\uffb4\016\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\053\uffb4\055\uffb4\057\uffb4\061\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\075" +
    "\uffb4\106\uffb4\107\uffb4\121\uffb4\130\uffb4\001\002\000\010" +
    "\123\uffb7\124\235\125\uffb7\001\002\000\010\123\uffb7\124" +
    "\235\125\uffb7\001\002\000\006\123\uff94\125\uff94\001\002" +
    "\000\006\123\uff95\125\uff95\001\002\000\042\025\144\051" +
    "\134\052\150\053\137\054\136\056\142\065\120\101\147" +
    "\106\145\107\133\115\152\122\135\127\141\130\010\131" +
    "\146\132\140\001\002\000\012\106\u011b\107\u011a\116\uffc5" +
    "\130\uffc5\001\002\000\042\025\144\051\134\052\150\053" +
    "\137\054\136\056\142\065\120\101\147\106\145\107\133" +
    "\115\152\122\135\127\141\130\010\131\146\132\140\001" +
    "\002\000\042\025\144\051\134\052\150\053\137\054\136" +
    "\056\142\065\120\101\147\106\145\107\133\115\152\122" +
    "\135\127\141\130\010\131\146\132\140\001\002\000\052" +
    "\043\162\044\164\045\176\046\165\047\171\050\166\100" +
    "\163\101\200\102\172\103\174\104\203\105\161\110\175" +
    "\111\202\112\177\113\173\116\167\117\u0116\120\170\124" +
    "\201\001\002\000\004\114\u0117\001\002\000\042\025\144" +
    "\051\134\052\150\053\137\054\136\056\142\065\120\101" +
    "\147\106\145\107\133\115\152\122\135\127\141\130\010" +
    "\131\146\132\140\001\002\000\054\043\162\044\164\045" +
    "\176\046\165\047\171\050\166\100\163\101\200\102\172" +
    "\103\174\104\203\105\161\110\175\111\202\112\177\113" +
    "\173\116\167\120\170\123\uffa5\124\201\125\uffa5\001\002" +
    "\000\054\043\162\044\164\045\176\046\165\047\171\050" +
    "\166\100\163\101\200\102\172\103\174\104\203\105\161" +
    "\110\175\111\202\112\177\113\173\116\167\120\170\123" +
    "\uffa7\124\201\125\uffa7\001\002\000\006\123\uff9b\125\uff9b" +
    "\001\002\000\006\123\uff9f\125\uff9f\001\002\000\052\043" +
    "\162\044\164\045\176\046\165\047\171\050\166\100\163" +
    "\101\200\102\172\103\174\104\203\105\161\110\175\111" +
    "\202\112\177\113\173\116\167\120\170\121\u011d\124\201" +
    "\001\002\000\004\114\u011e\001\002\000\042\025\144\051" +
    "\134\052\150\053\137\054\136\056\142\065\120\101\147" +
    "\106\145\107\133\115\152\122\135\127\141\130\010\131" +
    "\146\132\140\001\002\000\054\043\162\044\164\045\176" +
    "\046\165\047\171\050\166\100\163\101\200\102\172\103" +
    "\174\104\203\105\161\110\175\111\202\112\177\113\173" +
    "\116\167\120\170\123\uffa6\124\201\125\uffa6\001\002\000" +
    "\042\025\144\051\134\052\150\053\137\054\136\056\142" +
    "\065\120\101\147\106\145\107\133\115\152\122\135\127" +
    "\141\130\010\131\146\132\140\001\002\000\052\043\162" +
    "\044\164\045\176\046\165\047\171\050\166\100\163\101" +
    "\200\102\172\103\174\104\203\105\161\110\175\111\202" +
    "\112\177\113\173\116\167\120\170\123\u0122\124\201\001" +
    "\002\000\006\123\uffa3\125\uffa3\001\002\000\010\123\uffb7" +
    "\124\235\125\uffb7\001\002\000\010\123\uffb7\124\235\125" +
    "\uffb7\001\002\000\006\123\uff98\125\uff98\001\002\000\006" +
    "\123\uff99\125\uff99\001\002\000\054\016\106\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\042\105\053\103\055\074\057\101\061\122\063\111\064" +
    "\070\065\120\073\076\106\067\107\073\130\010\001\002" +
    "\000\004\125\u012b\001\002\000\006\116\051\130\010\001" +
    "\002\000\004\114\127\001\002\000\042\025\144\051\134" +
    "\052\150\053\137\054\136\056\142\065\120\101\147\106" +
    "\145\107\133\115\152\122\135\127\141\130\010\131\146" +
    "\132\140\001\002\000\052\043\162\044\164\045\176\046" +
    "\165\047\171\050\166\100\163\101\200\102\172\103\174" +
    "\104\203\105\161\110\175\111\202\112\177\113\173\116" +
    "\167\120\170\124\201\125\u012d\001\002\000\054\016\106" +
    "\021\044\022\025\023\034\024\032\025\037\026\033\027" +
    "\045\030\040\042\105\053\103\055\074\057\101\061\122" +
    "\063\111\064\070\065\120\073\076\106\067\107\073\130" +
    "\010\001\002\000\004\123\u012f\001\002\000\004\126\u0130" +
    "\001\002\000\100\005\ufff9\016\106\021\044\022\025\023" +
    "\034\024\032\025\037\026\033\027\045\030\040\031\102" +
    "\033\077\035\115\036\114\037\072\040\123\041\100\042" +
    "\105\053\103\055\074\057\101\061\122\063\111\064\070" +
    "\065\120\070\110\073\076\075\117\106\067\107\073\130" +
    "\010\001\002\000\004\005\u0132\001\002\000\112\005\uffae" +
    "\016\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\053" +
    "\uffae\055\uffae\057\uffae\061\uffae\063\uffae\064\uffae\065\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\075\uffae\106\uffae\107" +
    "\uffae\121\uffae\130\uffae\001\002\000\010\123\uffb7\124\235" +
    "\125\uffb7\001\002\000\010\123\uffb7\124\235\125\uffb7\001" +
    "\002\000\006\123\uff9c\125\uff9c\001\002\000\006\123\uff9d" +
    "\125\uff9d\001\002\000\066\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\076\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\105\uffc2\110\uffc2\111\uffc2\112\uffc2\113" +
    "\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\123\uffc2\124\uffc2" +
    "\125\uffc2\126\uffc2\130\uffc2\001\002\000\066\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\076\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\110\uffbe\111" +
    "\uffbe\112\uffbe\113\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe" +
    "\123\uffbe\124\uffbe\125\uffbe\126\uffbe\130\uffbe\001\002\000" +
    "\066\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105" +
    "\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\121\uffb7\123\uffb7\124\235\125\uffb7\126\uffb7\130" +
    "\uffb7\001\002\000\004\120\u013e\001\002\000\066\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\076\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\110\uffbf" +
    "\111\uffbf\112\uffbf\113\uffbf\116\uffbf\117\uffbf\120\uffbf\121" +
    "\uffbf\123\uffbf\124\uffbf\125\uffbf\126\uffbf\130\uffbf\001\002" +
    "\000\066\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\116\uffc0\117" +
    "\uffc0\120\uffc0\121\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0" +
    "\130\uffc0\001\002\000\066\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\076\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1\123\uffc1\124\uffc1" +
    "\125\uffc1\126\uffc1\130\uffc1\001\002\000\024\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\130\010\001\002\000\006\116\051\121\u0140\001\002\000" +
    "\066\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\076\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\116\uffbc\117\uffbc" +
    "\120\uffbc\121\uffbc\123\uffbc\124\uffbc\125\uffbc\126\uffbc\130" +
    "\uffbc\001\002\000\066\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\076\uffbd\100\uffbd\101\uffbd\102\uffbd\103" +
    "\uffbd\104\uffbd\105\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd" +
    "\116\uffbd\117\uffbd\120\uffbd\121\uffbd\123\uffbd\124\uffbd\125" +
    "\uffbd\126\uffbd\130\uffbd\001\002\000\024\021\044\022\025" +
    "\023\034\024\032\025\037\026\033\027\045\030\040\130" +
    "\010\001\002\000\006\076\u0144\116\051\001\002\000\024" +
    "\021\044\022\025\023\034\024\032\025\037\026\033\027" +
    "\045\030\040\130\010\001\002\000\006\116\051\121\u0146" +
    "\001\002\000\066\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\076\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6" +
    "\104\uffc6\105\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\116" +
    "\uffc6\117\uffc6\120\uffc6\121\uffc6\123\uffc6\124\uffc6\125\uffc6" +
    "\126\uffc6\130\uffc6\001\002\000\004\126\u0148\001\002\000" +
    "\100\005\ufff9\016\106\021\044\022\025\023\034\024\032" +
    "\025\037\026\033\027\045\030\040\031\102\033\077\035" +
    "\115\036\114\037\072\040\123\041\100\042\105\053\103" +
    "\055\074\057\101\061\122\063\111\064\070\065\120\070" +
    "\110\073\076\075\117\106\067\107\073\130\010\001\002" +
    "\000\004\005\u014a\001\002\000\050\002\uffde\005\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\015\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\074\uffde\130\uffde\001\002\000\024\021\044" +
    "\022\025\023\034\024\032\025\037\026\033\027\045\030" +
    "\040\130\010\001\002\000\004\130\010\001\002\000\004" +
    "\013\u015e\001\002\000\006\116\051\130\010\001\002\000" +
    "\004\130\010\001\002\000\006\014\u0151\126\u0152\001\002" +
    "\000\004\130\010\001\002\000\046\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\074\ufff3\130\ufff3\001\002\000\046\005\u0154\010\031" +
    "\011\027\012\035\013\021\015\036\017\030\020\046\021" +
    "\044\022\025\023\034\024\032\025\037\026\033\027\045" +
    "\030\040\074\022\130\010\001\002\000\050\002\uffe7\005" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\074\uffe7\130\uffe7\001\002\000\004" +
    "\126\u0156\001\002\000\046\005\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074" +
    "\ufff3\130\ufff3\001\002\000\046\005\u0158\010\031\011\027" +
    "\012\035\013\021\015\036\017\030\020\046\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\074\022\130\010\001\002\000\050\002\uffe8\005\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\074\uffe8\130\uffe8\001\002\000\006\114\u015b" +
    "\125\u015a\001\002\000\050\002\uffd7\005\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\074\uffd7\130\uffd7\001\002\000\026\025\144\051\134" +
    "\052\150\054\136\056\142\101\147\122\255\127\141\131" +
    "\146\132\140\001\002\000\004\125\u015d\001\002\000\050" +
    "\002\uffd3\005\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\074\uffd3\130\uffd3\001" +
    "\002\000\004\130\010\001\002\000\006\014\u0160\126\u0161" +
    "\001\002\000\004\130\010\001\002\000\046\005\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\074\ufff3\130\ufff3\001\002\000\046\005\u0163" +
    "\010\031\011\027\012\035\013\021\015\036\017\030\020" +
    "\046\021\044\022\025\023\034\024\032\025\037\026\033" +
    "\027\045\030\040\074\022\130\010\001\002\000\050\002" +
    "\uffdf\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\074\uffdf\130\uffdf\001\002" +
    "\000\004\126\u0165\001\002\000\046\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\074\ufff3\130\ufff3\001\002\000\046\005\u0167\010\031" +
    "\011\027\012\035\013\021\015\036\017\030\020\046\021" +
    "\044\022\025\023\034\024\032\025\037\026\033\027\045" +
    "\030\040\074\022\130\010\001\002\000\050\002\uffe0\005" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\074\uffe0\130\uffe0\001\002\000\004" +
    "\122\u0169\001\002\000\004\127\u016a\001\002\000\004\123" +
    "\u016b\001\002\000\004\125\u016c\001\002\000\050\002\uffef" +
    "\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\074\uffef\130\uffef\001\002\000" +
    "\006\116\051\130\010\001\002\000\004\122\054\001\002" +
    "\000\004\126\u0170\001\002\000\100\005\ufff9\016\106\021" +
    "\044\022\025\023\034\024\032\025\037\026\033\027\045" +
    "\030\040\031\102\033\077\035\115\036\114\037\072\040" +
    "\123\041\100\042\105\053\103\055\074\057\101\061\122" +
    "\063\111\064\070\065\120\070\110\073\076\075\117\106" +
    "\067\107\073\130\010\001\002\000\004\005\u0172\001\002" +
    "\000\050\002\uffda\005\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\074\uffda\130" +
    "\uffda\001\002\000\024\021\044\022\025\023\034\024\032" +
    "\025\037\026\033\027\045\030\040\130\010\001\002\000" +
    "\004\130\010\001\002\000\004\013\u0186\001\002\000\006" +
    "\116\051\130\010\001\002\000\004\130\010\001\002\000" +
    "\006\014\u0179\126\u017a\001\002\000\004\130\010\001\002" +
    "\000\046\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074\ufff3\130\ufff3\001" +
    "\002\000\046\005\u017c\010\031\011\027\012\035\013\021" +
    "\015\036\017\030\020\046\021\044\022\025\023\034\024" +
    "\032\025\037\026\033\027\045\030\040\074\022\130\010" +
    "\001\002\000\050\002\uffee\005\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\074" +
    "\uffee\130\uffee\001\002\000\004\126\u017e\001\002\000\046" +
    "\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\074\ufff3\130\ufff3\001\002\000" +
    "\046\005\u0180\010\031\011\027\012\035\013\021\015\036" +
    "\017\030\020\046\021\044\022\025\023\034\024\032\025" +
    "\037\026\033\027\045\030\040\074\022\130\010\001\002" +
    "\000\050\002\uffed\005\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\074\uffed\130" +
    "\uffed\001\002\000\006\114\u0183\125\u0182\001\002\000\050" +
    "\002\uffd6\005\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\074\uffd6\130\uffd6\001" +
    "\002\000\026\025\144\051\134\052\150\054\136\056\142" +
    "\101\147\122\255\127\141\131\146\132\140\001\002\000" +
    "\004\125\u0185\001\002\000\050\002\uffd2\005\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\074\uffd2\130\uffd2\001\002\000\004\130\010\001" +
    "\002\000\006\014\u0188\126\u0189\001\002\000\004\130\010" +
    "\001\002\000\046\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074\ufff3\130" +
    "\ufff3\001\002\000\046\005\u018b\010\031\011\027\012\035" +
    "\013\021\015\036\017\030\020\046\021\044\022\025\023" +
    "\034\024\032\025\037\026\033\027\045\030\040\074\022" +
    "\130\010\001\002\000\050\002\uffe6\005\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\074\uffe6\130\uffe6\001\002\000\004\126\u018d\001\002" +
    "\000\046\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074\ufff3\130\ufff3\001" +
    "\002\000\046\005\u018f\010\031\011\027\012\035\013\021" +
    "\015\036\017\030\020\046\021\044\022\025\023\034\024" +
    "\032\025\037\026\033\027\045\030\040\074\022\130\010" +
    "\001\002\000\050\002\uffe5\005\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\074" +
    "\uffe5\130\uffe5\001\002\000\004\122\u0191\001\002\000\004" +
    "\127\u0192\001\002\000\004\123\u0193\001\002\000\004\125" +
    "\u0194\001\002\000\050\002\ufff1\005\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\074\ufff1\130\ufff1\001\002\000\006\116\051\130\010\001" +
    "\002\000\004\122\054\001\002\000\004\126\u0198\001\002" +
    "\000\100\005\ufff9\016\106\021\044\022\025\023\034\024" +
    "\032\025\037\026\033\027\045\030\040\031\102\033\077" +
    "\035\115\036\114\037\072\040\123\041\100\042\105\053" +
    "\103\055\074\057\101\061\122\063\111\064\070\065\120" +
    "\070\110\073\076\075\117\106\067\107\073\130\010\001" +
    "\002\000\004\005\u019a\001\002\000\050\002\uffdd\005\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\074\uffdd\130\uffdd\001\002\000\004\130" +
    "\010\001\002\000\006\014\u019d\126\u019e\001\002\000\004" +
    "\130\010\001\002\000\046\005\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074" +
    "\ufff3\130\ufff3\001\002\000\046\005\u01a0\010\031\011\027" +
    "\012\035\013\021\015\036\017\030\020\046\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\074\022\130\010\001\002\000\050\002\uffe1\005\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\074\uffe1\130\uffe1\001\002\000\004\126\u01a2" +
    "\001\002\000\046\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074\ufff3\130" +
    "\ufff3\001\002\000\046\005\u01a4\010\031\011\027\012\035" +
    "\013\021\015\036\017\030\020\046\021\044\022\025\023" +
    "\034\024\032\025\037\026\033\027\045\030\040\074\022" +
    "\130\010\001\002\000\050\002\uffe2\005\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\074\uffe2\130\uffe2\001\002\000\024\021\044\022\025" +
    "\023\034\024\032\025\037\026\033\027\045\030\040\130" +
    "\010\001\002\000\004\130\010\001\002\000\004\013\u01b8" +
    "\001\002\000\006\116\051\130\010\001\002\000\004\130" +
    "\010\001\002\000\006\014\u01ab\126\u01ac\001\002\000\004" +
    "\130\010\001\002\000\046\005\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074" +
    "\ufff3\130\ufff3\001\002\000\046\005\u01ae\010\031\011\027" +
    "\012\035\013\021\015\036\017\030\020\046\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\074\022\130\010\001\002\000\050\002\uffeb\005\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\074\uffeb\130\uffeb\001\002\000\004\126\u01b0" +
    "\001\002\000\046\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074\ufff3\130" +
    "\ufff3\001\002\000\046\005\u01b2\010\031\011\027\012\035" +
    "\013\021\015\036\017\030\020\046\021\044\022\025\023" +
    "\034\024\032\025\037\026\033\027\045\030\040\074\022" +
    "\130\010\001\002\000\050\002\uffec\005\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\015\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\074\uffec\130\uffec\001\002\000\006\114\u01b5\125\u01b4" +
    "\001\002\000\050\002\uffd8\005\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074" +
    "\uffd8\130\uffd8\001\002\000\026\025\144\051\134\052\150" +
    "\054\136\056\142\101\147\122\255\127\141\131\146\132" +
    "\140\001\002\000\004\125\u01b7\001\002\000\050\002\uffd4" +
    "\005\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\074\uffd4\130\uffd4\001\002\000" +
    "\004\130\010\001\002\000\006\014\u01ba\126\u01bb\001\002" +
    "\000\004\130\010\001\002\000\046\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\074\ufff3\130\ufff3\001\002\000\046\005\u01bd\010\031" +
    "\011\027\012\035\013\021\015\036\017\030\020\046\021" +
    "\044\022\025\023\034\024\032\025\037\026\033\027\045" +
    "\030\040\074\022\130\010\001\002\000\050\002\uffe3\005" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\074\uffe3\130\uffe3\001\002\000\004" +
    "\126\u01bf\001\002\000\046\005\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074" +
    "\ufff3\130\ufff3\001\002\000\046\005\u01c1\010\031\011\027" +
    "\012\035\013\021\015\036\017\030\020\046\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\074\022\130\010\001\002\000\050\002\uffe4\005\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\074\uffe4\130\uffe4\001\002\000\004\122\u01c3" +
    "\001\002\000\004\127\u01c4\001\002\000\004\123\u01c5\001" +
    "\002\000\004\125\u01c6\001\002\000\050\002\ufff0\005\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\074\ufff0\130\ufff0\001\002\000\006\116" +
    "\051\130\010\001\002\000\004\122\054\001\002\000\004" +
    "\126\u01ca\001\002\000\100\005\ufff9\016\106\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\031\102\033\077\035\115\036\114\037\072\040\123\041" +
    "\100\042\105\053\103\055\074\057\101\061\122\063\111" +
    "\064\070\065\120\070\110\073\076\075\117\106\067\107" +
    "\073\130\010\001\002\000\004\005\u01cc\001\002\000\050" +
    "\002\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\074\uffdc\130\uffdc\001" +
    "\002\000\006\114\u01cf\125\u01ce\001\002\000\050\002\uffd9" +
    "\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\074\uffd9\130\uffd9\001\002\000" +
    "\026\025\144\051\134\052\150\054\136\056\142\101\147" +
    "\122\255\127\141\131\146\132\140\001\002\000\004\125" +
    "\u01d1\001\002\000\050\002\uffd5\005\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\074\uffd5\130\uffd5\001\002\000\004\122\u01d3\001\002\000" +
    "\004\127\u01d4\001\002\000\004\123\u01d5\001\002\000\004" +
    "\125\u01d6\001\002\000\050\002\ufff2\005\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\074\ufff2\130\ufff2\001\002\000\006\014\u01d8\126\u01d9" +
    "\001\002\000\004\130\010\001\002\000\046\005\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\074\ufff3\130\ufff3\001\002\000\046\005\u01db" +
    "\010\031\011\027\012\035\013\021\015\036\017\030\020" +
    "\046\021\044\022\025\023\034\024\032\025\037\026\033" +
    "\027\045\030\040\074\022\130\010\001\002\000\050\002" +
    "\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\074\uffe9\130\uffe9\001\002" +
    "\000\004\126\u01dd\001\002\000\046\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\074\ufff3\130\ufff3\001\002\000\046\005\u01df\010\031" +
    "\011\027\012\035\013\021\015\036\017\030\020\046\021" +
    "\044\022\025\023\034\024\032\025\037\026\033\027\045" +
    "\030\040\074\022\130\010\001\002\000\050\002\uffea\005" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\074\uffea\130\uffea\001\002\000\004" +
    "\005\u01e1\001\002\000\046\002\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\074" +
    "\ufff3\130\ufff3\001\002\000\046\002\ufffc\010\031\011\027" +
    "\012\035\013\021\015\036\017\030\020\046\021\044\022" +
    "\025\023\034\024\032\025\037\026\033\027\045\030\040" +
    "\074\022\130\010\001\002\000\006\124\235\125\uffb7\001" +
    "\002\000\004\125\u01e5\001\002\000\054\002\ufffe\004\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\062\ufffe\074\ufffe\130\ufffe\001" +
    "\002\000\100\005\ufff9\016\106\021\044\022\025\023\034" +
    "\024\032\025\037\026\033\027\045\030\040\031\102\033" +
    "\077\035\115\036\114\037\072\040\123\041\100\042\105" +
    "\053\103\055\074\057\101\061\122\063\111\064\070\065" +
    "\120\070\110\073\076\075\117\106\067\107\073\130\010" +
    "\001\002\000\004\005\u01e8\001\002\000\046\002\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\074\ufff3\130\ufff3\001\002\000\046\002\ufffb" +
    "\010\031\011\027\012\035\013\021\015\036\017\030\020" +
    "\046\021\044\022\025\023\034\024\032\025\037\026\033" +
    "\027\045\030\040\074\022\130\010\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e7\000\004\002\004\001\001\000\004\022\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u01e2\001\001\000\024\005\u01df\012\106\015" +
    "\123\016\103\022\074\026\070\027\112\031\120\036\111" +
    "\001\001\000\020\007\042\010\017\011\022\013\041\015" +
    "\025\022\023\030\040\001\001\000\002\001\001\000\004" +
    "\022\u01d6\001\001\000\004\022\u01d1\001\001\000\002\001" +
    "\001\000\004\032\265\001\001\000\002\001\001\000\004" +
    "\022\u01cc\001\001\000\006\015\u01a7\022\023\001\001\000" +
    "\002\001\001\000\006\015\u0175\022\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u014d\022\023\001\001\000\004\014\u0146\001\001\000\002" +
    "\001\001\000\004\022\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\046\022\023\001\001\000\004\022" +
    "\047\001\001\000\004\014\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\054\022" +
    "\023\023\056\001\001\000\004\022\064\001\001\000\002" +
    "\001\001\000\004\035\060\001\001\000\010\015\054\022" +
    "\023\023\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\115\012\106\015\123\016\103\022\074" +
    "\026\070\027\112\031\120\036\111\001\001\000\004\022" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0122\001\001\000\002\001\001\000" +
    "\004\032\u0111\001\001\000\004\022\u010c\001\001\000\024" +
    "\005\u010a\012\106\015\123\016\103\022\074\026\070\027" +
    "\112\031\120\036\111\001\001\000\016\017\u0106\020\150" +
    "\021\152\022\131\031\130\033\127\001\001\000\002\001" +
    "\001\000\016\017\365\020\150\021\152\022\131\031\130" +
    "\033\127\001\001\000\004\032\362\001\001\000\024\005" +
    "\361\012\106\015\123\016\103\022\074\026\070\027\112" +
    "\031\120\036\111\001\001\000\016\017\360\020\150\021" +
    "\152\022\131\031\130\033\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\332\020\150" +
    "\021\152\022\131\031\130\033\127\001\001\000\016\017" +
    "\326\020\150\021\152\022\131\031\130\033\127\001\001" +
    "\000\002\001\001\000\020\012\106\015\123\022\074\026" +
    "\324\027\112\031\120\036\111\001\001\000\004\022\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\304\012\106\015\123\016\103\022\074\026\070\027\112" +
    "\031\120\036\111\001\001\000\004\022\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\142\020\150" +
    "\021\152\022\131\031\130\033\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\277\001\001\000\004" +
    "\022\273\001\001\000\002\001\001\000\016\017\271\020" +
    "\150\021\152\022\131\031\130\033\127\001\001\000\002" +
    "\001\001\000\004\032\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\246\022\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\231\001\001\000" +
    "\002\001\001\000\016\017\230\020\150\021\152\022\131" +
    "\031\130\033\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\157\020\150\021\152\022\131\031\130" +
    "\033\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\155\012\106\015\123\016\103\022\074\026\070" +
    "\027\112\031\120\036\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\227\020\150" +
    "\021\152\022\131\031\130\033\127\001\001\000\016\017" +
    "\226\020\150\021\152\022\131\031\130\033\127\001\001" +
    "\000\016\017\225\020\150\021\152\022\131\031\130\033" +
    "\127\001\001\000\016\017\224\020\150\021\152\022\131" +
    "\031\130\033\127\001\001\000\016\017\223\020\150\021" +
    "\152\022\131\031\130\033\127\001\001\000\016\017\222" +
    "\020\150\021\152\022\131\031\130\033\127\001\001\000" +
    "\016\017\220\020\150\021\152\022\131\031\130\033\127" +
    "\001\001\000\016\017\216\020\150\021\152\022\131\031" +
    "\130\033\127\001\001\000\016\017\215\020\150\021\152" +
    "\022\131\031\130\033\127\001\001\000\016\017\214\020" +
    "\150\021\152\022\131\031\130\033\127\001\001\000\016" +
    "\017\213\020\150\021\152\022\131\031\130\033\127\001" +
    "\001\000\016\017\212\020\150\021\152\022\131\031\130" +
    "\033\127\001\001\000\016\017\211\020\150\021\152\022" +
    "\131\031\130\033\127\001\001\000\016\017\210\020\150" +
    "\021\152\022\131\031\130\033\127\001\001\000\016\017" +
    "\207\020\150\021\152\022\131\031\130\033\127\001\001" +
    "\000\016\017\206\020\150\021\152\022\131\031\130\033" +
    "\127\001\001\000\002\001\001\000\016\017\204\020\150" +
    "\021\152\022\131\031\130\033\127\001\001\000\016\017" +
    "\203\020\150\021\152\022\131\031\130\033\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\237\001\001\000\004\032\233\001\001\000\002\001\001" +
    "\000\004\022\235\001\001\000\004\032\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\241\022\023" +
    "\001\001\000\002\001\001\000\006\015\243\022\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\264" +
    "\032\265\001\001\000\002\001\001\000\016\017\251\020" +
    "\150\021\152\022\131\031\130\033\127\001\001\000\004" +
    "\021\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\256\020\150\021\152\022\131" +
    "\031\130\033\127\001\001\000\002\001\001\000\004\034" +
    "\260\001\001\000\016\017\262\020\150\021\152\022\131" +
    "\031\130\033\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\260\001\001\000\002" +
    "\001\001\000\004\032\276\001\001\000\004\032\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\303\022\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\307\020\150\021\152\022\131\031" +
    "\130\033\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\312\020\150\021\152\022\131\031\130\033" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\321\001\001\000\004\032\316\001\001\000\002\001" +
    "\001\000\004\021\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\330\012\106\015\123\016\103\022\074\026\070\027" +
    "\112\031\120\036\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\334\012\106\015" +
    "\123\016\103\022\074\026\070\027\112\031\120\036\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\340\012\106\015\123\016\103\022\074" +
    "\026\070\027\112\031\120\036\111\001\001\000\004\037" +
    "\341\001\001\000\002\001\001\000\004\022\343\001\001" +
    "\000\004\032\344\001\001\000\004\022\345\001\001\000" +
    "\002\001\001\000\024\005\347\012\106\015\123\016\103" +
    "\022\074\026\070\027\112\031\120\036\111\001\001\000" +
    "\004\037\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\354\012\106\015\123\016" +
    "\103\022\074\026\070\027\112\031\120\036\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\367\012\106\015\123\016\103\022\074" +
    "\026\070\027\112\031\120\036\111\001\001\000\004\024" +
    "\370\001\001\000\004\025\374\001\001\000\016\017\u0100" +
    "\020\150\021\152\022\131\031\130\033\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\377\012\106\015\123\016\103\022" +
    "\074\026\070\027\112\031\120\036\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\u0102\012\106\015" +
    "\123\016\103\022\074\026\070\027\112\031\120\036\111" +
    "\001\001\000\002\001\001\000\016\017\u0104\020\150\021" +
    "\152\022\131\031\130\033\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\u0108\012" +
    "\106\015\123\016\103\022\074\026\070\027\112\031\120" +
    "\036\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u010f\001\001" +
    "\000\004\032\u010e\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\u011b\020\150\021\152\022\131\031\130" +
    "\033\127\001\001\000\002\001\001\000\016\017\u0118\020" +
    "\150\021\152\022\131\031\130\033\127\001\001\000\016" +
    "\017\u0114\020\150\021\152\022\131\031\130\033\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\u0117" +
    "\020\150\021\152\022\131\031\130\033\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\u011e\020\150\021\152\022\131\031\130\033\127\001\001" +
    "\000\002\001\001\000\016\017\u0120\020\150\021\152\022" +
    "\131\031\130\033\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0125\001\001\000\004\032\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\u0128" +
    "\022\074\027\u0127\031\120\001\001\000\002\001\001\000" +
    "\004\022\u0129\001\001\000\002\001\001\000\016\017\u012b" +
    "\020\150\021\152\022\131\031\130\033\127\001\001\000" +
    "\002\001\001\000\012\015\u0128\022\074\027\u012d\031\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\u0130\012\106\015\123\016\103\022\074\026\070\027\112" +
    "\031\120\036\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0135\001\001\000\004\032\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u013e\022\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u0142\022\023\001" +
    "\001\000\002\001\001\000\006\015\u0144\022\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\u0148\012\106\015\123\016\103\022\074\026\070" +
    "\027\112\031\120\036\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u016c\022\023\001\001\000\004" +
    "\022\u0167\001\001\000\002\001\001\000\004\022\u0158\001" +
    "\001\000\004\022\u014f\001\001\000\002\001\001\000\004" +
    "\022\u0154\001\001\000\004\006\u0152\001\001\000\020\007" +
    "\042\010\017\011\022\013\041\015\025\022\023\030\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0156\001\001\000\020\007\042\010\017\011\022\013\041" +
    "\015\025\022\023\030\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\u015b\021\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u015e\001\001\000\002\001\001\000\004\022\u0163\001\001" +
    "\000\004\006\u0161\001\001\000\020\007\042\010\017\011" +
    "\022\013\041\015\025\022\023\030\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0165\001\001\000" +
    "\020\007\042\010\017\011\022\013\041\015\025\022\023" +
    "\030\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u016d\001\001\000\004\014\u016e\001" +
    "\001\000\002\001\001\000\024\005\u0170\012\106\015\123" +
    "\016\103\022\074\026\070\027\112\031\120\036\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u0194" +
    "\022\023\001\001\000\004\022\u018f\001\001\000\002\001" +
    "\001\000\004\022\u0180\001\001\000\004\022\u0177\001\001" +
    "\000\002\001\001\000\004\022\u017c\001\001\000\004\006" +
    "\u017a\001\001\000\020\007\042\010\017\011\022\013\041" +
    "\015\025\022\023\030\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u017e\001\001\000\020\007\042" +
    "\010\017\011\022\013\041\015\025\022\023\030\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u0183\021\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0186\001\001\000\002\001\001" +
    "\000\004\022\u018b\001\001\000\004\006\u0189\001\001\000" +
    "\020\007\042\010\017\011\022\013\041\015\025\022\023" +
    "\030\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u018d\001\001\000\020\007\042\010\017\011\022" +
    "\013\041\015\025\022\023\030\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0195\001" +
    "\001\000\004\014\u0196\001\001\000\002\001\001\000\024" +
    "\005\u0198\012\106\015\123\016\103\022\074\026\070\027" +
    "\112\031\120\036\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u019b\001\001\000\002\001\001\000" +
    "\004\022\u01a0\001\001\000\004\006\u019e\001\001\000\020" +
    "\007\042\010\017\011\022\013\041\015\025\022\023\030" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u01a2\001\001\000\020\007\042\010\017\011\022\013" +
    "\041\015\025\022\023\030\040\001\001\000\002\001\001" +
    "\000\006\015\u01c6\022\023\001\001\000\004\022\u01c1\001" +
    "\001\000\002\001\001\000\004\022\u01b2\001\001\000\004" +
    "\022\u01a9\001\001\000\002\001\001\000\004\022\u01ae\001" +
    "\001\000\004\006\u01ac\001\001\000\020\007\042\010\017" +
    "\011\022\013\041\015\025\022\023\030\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u01b0\001\001" +
    "\000\020\007\042\010\017\011\022\013\041\015\025\022" +
    "\023\030\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\u01b5\021\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u01b8\001\001" +
    "\000\002\001\001\000\004\022\u01bd\001\001\000\004\006" +
    "\u01bb\001\001\000\020\007\042\010\017\011\022\013\041" +
    "\015\025\022\023\030\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u01bf\001\001\000\020\007\042" +
    "\010\017\011\022\013\041\015\025\022\023\030\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u01c7\001\001\000\004\014\u01c8\001\001\000\002" +
    "\001\001\000\024\005\u01ca\012\106\015\123\016\103\022" +
    "\074\026\070\027\112\031\120\036\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u01cf\021\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u01db\001\001\000\004\006\u01d9\001" +
    "\001\000\020\007\042\010\017\011\022\013\041\015\025" +
    "\022\023\030\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u01dd\001\001\000\020\007\042\010\017" +
    "\011\022\013\041\015\025\022\023\030\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u01e1\001\001" +
    "\000\020\007\042\010\017\011\022\013\041\015\025\022" +
    "\023\030\040\001\001\000\004\032\u01e3\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\u01e6\012\106\015" +
    "\123\016\103\022\074\026\070\027\112\031\120\036\111" +
    "\001\001\000\002\001\001\000\004\006\u01e8\001\001\000" +
    "\020\007\042\010\017\011\022\013\041\015\025\022\023" +
    "\030\040\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expressionchain ::= 
            {
              ExprChain RESULT =null;
		 RESULT = new ExprChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expressionchain ::= COMMA expression expressionchain 
            {
              ExprChain RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(e, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // paramlist ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // paramlist ::= LPAREN expression expressionchain RPAREN 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // literal ::= CREATE type LBRACKET RBRACKET paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayLiteral(t, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // literal ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // literal ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // literal ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // literal ::= MINUS expression 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e, mleft, mright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // literal ::= paramlist POINTER LBRACE statementlist RBRACE 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodLiteral(p, l, p1left, p1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // literal ::= CREATE identifier paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectCreate(i, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // literal ::= NIL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nil(nleft, nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // literal ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // literal ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // literal ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression ::= DECREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression ::= DECREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression ::= THIS idchain DECREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression ::= identifier idchain DECREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression ::= INCREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression ::= INCREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression ::= THIS idchain INCREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression ::= identifier idchain INCREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression ::= typeof 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Typeof t = (Typeof)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= expression DIFFERS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Differs(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s, e.line, e.column)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // catchlist ::= 
            {
              CatchList RESULT =null;
		 RESULT = new CatchList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // catchlist ::= CATCH identifier idchain identifier COLON statementlist catchlist 
            {
              CatchList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CatchList l = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new Catch(i, c, i2, s, i.line, i.column), 0); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // trycatch ::= TRY COLON statementlist catchlist FINALLY COLON statementlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, s2, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // trycatch ::= TRY COLON statementlist catchlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // semicolon_statement ::= THROW THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Throw(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // semicolon_statement ::= THROW identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Throw(i, c, i.line, i.column);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // semicolon_statement ::= SUPER LPAREN RPAREN 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Super(sleft, sright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // semicolon_statement ::= methodcall 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCallStatement(m, m.line, m.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // semicolon_statement ::= DECREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // semicolon_statement ::= DECREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // semicolon_statement ::= THIS idchain DECREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // semicolon_statement ::= identifier idchain DECREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // semicolon_statement ::= INCREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // semicolon_statement ::= INCREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // semicolon_statement ::= THIS idchain INCREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // semicolon_statement ::= identifier idchain INCREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // semicolon_statement ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // semicolon_statement ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continue(cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // semicolon_statement ::= EXIT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // semicolon_statement ::= ASSERT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // semicolon_statement ::= RETURN expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // semicolon_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // semicolon_statement ::= identifier LBRACE expression RBRACE EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashmapAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // semicolon_statement ::= identifier EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assignment(e, i, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // semicolon_statement ::= type identifier EQUAL expression 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecAssignment(e, i, t, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // semicolon_statement ::= PRINT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement v = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_statement ::= trycatch 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TryCatch t = (TryCatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_statement ::= semicolon_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_statement ::= FOR LPAREN semicolon_statement SEMICOLON expression SEMICOLON semicolon_statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3, s1.line, s1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // methodcall ::= EXEC THIS idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(new This(tleft, tright), i2, l, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // methodcall ::= EXEC identifier idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(i1, i2, l, i1.line, i1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // typeof ::= identifier idchain TYPEOF type 
            {
              Typeof RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Typeof(i, c, t, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeof",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= CONST SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= CONST identifier idchain 
            {
              Type RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, true, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= CONST STRING 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= CONST BOOLEAN 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BooleanType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= CONST FLOAT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FloatType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= CONST INT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= CONST VAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= VAR 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarType(false, vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidType(vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, false, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2, false, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringType(false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatType(false, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(false, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // argchain ::= 
            {
              ArgChain RESULT =null;
		 RESULT = new ArgChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // argchain ::= COMMA parameter argchain 
            {
              ArgChain RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arglist ::= LPAREN RPAREN 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arglist ::= LPAREN parameter argchain RPAREN 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArgList(p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // classvardec ::= PUBLIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 3, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // classvardec ::= PROTECTED type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 2, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // classvardec ::= PRIVATE type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 0, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // classvardec ::= type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // classvardec ::= PUBLIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // classvardec ::= PROTECTED type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // classvardec ::= PRIVATE type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classvardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // methoddef ::= PROTECTED SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // methoddef ::= SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // methoddef ::= PRIVATE SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // methoddef ::= PUBLIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constructor ::= CONSTRUCTOR arglist COLON statementlist END 
            {
              Constructor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classdef ::= PROTECTED SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 2, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classdef ::= PROTECTED SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 2, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // classdef ::= SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 1, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classdef ::= SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 1, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classdef ::= PRIVATE SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 0, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdef ::= PRIVATE SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 0, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdef ::= PUBLIC SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 3, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdef ::= PUBLIC SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 3, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdef ::= PROTECTED CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 2, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classdef ::= PROTECTED CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 2, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classdef ::= CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 1, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classdef ::= CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 1, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classdef ::= PRIVATE CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 0, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 0, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 3, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classdef ::= PUBLIC CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 3, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exceptiondef ::= PROTECTED EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, pleft, pright), 2, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exceptiondef ::= PRIVATE EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, pleft, pright), 0, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exceptiondef ::= PUBLIC EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, pleft, pright), 3, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exceptiondef ::= EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, eleft, eright), 1, eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deflist ::= deflist classvardec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add((Def)c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // deflist ::= deflist constructor 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= deflist exceptiondef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExceptionDef e = (ExceptionDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(e); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c, i.line, i.column)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

