
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 21 13:16:56 EDT 2018
//----------------------------------------------------

package lexer_parser;

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 21 13:16:56 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\002\000\002\007\010\000\002\007" +
    "\012\000\002\007\012\000\002\007\010\000\002\007\011" +
    "\000\002\007\007\000\002\007\012\000\002\007\010\000" +
    "\002\007\011\000\002\007\013\000\002\007\013\000\002" +
    "\007\011\000\002\007\012\000\002\007\010\000\002\007" +
    "\013\000\002\007\011\000\002\030\007\000\002\010\012" +
    "\000\002\010\012\000\002\010\011\000\002\010\012\000" +
    "\002\010\013\000\002\010\013\000\002\010\012\000\002" +
    "\010\013\000\002\012\005\000\002\012\006\000\002\012" +
    "\006\000\002\012\006\000\002\012\007\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\012\006\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\012\010\000\002\012\011\000\002\012\011\000\002\012" +
    "\011\000\002\011\005\000\002\013\006\000\002\013\004" +
    "\000\002\035\005\000\002\035\002\000\002\023\004\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\010\000\002\014" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\005\000\002\014\007\000\002" +
    "\033\006\000\002\031\004\000\002\032\005\000\002\032" +
    "\002\000\002\015\003\000\002\015\004\000\002\026\005" +
    "\000\002\026\011\000\002\026\010\000\002\026\007\000" +
    "\002\026\007\000\002\026\007\000\002\026\015\000\002" +
    "\026\013\000\002\026\010\000\002\026\004\000\002\026" +
    "\003\000\002\026\003\000\002\027\006\000\002\027\006" +
    "\000\002\027\005\000\002\027\010\000\002\027\010\000" +
    "\002\027\004\000\002\027\006\000\002\027\006\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\004\000\002\027\005\000\002\027\004\000\002" +
    "\036\007\000\002\036\012\000\002\037\011\000\002\037" +
    "\002\000\002\024\007\000\002\024\002\000\002\025\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\006\000\002\016\006\000\002\016\004\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\004\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\005\000\002\017\007\000\002\017\004\000" +
    "\002\017\007\000\002\017\010\000\002\017\003\000\002" +
    "\017\007\000\002\021\006\000\002\021\004\000\002\020" +
    "\006\000\002\020\004\000\002\034\005\000\002\034\002" +
    "\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0207\000\004\006\004\001\002\000\004\130\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\125\011\001\002\000\104\014\uff52\043\uff52\045" +
    "\uff52\046\uff52\047\uff52\050\uff52\051\uff52\052\uff52\070\uff52" +
    "\076\uff52\100\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105" +
    "\uff52\106\uff52\107\uff52\110\uff52\111\uff52\112\uff52\113\uff52" +
    "\114\uff52\116\uff52\117\uff52\120\uff52\121\uff52\122\uff52\123" +
    "\uff52\124\uff52\125\uff52\126\uff52\130\uff52\001\002\000\052" +
    "\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\064\ufffd\130" +
    "\ufffd\001\002\000\052\002\ufff4\004\016\007\015\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\064\013\130\ufff4\001\002\000\004\004\u0206\001" +
    "\002\000\004\002\001\001\002\000\004\130\010\001\002" +
    "\000\102\005\ufff9\016\104\021\042\022\023\023\032\024" +
    "\030\025\035\026\031\027\043\030\036\031\100\033\075" +
    "\035\114\036\113\037\070\040\121\041\076\042\110\044" +
    "\103\055\101\057\072\061\077\063\120\065\107\066\066" +
    "\067\117\071\106\074\074\075\116\106\065\107\071\130" +
    "\010\001\002\000\044\002\uffff\010\026\011\024\012\033" +
    "\013\021\015\034\017\027\020\044\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\130\010" +
    "\001\002\000\046\002\ufff7\005\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\130" +
    "\ufff7\001\002\000\004\130\010\001\002\000\070\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\076\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\110\uffb1" +
    "\111\uffb1\112\uffb1\113\uffb1\116\uffb1\117\uffb1\120\uffb1\121" +
    "\uffb1\122\uffb1\123\uffb1\124\244\125\uffb1\126\uffb1\130\uffb1" +
    "\001\002\000\070\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\076\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\116" +
    "\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3\123\uffc3\124\uffc3" +
    "\125\uffc3\126\uffc3\130\uffc3\001\002\000\032\013\u01cb\017" +
    "\u01c9\020\u01c8\021\042\022\023\023\032\024\030\025\035" +
    "\026\031\027\043\030\036\130\010\001\002\000\006\116" +
    "\047\130\010\001\002\000\032\013\u0197\017\u0195\020\u0194" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\130\010\001\002\000\030\013\u017f\020\u017d" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\130\010\001\002\000\070\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\076\uffc1\100\uffc1\101" +
    "\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\110\uffc1\111\uffc1" +
    "\112\uffc1\113\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1\122" +
    "\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\130\uffc1\001\002" +
    "\000\070\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\116\uffc0\117" +
    "\uffc0\120\uffc0\121\uffc0\122\uffc0\123\uffc0\124\uffc0\125\uffc0" +
    "\126\uffc0\130\uffc0\001\002\000\070\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\076\uffc2\100\uffc2\101\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\105\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\113\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2" +
    "\123\uffc2\124\uffc2\125\uffc2\126\uffc2\130\uffc2\001\002\000" +
    "\032\013\u0151\017\u014f\020\u014e\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\004\122\052\001\002\000\004\120\u0145\001\002" +
    "\000\020\020\u013d\022\u0140\023\u013e\024\u013f\026\u013b\027" +
    "\u013a\130\010\001\002\000\046\002\ufff6\005\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\130\ufff6\001\002\000\046\002\ufff5\005\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\130\ufff5\001\002\000\046\002\ufff8\005\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\130\ufff8\001\002\000\070\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\076\uffbd\100\uffbd" +
    "\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\110\uffbd\111" +
    "\uffbd\112\uffbd\113\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd" +
    "\122\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\130\uffbd\001" +
    "\002\000\070\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\076\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104" +
    "\uffbc\105\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\116\uffbc" +
    "\117\uffbc\120\uffbc\121\uffbc\122\uffbc\123\uffbc\124\uffbc\125" +
    "\uffbc\126\uffbc\130\uffbc\001\002\000\024\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\130" +
    "\010\001\002\000\006\116\047\130\010\001\002\000\004" +
    "\122\052\001\002\000\004\117\050\001\002\000\070\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\076\uffc4" +
    "\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\110" +
    "\uffc4\111\uffc4\112\uffc4\113\uffc4\116\uffc4\117\uffc4\120\uffc4" +
    "\121\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\130" +
    "\uffc4\001\002\000\004\126\064\001\002\000\026\021\042" +
    "\022\023\023\032\024\030\025\035\026\031\027\043\030" +
    "\036\123\054\130\010\001\002\000\006\116\047\130\010" +
    "\001\002\000\004\126\uffc8\001\002\000\006\076\056\123" +
    "\uffc6\001\002\000\024\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\130\010\001\002\000" +
    "\004\123\060\001\002\000\004\126\uffc9\001\002\000\006" +
    "\076\056\123\uffc6\001\002\000\004\123\uffc7\001\002\000" +
    "\006\076\uffc5\123\uffc5\001\002\000\102\005\ufff9\016\104" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\031\100\033\075\035\114\036\113\037\070" +
    "\040\121\041\076\042\110\044\103\055\101\057\072\061" +
    "\077\063\120\065\107\066\066\067\117\071\106\074\074" +
    "\075\116\106\065\107\071\130\010\001\002\000\006\055" +
    "\u0137\130\010\001\002\000\006\123\uff9a\125\uff9a\001\002" +
    "\000\114\005\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\044\uffb0\055\uffb0\057\uffb0\061\uffb0\063\uffb0" +
    "\065\uffb0\066\uffb0\067\uffb0\071\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\106\uffb0\107\uffb0\121\uffb0\130\uffb0\001\002" +
    "\000\004\122\u012a\001\002\000\006\055\u0127\130\010\001" +
    "\002\000\004\122\u0123\001\002\000\020\106\uffb1\107\uffb1" +
    "\114\u0116\116\u0117\120\u0114\124\244\130\uffb1\001\002\000" +
    "\040\025\142\053\132\054\145\055\135\056\134\060\140" +
    "\101\146\106\143\107\131\115\150\122\133\127\137\130" +
    "\010\131\144\132\136\001\002\000\102\005\ufff9\016\104" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\031\100\033\075\035\114\036\113\037\070" +
    "\040\121\041\076\042\110\044\103\055\101\057\072\061" +
    "\077\063\120\065\107\066\066\067\117\071\106\074\074" +
    "\075\116\106\065\107\071\130\010\001\002\000\040\025" +
    "\142\053\132\054\145\055\135\056\134\060\140\101\146" +
    "\106\143\107\131\115\150\122\133\127\137\130\010\131" +
    "\144\132\136\001\002\000\004\122\u010a\001\002\000\040" +
    "\025\142\053\132\054\145\055\135\056\134\060\140\101" +
    "\146\106\143\107\131\115\150\122\133\127\137\130\010" +
    "\131\144\132\136\001\002\000\010\106\uffb1\107\uffb1\124" +
    "\244\001\002\000\114\005\ufff9\016\104\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\031" +
    "\100\032\ufff9\033\075\034\ufff9\035\114\036\113\037\070" +
    "\040\121\041\076\042\110\044\103\055\101\057\072\061" +
    "\077\063\120\065\107\066\066\067\117\071\106\072\ufff9" +
    "\073\ufff9\074\074\075\116\106\065\107\071\121\ufff9\130" +
    "\010\001\002\000\040\025\142\053\132\054\145\055\135" +
    "\056\134\060\140\101\146\106\143\107\131\115\150\122" +
    "\133\127\137\130\010\131\144\132\136\001\002\000\004" +
    "\122\365\001\002\000\114\005\uffa3\016\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\044\uffa3\055\uffa3\057\uffa3" +
    "\061\uffa3\063\uffa3\065\uffa3\066\uffa3\067\uffa3\071\uffa3\072" +
    "\uffa3\073\uffa3\074\uffa3\075\uffa3\106\uffa3\107\uffa3\121\uffa3" +
    "\130\uffa3\001\002\000\004\126\346\001\002\000\006\123" +
    "\uff99\125\uff99\001\002\000\024\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\004\125\335\001\002\000\114\005\uffa4\016\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\055" +
    "\uffa4\057\uffa4\061\uffa4\063\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\106\uffa4\107" +
    "\uffa4\121\uffa4\130\uffa4\001\002\000\040\025\142\053\132" +
    "\054\145\055\135\056\134\060\140\101\146\106\143\107" +
    "\131\115\150\122\133\127\137\130\010\131\144\132\136" +
    "\001\002\000\040\025\142\053\132\054\145\055\135\056" +
    "\134\060\140\101\146\106\143\107\131\115\150\122\133" +
    "\127\137\130\010\131\144\132\136\001\002\000\004\005" +
    "\324\001\002\000\076\016\104\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\031\100\033" +
    "\075\035\114\036\113\037\070\040\121\041\076\042\110" +
    "\044\103\055\101\057\072\061\077\063\120\065\107\066" +
    "\066\067\117\071\106\074\074\106\065\107\071\130\010" +
    "\001\002\000\040\025\142\053\132\054\145\055\135\056" +
    "\134\060\140\101\146\106\143\107\131\115\150\122\133" +
    "\127\137\130\010\131\144\132\136\001\002\000\004\122" +
    "\316\001\002\000\102\005\ufff9\016\104\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\031" +
    "\100\033\075\035\114\036\113\037\070\040\121\041\076" +
    "\042\110\044\103\055\101\057\072\061\077\063\120\065" +
    "\107\066\066\067\117\071\106\074\074\075\116\106\065" +
    "\107\071\130\010\001\002\000\006\116\047\130\010\001" +
    "\002\000\006\114\125\125\124\001\002\000\114\005\uffca" +
    "\016\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044" +
    "\uffca\055\uffca\057\uffca\061\uffca\063\uffca\065\uffca\066\uffca" +
    "\067\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\106" +
    "\uffca\107\uffca\121\uffca\130\uffca\001\002\000\040\025\142" +
    "\053\132\054\145\055\135\056\134\060\140\101\146\106" +
    "\143\107\131\115\150\122\133\127\137\130\010\131\144" +
    "\132\136\001\002\000\066\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\051\uff6e\052\uff6e\076\uff6e\100\uff6e\101\uff6e\102\uff6e" +
    "\103\uff6e\104\uff6e\105\uff6e\110\uff6e\111\uff6e\112\uff6e\113" +
    "\uff6e\116\uff6e\117\uff6e\120\uff6e\121\uff6e\122\uff6e\123\uff6e" +
    "\124\uff6e\125\uff6e\126\uff6e\001\002\000\066\045\uff73\046" +
    "\uff73\047\uff73\050\uff73\051\uff73\052\uff73\076\uff73\100\uff73" +
    "\101\uff73\102\uff73\103\uff73\104\uff73\105\uff73\110\uff73\111" +
    "\uff73\112\uff73\113\uff73\116\uff73\117\uff73\120\uff73\121\uff73" +
    "\122\uff73\123\uff73\124\uff73\125\uff73\126\uff73\001\002\000" +
    "\074\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\070\uffb1\076\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1" +
    "\113\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1\123" +
    "\uffb1\124\244\125\uffb1\126\uffb1\001\002\000\006\055\301" +
    "\130\010\001\002\000\066\045\uff62\046\uff62\047\uff62\050" +
    "\uff62\051\uff62\052\uff62\076\uff62\100\uff62\101\uff62\102\uff62" +
    "\103\uff62\104\uff62\105\uff62\110\uff62\111\uff62\112\uff62\113" +
    "\uff62\116\uff62\117\uff62\120\uff62\121\uff62\122\uff62\123\uff62" +
    "\124\uff62\125\uff62\126\uff62\001\002\000\042\025\142\053" +
    "\132\054\145\055\135\056\134\060\140\101\146\106\143" +
    "\107\131\115\150\122\133\123\223\127\137\130\010\131" +
    "\144\132\136\001\002\000\066\045\uff60\046\uff60\047\uff60" +
    "\050\uff60\051\uff60\052\uff60\076\uff60\100\uff60\101\uff60\102" +
    "\uff60\103\uff60\104\uff60\105\uff60\110\uff60\111\uff60\112\uff60" +
    "\113\uff60\116\uff60\117\uff60\120\uff60\121\uff60\122\uff60\123" +
    "\uff60\124\uff60\125\uff60\126\uff60\001\002\000\072\045\uff6f" +
    "\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\076\uff6f\100" +
    "\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uffb1" +
    "\107\uffb1\110\uff6f\111\uff6f\112\uff6f\113\uff6f\116\uff6f\117" +
    "\uff6f\120\uff6f\121\uff6f\122\uff6f\123\uff6f\124\244\125\uff6f" +
    "\126\uff6f\001\002\000\066\045\uff63\046\uff63\047\uff63\050" +
    "\uff63\051\uff63\052\uff63\076\uff63\100\uff63\101\uff63\102\uff63" +
    "\103\uff63\104\uff63\105\uff63\110\uff63\111\uff63\112\uff63\113" +
    "\uff63\116\uff63\117\uff63\120\uff63\121\uff63\122\uff63\123\uff63" +
    "\124\uff63\125\uff63\126\uff63\001\002\000\066\045\uff5a\046" +
    "\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\076\uff5a\100\uff5a" +
    "\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\110\uff5a\111" +
    "\uff5a\112\uff5a\113\uff5a\116\uff5a\117\uff5a\120\uff5a\121\uff5a" +
    "\122\uff5a\123\uff5a\124\uff5a\125\uff5a\126\uff5a\001\002\000" +
    "\024\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\130\010\001\002\000\056\045\160\046" +
    "\162\047\175\050\163\051\170\052\164\100\161\101\177" +
    "\102\171\103\173\104\203\105\157\110\174\111\201\112" +
    "\176\113\172\116\166\120\167\122\165\123\uffa1\124\200" +
    "\125\uffa1\001\002\000\004\120\250\001\002\000\006\055" +
    "\242\130\010\001\002\000\066\045\uff64\046\uff64\047\uff64" +
    "\050\uff64\051\uff64\052\uff64\076\uff64\100\uff64\101\uff64\102" +
    "\uff64\103\uff64\104\uff64\105\uff64\110\uff64\111\uff64\112\uff64" +
    "\113\uff64\116\uff64\117\uff64\120\uff64\121\uff64\122\uff64\123" +
    "\uff64\124\uff64\125\uff64\126\uff64\001\002\000\066\045\uff61" +
    "\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\076\uff61\100" +
    "\uff61\101\uff61\102\uff61\103\uff61\104\uff61\105\uff61\110\uff61" +
    "\111\uff61\112\uff61\113\uff61\116\uff61\117\uff61\120\uff61\121" +
    "\uff61\122\uff61\123\uff61\124\uff61\125\uff61\126\uff61\001\002" +
    "\000\040\025\142\053\132\054\145\055\135\056\134\060" +
    "\140\101\146\106\143\107\131\115\150\122\133\127\137" +
    "\130\010\131\144\132\136\001\002\000\066\045\uff65\046" +
    "\uff65\047\uff65\050\uff65\051\uff65\052\uff65\076\uff65\100\uff65" +
    "\101\uff65\102\uff65\103\uff65\104\uff65\105\uff65\110\uff65\111" +
    "\uff65\112\uff65\113\uff65\116\uff65\117\uff65\120\uff65\121\uff65" +
    "\122\uff65\123\uff65\124\uff65\125\uff65\126\uff65\001\002\000" +
    "\040\025\142\053\132\054\145\055\135\056\134\060\140" +
    "\101\146\106\143\107\131\115\150\122\133\127\137\130" +
    "\010\131\144\132\136\001\002\000\004\077\152\001\002" +
    "\000\004\120\153\001\002\000\102\016\104\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\031\100\033\075\035\114\036\113\037\070\040\121\041" +
    "\076\042\110\044\103\055\101\057\072\061\077\063\120" +
    "\065\107\066\066\067\117\071\106\074\074\075\116\106" +
    "\065\107\071\121\ufff9\130\010\001\002\000\004\121\155" +
    "\001\002\000\066\045\uff5e\046\uff5e\047\uff5e\050\uff5e\051" +
    "\uff5e\052\uff5e\076\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e" +
    "\104\uff5e\105\uff5e\110\uff5e\111\uff5e\112\uff5e\113\uff5e\116" +
    "\uff5e\117\uff5e\120\uff5e\121\uff5e\122\uff5e\123\uff5e\124\uff5e" +
    "\125\uff5e\126\uff5e\001\002\000\066\045\160\046\162\047" +
    "\175\050\163\051\170\052\164\076\uff70\100\161\101\177" +
    "\102\171\103\173\104\203\105\157\110\174\111\201\112" +
    "\176\113\172\116\166\117\uff70\120\167\121\uff70\122\165" +
    "\123\uff70\124\200\125\uff70\126\uff70\001\002\000\040\025" +
    "\142\053\132\054\145\055\135\056\134\060\140\101\146" +
    "\106\143\107\131\115\150\122\133\127\137\130\010\131" +
    "\144\132\136\001\002\000\040\025\142\053\132\054\145" +
    "\055\135\056\134\060\140\101\146\106\143\107\131\115" +
    "\150\122\133\127\137\130\010\131\144\132\136\001\002" +
    "\000\040\025\142\053\132\054\145\055\135\056\134\060" +
    "\140\101\146\106\143\107\131\115\150\122\133\127\137" +
    "\130\010\131\144\132\136\001\002\000\040\025\142\053" +
    "\132\054\145\055\135\056\134\060\140\101\146\106\143" +
    "\107\131\115\150\122\133\127\137\130\010\131\144\132" +
    "\136\001\002\000\040\025\142\053\132\054\145\055\135" +
    "\056\134\060\140\101\146\106\143\107\131\115\150\122" +
    "\133\127\137\130\010\131\144\132\136\001\002\000\040" +
    "\025\142\053\132\054\145\055\135\056\134\060\140\101" +
    "\146\106\143\107\131\115\150\122\133\127\137\130\010" +
    "\131\144\132\136\001\002\000\042\025\142\053\132\054" +
    "\145\055\135\056\134\060\140\101\146\106\143\107\131" +
    "\115\150\122\133\123\223\127\137\130\010\131\144\132" +
    "\136\001\002\000\040\025\142\053\132\054\145\055\135" +
    "\056\134\060\140\101\146\106\143\107\131\115\150\122" +
    "\133\127\137\130\010\131\144\132\136\001\002\000\040" +
    "\025\142\053\132\054\145\055\135\056\134\060\140\101" +
    "\146\106\143\107\131\115\150\122\133\127\137\130\010" +
    "\131\144\132\136\001\002\000\040\025\142\053\132\054" +
    "\145\055\135\056\134\060\140\101\146\106\143\107\131" +
    "\115\150\122\133\127\137\130\010\131\144\132\136\001" +
    "\002\000\040\025\142\053\132\054\145\055\135\056\134" +
    "\060\140\101\146\106\143\107\131\115\150\122\133\127" +
    "\137\130\010\131\144\132\136\001\002\000\040\025\142" +
    "\053\132\054\145\055\135\056\134\060\140\101\146\106" +
    "\143\107\131\115\150\122\133\127\137\130\010\131\144" +
    "\132\136\001\002\000\040\025\142\053\132\054\145\055" +
    "\135\056\134\060\140\101\146\106\143\107\131\115\150" +
    "\122\133\127\137\130\010\131\144\132\136\001\002\000" +
    "\040\025\142\053\132\054\145\055\135\056\134\060\140" +
    "\101\146\106\143\107\131\115\150\122\133\127\137\130" +
    "\010\131\144\132\136\001\002\000\040\025\142\053\132" +
    "\054\145\055\135\056\134\060\140\101\146\106\143\107" +
    "\131\115\150\122\133\127\137\130\010\131\144\132\136" +
    "\001\002\000\040\025\142\053\132\054\145\055\135\056" +
    "\134\060\140\101\146\106\143\107\131\115\150\122\133" +
    "\127\137\130\010\131\144\132\136\001\002\000\040\025" +
    "\142\053\132\054\145\055\135\056\134\060\140\101\146" +
    "\106\143\107\131\115\150\122\133\127\137\130\010\131" +
    "\144\132\136\001\002\000\004\062\206\001\002\000\040" +
    "\025\142\053\132\054\145\055\135\056\134\060\140\101" +
    "\146\106\143\107\131\115\150\122\133\127\137\130\010" +
    "\131\144\132\136\001\002\000\066\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\076\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\103\uffb3\104\uffb3\105\uffb3\110\uffb3\111\uffb3\112" +
    "\uffb3\113\uffb3\116\uffb3\117\uffb3\120\uffb3\121\uffb3\122\uffb3" +
    "\123\uffb3\124\uffb3\125\uffb3\126\uffb3\001\002\000\040\025" +
    "\142\053\132\054\145\055\135\056\134\060\140\101\146" +
    "\106\143\107\131\115\150\122\133\127\137\130\010\131" +
    "\144\132\136\001\002\000\066\045\160\046\162\047\175" +
    "\050\163\051\170\052\164\076\uff7d\100\161\101\177\102" +
    "\uff7d\103\uff7d\104\uff7d\105\uff7d\110\174\111\201\112\176" +
    "\113\172\116\uff7d\117\uff7d\120\uff7d\121\uff7d\122\uff7d\123" +
    "\uff7d\124\uff7d\125\uff7d\126\uff7d\001\002\000\066\045\uff79" +
    "\046\uff79\047\uff79\050\uff79\051\170\052\164\076\uff79\100" +
    "\uff79\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79\110\uff79" +
    "\111\uff79\112\uff79\113\uff79\116\uff79\117\uff79\120\uff79\121" +
    "\uff79\122\uff79\123\uff79\124\uff79\125\uff79\126\uff79\001\002" +
    "\000\066\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052" +
    "\uff72\076\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72" +
    "\105\uff72\110\uff72\111\uff72\112\uff72\113\uff72\116\uff72\117" +
    "\uff72\120\uff72\121\uff72\122\uff72\123\uff72\124\uff72\125\uff72" +
    "\126\uff72\001\002\000\066\045\160\046\162\047\175\050" +
    "\163\051\170\052\164\076\uff7f\100\uff7f\101\uff7f\102\uff7f" +
    "\103\uff7f\104\uff7f\105\uff7f\110\174\111\201\112\176\113" +
    "\172\116\uff7f\117\uff7f\120\uff7f\121\uff7f\122\uff7f\123\uff7f" +
    "\124\uff7f\125\uff7f\126\uff7f\001\002\000\066\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\051\170\052\164\076\uff77\100\uff77" +
    "\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\110\uff77\111" +
    "\uff77\112\uff77\113\uff77\116\uff77\117\uff77\120\uff77\121\uff77" +
    "\122\uff77\123\uff77\124\uff77\125\uff77\126\uff77\001\002\000" +
    "\066\045\uff84\046\uff84\047\uff84\050\uff84\051\170\052\164" +
    "\076\uff84\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105" +
    "\uff84\110\174\111\201\112\176\113\172\116\uff84\117\uff84" +
    "\120\uff84\121\uff84\122\uff84\123\uff84\124\uff84\125\uff84\126" +
    "\uff84\001\002\000\066\045\uff7a\046\uff7a\047\uff7a\050\uff7a" +
    "\051\170\052\164\076\uff7a\100\uff7a\101\uff7a\102\uff7a\103" +
    "\uff7a\104\uff7a\105\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a" +
    "\116\uff7a\117\uff7a\120\uff7a\121\uff7a\122\uff7a\123\uff7a\124" +
    "\uff7a\125\uff7a\126\uff7a\001\002\000\066\045\160\046\162" +
    "\047\175\050\163\051\170\052\164\076\uff7c\100\161\101" +
    "\177\102\uff7c\103\uff7c\104\uff7c\105\uff7c\110\174\111\201" +
    "\112\176\113\172\116\uff7c\117\uff7c\120\uff7c\121\uff7c\122" +
    "\uff7c\123\uff7c\124\uff7c\125\uff7c\126\uff7c\001\002\000\066" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\051\170\052\164\076" +
    "\uff78\100\uff78\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78" +
    "\110\uff78\111\uff78\112\uff78\113\uff78\116\uff78\117\uff78\120" +
    "\uff78\121\uff78\122\uff78\123\uff78\124\uff78\125\uff78\126\uff78" +
    "\001\002\000\066\045\160\046\162\047\175\050\163\051" +
    "\170\052\164\076\uff7e\100\161\101\177\102\uff7e\103\uff7e" +
    "\104\uff7e\105\uff7e\110\174\111\201\112\176\113\172\116" +
    "\uff7e\117\uff7e\120\uff7e\121\uff7e\122\uff7e\123\uff7e\124\uff7e" +
    "\125\uff7e\126\uff7e\001\002\000\066\045\uff82\046\uff82\047" +
    "\uff82\050\uff82\051\uff82\052\uff82\076\uff82\100\uff82\101\uff82" +
    "\102\uff82\103\uff82\104\uff82\105\uff82\110\uff82\111\uff82\112" +
    "\uff82\113\uff82\116\uff82\117\uff82\120\uff82\121\uff82\122\uff82" +
    "\123\uff82\124\uff82\125\uff82\126\uff82\001\002\000\054\045" +
    "\160\046\162\047\175\050\163\051\170\052\164\100\161" +
    "\101\177\102\171\103\173\104\203\105\157\110\174\111" +
    "\201\112\176\113\172\116\166\120\167\121\220\122\165" +
    "\124\200\001\002\000\066\045\uff76\046\uff76\047\uff76\050" +
    "\uff76\051\uff76\052\uff76\076\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\uff76\104\uff76\105\uff76\110\uff76\111\uff76\112\uff76\113" +
    "\uff76\116\uff76\117\uff76\120\uff76\121\uff76\122\uff76\123\uff76" +
    "\124\uff76\125\uff76\126\uff76\001\002\000\054\045\160\046" +
    "\162\047\175\050\163\051\170\052\164\100\161\101\177" +
    "\102\171\103\173\104\203\105\157\110\174\111\201\112" +
    "\176\113\172\116\166\117\222\120\167\122\165\124\200" +
    "\001\002\000\066\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\076\uff75\100\uff75\101\uff75\102\uff75\103\uff75" +
    "\104\uff75\105\uff75\110\uff75\111\uff75\112\uff75\113\uff75\116" +
    "\uff75\117\uff75\120\uff75\121\uff75\122\uff75\123\uff75\124\uff75" +
    "\125\uff75\126\uff75\001\002\000\070\045\uff55\046\uff55\047" +
    "\uff55\050\uff55\051\uff55\052\uff55\076\uff55\077\uff55\100\uff55" +
    "\101\uff55\102\uff55\103\uff55\104\uff55\105\uff55\110\uff55\111" +
    "\uff55\112\uff55\113\uff55\116\uff55\117\uff55\120\uff55\121\uff55" +
    "\122\uff55\123\uff55\124\uff55\125\uff55\126\uff55\001\002\000" +
    "\056\045\160\046\162\047\175\050\163\051\170\052\164" +
    "\076\225\100\161\101\177\102\171\103\173\104\203\105" +
    "\157\110\174\111\201\112\176\113\172\116\166\120\167" +
    "\122\165\123\uff53\124\200\001\002\000\040\025\142\053" +
    "\132\054\145\055\135\056\134\060\140\101\146\106\143" +
    "\107\131\115\150\122\133\127\137\130\010\131\144\132" +
    "\136\001\002\000\004\123\227\001\002\000\070\045\uff56" +
    "\046\uff56\047\uff56\050\uff56\051\uff56\052\uff56\076\uff56\077" +
    "\uff56\100\uff56\101\uff56\102\uff56\103\uff56\104\uff56\105\uff56" +
    "\110\uff56\111\uff56\112\uff56\113\uff56\116\uff56\117\uff56\120" +
    "\uff56\121\uff56\122\uff56\123\uff56\124\uff56\125\uff56\126\uff56" +
    "\001\002\000\060\045\160\046\162\047\175\050\163\051" +
    "\170\052\164\076\225\100\161\101\177\102\171\103\173" +
    "\104\203\105\157\110\174\111\201\112\176\113\172\116" +
    "\166\120\167\121\uff53\122\165\123\uff53\124\200\001\002" +
    "\000\006\121\uff54\123\uff54\001\002\000\066\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\052\uff81\076\uff81\100\uff81" +
    "\101\uff81\102\uff81\103\uff81\104\uff81\105\uff81\110\uff81\111" +
    "\uff81\112\uff81\113\uff81\116\uff81\117\uff81\120\uff81\121\uff81" +
    "\122\uff81\123\uff81\124\uff81\125\uff81\126\uff81\001\002\000" +
    "\066\045\uff83\046\uff83\047\uff83\050\uff83\051\170\052\164" +
    "\076\uff83\100\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105" +
    "\uff83\110\174\111\201\112\176\113\172\116\uff83\117\uff83" +
    "\120\uff83\121\uff83\122\uff83\123\uff83\124\uff83\125\uff83\126" +
    "\uff83\001\002\000\066\045\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\170\052\164\076\uff85\100\uff85\101\uff85\102\uff85\103" +
    "\uff85\104\uff85\105\uff85\110\174\111\201\112\176\113\172" +
    "\116\uff85\117\uff85\120\uff85\121\uff85\122\uff85\123\uff85\124" +
    "\uff85\125\uff85\126\uff85\001\002\000\066\045\160\046\162" +
    "\047\175\050\163\051\170\052\164\076\uff80\100\uff80\101" +
    "\uff80\102\uff80\103\uff80\104\uff80\105\uff80\110\174\111\201" +
    "\112\176\113\172\116\uff80\117\uff80\120\uff80\121\uff80\122" +
    "\uff80\123\uff80\124\uff80\125\uff80\126\uff80\001\002\000\066" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\051\170\052\164\076" +
    "\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86" +
    "\110\174\111\201\112\176\113\172\116\uff86\117\uff86\120" +
    "\uff86\121\uff86\122\uff86\123\uff86\124\uff86\125\uff86\126\uff86" +
    "\001\002\000\066\045\160\046\162\047\175\050\163\051" +
    "\170\052\164\076\uff7b\100\161\101\177\102\uff7b\103\uff7b" +
    "\104\uff7b\105\uff7b\110\174\111\201\112\176\113\172\116" +
    "\uff7b\117\uff7b\120\uff7b\121\uff7b\122\uff7b\123\uff7b\124\uff7b" +
    "\125\uff7b\126\uff7b\001\002\000\066\045\160\046\162\047" +
    "\175\050\163\051\170\052\164\076\uff5d\100\uff5d\101\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\105\uff5d\110\174\111\201\112" +
    "\176\113\172\116\uff5d\117\uff5d\120\uff5d\121\uff5d\122\uff5d" +
    "\123\uff5d\124\uff5d\125\uff5d\126\uff5d\001\002\000\066\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\076\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\110" +
    "\uffb1\111\uffb1\112\uffb1\113\uffb1\116\uffb1\117\uffb1\120\uffb1" +
    "\121\uffb1\122\uffb1\123\uffb1\124\244\125\uffb1\126\uffb1\001" +
    "\002\000\066\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\076\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\116\uffb1" +
    "\117\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124\244\125" +
    "\uffb1\126\uffb1\001\002\000\066\045\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\051\uff6a\052\uff6a\076\uff6a\100\uff6a\101\uff6a\102" +
    "\uff6a\103\uff6a\104\uff6a\105\uff6a\110\uff6a\111\uff6a\112\uff6a" +
    "\113\uff6a\116\uff6a\117\uff6a\120\uff6a\121\uff6a\122\uff6a\123" +
    "\uff6a\124\uff6a\125\uff6a\126\uff6a\001\002\000\004\130\010" +
    "\001\002\000\076\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\070\uffb1\076\uffb1\100\uffb1\101\uffb1\102\uffb1" +
    "\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111" +
    "\uffb1\112\uffb1\113\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1" +
    "\122\uffb1\123\uffb1\124\244\125\uffb1\126\uffb1\130\uffb1\001" +
    "\002\000\076\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\070\uffb2\076\uffb2\100\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2" +
    "\112\uffb2\113\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\122" +
    "\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\130\uffb2\001\002" +
    "\000\066\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052" +
    "\uff6b\076\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b" +
    "\105\uff6b\110\uff6b\111\uff6b\112\uff6b\113\uff6b\116\uff6b\117" +
    "\uff6b\120\uff6b\121\uff6b\122\uff6b\123\uff6b\124\uff6b\125\uff6b" +
    "\126\uff6b\001\002\000\024\021\042\022\023\023\032\024" +
    "\030\025\035\026\031\027\043\030\036\130\010\001\002" +
    "\000\006\076\252\116\047\001\002\000\024\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\130\010\001\002\000\006\116\047\121\254\001\002\000" +
    "\066\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b" +
    "\076\uff5b\100\uff5b\101\uff5b\102\uff5b\103\uff5b\104\uff5b\105" +
    "\uff5b\110\uff5b\111\uff5b\112\uff5b\113\uff5b\116\uff5b\117\uff5b" +
    "\120\uff5b\121\uff5b\122\uff5b\123\uff5b\124\uff5b\125\uff5b\126" +
    "\uff5b\001\002\000\010\116\uffb1\122\165\124\244\001\002" +
    "\000\004\116\257\001\002\000\042\025\142\053\132\054" +
    "\145\055\135\056\134\060\140\101\146\106\143\107\131" +
    "\115\150\117\260\122\133\127\137\130\010\131\144\132" +
    "\136\001\002\000\006\116\uffc4\120\263\001\002\000\054" +
    "\045\160\046\162\047\175\050\163\051\170\052\164\100" +
    "\161\101\177\102\171\103\173\104\203\105\157\110\174" +
    "\111\201\112\176\113\172\116\166\117\262\120\167\122" +
    "\165\124\200\001\002\000\066\045\uff5c\046\uff5c\047\uff5c" +
    "\050\uff5c\051\uff5c\052\uff5c\076\uff5c\100\uff5c\101\uff5c\102" +
    "\uff5c\103\uff5c\104\uff5c\105\uff5c\110\uff5c\111\uff5c\112\uff5c" +
    "\113\uff5c\116\uff5c\117\uff5c\120\uff5c\121\uff5c\122\uff5c\123" +
    "\uff5c\124\uff5c\125\uff5c\126\uff5c\001\002\000\042\025\142" +
    "\053\132\054\145\055\135\056\134\060\140\101\146\106" +
    "\143\107\131\115\150\121\265\122\133\127\137\130\010" +
    "\131\144\132\136\001\002\000\066\045\uff59\046\uff59\047" +
    "\uff59\050\uff59\051\uff59\052\uff59\076\uff59\100\uff59\101\uff59" +
    "\102\uff59\103\uff59\104\uff59\105\uff59\110\uff59\111\uff59\112" +
    "\uff59\113\uff59\116\uff59\117\uff59\120\uff59\121\uff59\122\uff59" +
    "\123\uff59\124\uff59\125\uff59\126\uff59\001\002\000\066\045" +
    "\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57\076\uff57" +
    "\100\uff57\101\uff57\102\uff57\103\uff57\104\uff57\105\uff57\110" +
    "\uff57\111\uff57\112\uff57\113\uff57\116\uff57\117\uff57\120\uff57" +
    "\121\uff57\122\uff57\123\uff57\124\uff57\125\uff57\126\uff57\001" +
    "\002\000\056\045\160\046\162\047\175\050\163\051\170" +
    "\052\164\076\225\100\161\101\177\102\171\103\173\104" +
    "\203\105\157\110\174\111\201\112\176\113\172\116\166" +
    "\120\167\121\uff53\122\165\124\200\001\002\000\004\121" +
    "\270\001\002\000\066\045\uff58\046\uff58\047\uff58\050\uff58" +
    "\051\uff58\052\uff58\076\uff58\100\uff58\101\uff58\102\uff58\103" +
    "\uff58\104\uff58\105\uff58\110\uff58\111\uff58\112\uff58\113\uff58" +
    "\116\uff58\117\uff58\120\uff58\121\uff58\122\uff58\123\uff58\124" +
    "\uff58\125\uff58\126\uff58\001\002\000\066\045\uff5f\046\uff5f" +
    "\047\uff5f\050\uff5f\051\uff5f\052\uff5f\076\uff5f\100\uff5f\101" +
    "\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f\110\uff5f\111\uff5f" +
    "\112\uff5f\113\uff5f\116\uff5f\117\uff5f\120\uff5f\121\uff5f\122" +
    "\uff5f\123\uff5f\124\uff5f\125\uff5f\126\uff5f\001\002\000\070" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\076" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe" +
    "\110\uffbe\111\uffbe\112\uffbe\113\uffbe\116\uffbe\117\uffbe\120" +
    "\uffbe\121\uffbe\122\uffbe\123\uffbe\124\uffbe\125\uffbe\126\uffbe" +
    "\130\uffbe\001\002\000\006\106\275\107\274\001\002\000" +
    "\066\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68" +
    "\076\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105" +
    "\uff68\110\uff68\111\uff68\112\uff68\113\uff68\116\uff68\117\uff68" +
    "\120\uff68\121\uff68\122\uff68\123\uff68\124\uff68\125\uff68\126" +
    "\uff68\001\002\000\066\045\uff6c\046\uff6c\047\uff6c\050\uff6c" +
    "\051\uff6c\052\uff6c\076\uff6c\100\uff6c\101\uff6c\102\uff6c\103" +
    "\uff6c\104\uff6c\105\uff6c\110\uff6c\111\uff6c\112\uff6c\113\uff6c" +
    "\116\uff6c\117\uff6c\120\uff6c\121\uff6c\122\uff6c\123\uff6c\124" +
    "\uff6c\125\uff6c\126\uff6c\001\002\000\056\045\160\046\162" +
    "\047\175\050\163\051\170\052\164\076\225\100\161\101" +
    "\177\102\171\103\173\104\203\105\157\110\174\111\201" +
    "\112\176\113\172\116\166\120\167\122\165\123\277\124" +
    "\200\001\002\000\066\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\051\uff71\052\uff71\076\uff71\100\uff71\101\uff71\102\uff71\103" +
    "\uff71\104\uff71\105\uff71\110\uff71\111\uff71\112\uff71\113\uff71" +
    "\116\uff71\117\uff71\120\uff71\121\uff71\122\uff71\123\uff71\124" +
    "\uff71\125\uff71\126\uff71\001\002\000\066\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\076\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\110\uffb1\111\uffb1" +
    "\112\uffb1\113\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122" +
    "\uffb1\123\uffb1\124\244\125\uffb1\126\uffb1\001\002\000\066" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\076" +
    "\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1" +
    "\110\uffb1\111\uffb1\112\uffb1\113\uffb1\116\uffb1\117\uffb1\120" +
    "\uffb1\121\uffb1\122\uffb1\123\uffb1\124\244\125\uffb1\126\uffb1" +
    "\001\002\000\066\045\uff66\046\uff66\047\uff66\050\uff66\051" +
    "\uff66\052\uff66\076\uff66\100\uff66\101\uff66\102\uff66\103\uff66" +
    "\104\uff66\105\uff66\110\uff66\111\uff66\112\uff66\113\uff66\116" +
    "\uff66\117\uff66\120\uff66\121\uff66\122\uff66\123\uff66\124\uff66" +
    "\125\uff66\126\uff66\001\002\000\066\045\uff67\046\uff67\047" +
    "\uff67\050\uff67\051\uff67\052\uff67\076\uff67\100\uff67\101\uff67" +
    "\102\uff67\103\uff67\104\uff67\105\uff67\110\uff67\111\uff67\112" +
    "\uff67\113\uff67\116\uff67\117\uff67\120\uff67\121\uff67\122\uff67" +
    "\123\uff67\124\uff67\125\uff67\126\uff67\001\002\000\074\045" +
    "\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\070\305" +
    "\076\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104\uff74\105" +
    "\uff74\106\307\107\306\110\uff74\111\uff74\112\uff74\113\uff74" +
    "\116\uff74\117\uff74\120\uff74\121\uff74\122\uff74\123\uff74\124" +
    "\uff74\125\uff74\126\uff74\001\002\000\024\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\130" +
    "\010\001\002\000\066\045\uff69\046\uff69\047\uff69\050\uff69" +
    "\051\uff69\052\uff69\076\uff69\100\uff69\101\uff69\102\uff69\103" +
    "\uff69\104\uff69\105\uff69\110\uff69\111\uff69\112\uff69\113\uff69" +
    "\116\uff69\117\uff69\120\uff69\121\uff69\122\uff69\123\uff69\124" +
    "\uff69\125\uff69\126\uff69\001\002\000\066\045\uff6d\046\uff6d" +
    "\047\uff6d\050\uff6d\051\uff6d\052\uff6d\076\uff6d\100\uff6d\101" +
    "\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\110\uff6d\111\uff6d" +
    "\112\uff6d\113\uff6d\116\uff6d\117\uff6d\120\uff6d\121\uff6d\122" +
    "\uff6d\123\uff6d\124\uff6d\125\uff6d\126\uff6d\001\002\000\066" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\076" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4" +
    "\110\uffb4\111\uffb4\112\uffb4\113\uffb4\116\047\117\uffb4\120" +
    "\uffb4\121\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4" +
    "\001\002\000\004\005\312\001\002\000\004\036\313\001" +
    "\002\000\040\025\142\053\132\054\145\055\135\056\134" +
    "\060\140\101\146\106\143\107\131\115\150\122\133\127" +
    "\137\130\010\131\144\132\136\001\002\000\054\045\160" +
    "\046\162\047\175\050\163\051\170\052\164\100\161\101" +
    "\177\102\171\103\173\104\203\105\157\110\174\111\201" +
    "\112\176\113\172\116\166\120\167\122\165\124\200\125" +
    "\315\001\002\000\114\005\uffa6\016\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\044\uffa6\055\uffa6\057\uffa6\061" +
    "\uffa6\063\uffa6\065\uffa6\066\uffa6\067\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\106\uffa6\107\uffa6\121\uffa6\130" +
    "\uffa6\001\002\000\040\025\142\053\132\054\145\055\135" +
    "\056\134\060\140\101\146\106\143\107\131\115\150\122" +
    "\133\127\137\130\010\131\144\132\136\001\002\000\054" +
    "\045\160\046\162\047\175\050\163\051\170\052\164\100" +
    "\161\101\177\102\171\103\173\104\203\105\157\110\174" +
    "\111\201\112\176\113\172\116\166\120\167\122\165\123" +
    "\320\124\200\001\002\000\006\123\uffa2\125\uffa2\001\002" +
    "\000\056\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052" +
    "\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73\105\uff73" +
    "\110\uff73\111\uff73\112\uff73\113\uff73\116\uff73\120\uff73\122" +
    "\uff73\123\uff90\124\uff73\125\uff90\001\002\000\052\045\160" +
    "\046\162\047\175\050\163\051\170\052\164\100\161\101" +
    "\177\102\171\103\173\104\203\105\157\110\174\111\201" +
    "\112\176\113\172\116\166\120\167\122\165\124\200\001" +
    "\002\000\114\005\uffaf\016\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\044\uffaf\055\uffaf\057\uffaf\061\uffaf\063" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\106\uffaf\107\uffaf\121\uffaf\130\uffaf\001" +
    "\002\000\046\002\uffe0\005\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\130\uffe0" +
    "\001\002\000\054\045\160\046\162\047\175\050\163\051" +
    "\170\052\164\100\161\101\177\102\171\103\173\104\203" +
    "\105\157\110\174\111\201\112\176\113\172\116\166\120" +
    "\167\122\165\124\200\126\326\001\002\000\102\005\ufff9" +
    "\016\104\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\031\100\033\075\035\114\036\113" +
    "\037\070\040\121\041\076\042\110\044\103\055\101\057" +
    "\072\061\077\063\120\065\107\066\066\067\117\071\106" +
    "\074\074\075\116\106\065\107\071\130\010\001\002\000" +
    "\004\005\330\001\002\000\114\005\uffab\016\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\044\uffab\055\uffab\057" +
    "\uffab\061\uffab\063\uffab\065\uffab\066\uffab\067\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\106\uffab\107\uffab\121" +
    "\uffab\130\uffab\001\002\000\054\045\160\046\162\047\175" +
    "\050\163\051\170\052\164\100\161\101\177\102\171\103" +
    "\173\104\203\105\157\110\174\111\201\112\176\113\172" +
    "\116\166\120\167\122\165\124\200\126\332\001\002\000" +
    "\102\005\ufff9\016\104\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\031\100\033\075\035" +
    "\114\036\113\037\070\040\121\041\076\042\110\044\103" +
    "\055\101\057\072\061\077\063\120\065\107\066\066\067" +
    "\117\071\106\074\074\075\116\106\065\107\071\130\010" +
    "\001\002\000\004\005\334\001\002\000\114\005\uffaa\016" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa" +
    "\055\uffaa\057\uffaa\061\uffaa\063\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\106\uffaa" +
    "\107\uffaa\121\uffaa\130\uffaa\001\002\000\114\005\uffa5\016" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\044\uffa5" +
    "\055\uffa5\057\uffa5\061\uffa5\063\uffa5\065\uffa5\066\uffa5\067" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\106\uffa5" +
    "\107\uffa5\121\uffa5\130\uffa5\001\002\000\006\116\047\130" +
    "\010\001\002\000\004\043\340\001\002\000\004\130\010" +
    "\001\002\000\006\124\244\126\uffb1\001\002\000\004\126" +
    "\343\001\002\000\102\005\ufff9\016\104\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\031" +
    "\100\033\075\035\114\036\113\037\070\040\121\041\076" +
    "\042\110\044\103\055\101\057\072\061\077\063\120\065" +
    "\107\066\066\067\117\071\106\074\074\075\116\106\065" +
    "\107\071\130\010\001\002\000\004\005\345\001\002\000" +
    "\114\005\uffa7\016\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\044\uffa7\055\uffa7\057\uffa7\061\uffa7\063\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7" +
    "\075\uffa7\106\uffa7\107\uffa7\121\uffa7\130\uffa7\001\002\000" +
    "\106\005\ufff9\016\104\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\031\100\033\075\035" +
    "\114\036\113\037\070\040\121\041\076\042\110\044\103" +
    "\055\101\057\072\061\077\063\120\065\107\066\066\067" +
    "\117\071\106\072\ufff9\073\ufff9\074\074\075\116\106\065" +
    "\107\071\130\010\001\002\000\010\005\uff8a\072\351\073" +
    "\uff8a\001\002\000\006\005\361\073\360\001\002\000\004" +
    "\130\010\001\002\000\006\124\244\130\uffb1\001\002\000" +
    "\004\130\010\001\002\000\004\126\355\001\002\000\106" +
    "\005\ufff9\016\104\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\031\100\033\075\035\114" +
    "\036\113\037\070\040\121\041\076\042\110\044\103\055" +
    "\101\057\072\061\077\063\120\065\107\066\066\067\117" +
    "\071\106\072\ufff9\073\ufff9\074\074\075\116\106\065\107" +
    "\071\130\010\001\002\000\010\005\uff8a\072\351\073\uff8a" +
    "\001\002\000\006\005\uff8b\073\uff8b\001\002\000\004\126" +
    "\362\001\002\000\114\005\uff8d\016\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\044\uff8d\055\uff8d\057\uff8d\061" +
    "\uff8d\063\uff8d\065\uff8d\066\uff8d\067\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\075\uff8d\106\uff8d\107\uff8d\121\uff8d\130" +
    "\uff8d\001\002\000\102\005\ufff9\016\104\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\031" +
    "\100\033\075\035\114\036\113\037\070\040\121\041\076" +
    "\042\110\044\103\055\101\057\072\061\077\063\120\065" +
    "\107\066\066\067\117\071\106\074\074\075\116\106\065" +
    "\107\071\130\010\001\002\000\004\005\364\001\002\000" +
    "\114\005\uff8c\016\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\044\uff8c\055\uff8c\057\uff8c\061\uff8c\063\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\075\uff8c\106\uff8c\107\uff8c\121\uff8c\130\uff8c\001\002\000" +
    "\004\123\366\001\002\000\006\123\uff8f\125\uff8f\001\002" +
    "\000\056\045\160\046\162\047\175\050\163\051\170\052" +
    "\164\100\161\101\177\102\171\103\173\104\203\105\157" +
    "\110\174\111\201\112\176\113\172\116\166\120\167\122" +
    "\165\123\uff9d\124\200\125\uff9d\001\002\000\016\005\ufffa" +
    "\032\ufffa\034\ufffa\072\ufffa\073\ufffa\121\ufffa\001\002\000" +
    "\006\106\373\107\372\001\002\000\006\123\uff93\125\uff93" +
    "\001\002\000\006\123\uff97\125\uff97\001\002\000\054\045" +
    "\160\046\162\047\175\050\163\051\170\052\164\100\161" +
    "\101\177\102\171\103\173\104\203\105\157\110\174\111" +
    "\201\112\176\113\172\116\166\120\167\122\165\124\200" +
    "\126\375\001\002\000\106\005\ufff9\016\104\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\031\100\032\ufff9\033\075\034\ufff9\035\114\036\113\037" +
    "\070\040\121\041\076\042\110\044\103\055\101\057\072" +
    "\061\077\063\120\065\107\066\066\067\117\071\106\074" +
    "\074\075\116\106\065\107\071\130\010\001\002\000\010" +
    "\005\uff88\032\uff88\034\uff88\001\002\000\010\005\u0103\032" +
    "\u0101\034\u0100\001\002\000\040\025\142\053\132\054\145" +
    "\055\135\056\134\060\140\101\146\106\143\107\131\115" +
    "\150\122\133\127\137\130\010\131\144\132\136\001\002" +
    "\000\004\126\u0105\001\002\000\004\005\u0104\001\002\000" +
    "\114\005\uffac\016\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\044\uffac\055\uffac\057\uffac\061\uffac\063\uffac\065" +
    "\uffac\066\uffac\067\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\075\uffac\106\uffac\107\uffac\121\uffac\130\uffac\001\002\000" +
    "\114\005\uffad\016\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\044\uffad\055\uffad\057\uffad\061\uffad\063\uffad\065" +
    "\uffad\066\uffad\067\uffad\071\uffad\072\uffad\073\uffad\074\uffad" +
    "\075\uffad\106\uffad\107\uffad\121\uffad\130\uffad\001\002\000" +
    "\102\005\ufff9\016\104\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\031\100\033\075\035" +
    "\114\036\113\037\070\040\121\041\076\042\110\044\103" +
    "\055\101\057\072\061\077\063\120\065\107\066\066\067" +
    "\117\071\106\074\074\075\116\106\065\107\071\130\010" +
    "\001\002\000\004\005\uff87\001\002\000\054\045\160\046" +
    "\162\047\175\050\163\051\170\052\164\100\161\101\177" +
    "\102\171\103\173\104\203\105\157\110\174\111\201\112" +
    "\176\113\172\116\166\120\167\122\165\124\200\126\u0108" +
    "\001\002\000\106\005\ufff9\016\104\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\031\100" +
    "\032\ufff9\033\075\034\ufff9\035\114\036\113\037\070\040" +
    "\121\041\076\042\110\044\103\055\101\057\072\061\077" +
    "\063\120\065\107\066\066\067\117\071\106\074\074\075" +
    "\116\106\065\107\071\130\010\001\002\000\010\005\uff89" +
    "\032\uff89\034\uff89\001\002\000\040\025\142\053\132\054" +
    "\145\055\135\056\134\060\140\101\146\106\143\107\131" +
    "\115\150\122\133\127\137\130\010\131\144\132\136\001" +
    "\002\000\054\045\160\046\162\047\175\050\163\051\170" +
    "\052\164\100\161\101\177\102\171\103\173\104\203\105" +
    "\157\110\174\111\201\112\176\113\172\116\166\120\167" +
    "\122\165\123\u010c\124\200\001\002\000\006\123\uff9b\125" +
    "\uff9b\001\002\000\054\045\160\046\162\047\175\050\163" +
    "\051\170\052\164\100\161\101\177\102\171\103\173\104" +
    "\203\105\157\110\174\111\201\112\176\113\172\116\166" +
    "\120\167\122\165\124\200\126\u010e\001\002\000\102\005" +
    "\ufff9\016\104\021\042\022\023\023\032\024\030\025\035" +
    "\026\031\027\043\030\036\031\100\033\075\035\114\036" +
    "\113\037\070\040\121\041\076\042\110\044\103\055\101" +
    "\057\072\061\077\063\120\065\107\066\066\067\117\071" +
    "\106\074\074\075\116\106\065\107\071\130\010\001\002" +
    "\000\004\005\u0110\001\002\000\114\005\uffa9\016\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9\055\uffa9" +
    "\057\uffa9\061\uffa9\063\uffa9\065\uffa9\066\uffa9\067\uffa9\071" +
    "\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\106\uffa9\107\uffa9" +
    "\121\uffa9\130\uffa9\001\002\000\004\005\u0112\001\002\000" +
    "\114\005\uffae\016\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\044\uffae\055\uffae\057\uffae\061\uffae\063\uffae\065" +
    "\uffae\066\uffae\067\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\106\uffae\107\uffae\121\uffae\130\uffae\001\002\000" +
    "\056\045\160\046\162\047\175\050\163\051\170\052\164" +
    "\100\161\101\177\102\171\103\173\104\203\105\157\110" +
    "\174\111\201\112\176\113\172\116\166\120\167\122\165" +
    "\123\uff8e\124\200\125\uff8e\001\002\000\040\025\142\053" +
    "\132\054\145\055\135\056\134\060\140\101\146\106\143" +
    "\107\131\115\150\122\133\127\137\130\010\131\144\132" +
    "\136\001\002\000\012\106\u011e\107\u011d\116\uffbe\130\uffbe" +
    "\001\002\000\040\025\142\053\132\054\145\055\135\056" +
    "\134\060\140\101\146\106\143\107\131\115\150\122\133" +
    "\127\137\130\010\131\144\132\136\001\002\000\040\025" +
    "\142\053\132\054\145\055\135\056\134\060\140\101\146" +
    "\106\143\107\131\115\150\122\133\127\137\130\010\131" +
    "\144\132\136\001\002\000\054\045\160\046\162\047\175" +
    "\050\163\051\170\052\164\100\161\101\177\102\171\103" +
    "\173\104\203\105\157\110\174\111\201\112\176\113\172" +
    "\116\166\117\u0119\120\167\122\165\124\200\001\002\000" +
    "\004\114\u011a\001\002\000\040\025\142\053\132\054\145" +
    "\055\135\056\134\060\140\101\146\106\143\107\131\115" +
    "\150\122\133\127\137\130\010\131\144\132\136\001\002" +
    "\000\056\045\160\046\162\047\175\050\163\051\170\052" +
    "\164\100\161\101\177\102\171\103\173\104\203\105\157" +
    "\110\174\111\201\112\176\113\172\116\166\120\167\122" +
    "\165\123\uff9e\124\200\125\uff9e\001\002\000\056\045\160" +
    "\046\162\047\175\050\163\051\170\052\164\100\161\101" +
    "\177\102\171\103\173\104\203\105\157\110\174\111\201" +
    "\112\176\113\172\116\166\120\167\122\165\123\uffa0\124" +
    "\200\125\uffa0\001\002\000\006\123\uff94\125\uff94\001\002" +
    "\000\006\123\uff98\125\uff98\001\002\000\054\045\160\046" +
    "\162\047\175\050\163\051\170\052\164\100\161\101\177" +
    "\102\171\103\173\104\203\105\157\110\174\111\201\112" +
    "\176\113\172\116\166\120\167\121\u0120\122\165\124\200" +
    "\001\002\000\004\114\u0121\001\002\000\040\025\142\053" +
    "\132\054\145\055\135\056\134\060\140\101\146\106\143" +
    "\107\131\115\150\122\133\127\137\130\010\131\144\132" +
    "\136\001\002\000\056\045\160\046\162\047\175\050\163" +
    "\051\170\052\164\100\161\101\177\102\171\103\173\104" +
    "\203\105\157\110\174\111\201\112\176\113\172\116\166" +
    "\120\167\122\165\123\uff9f\124\200\125\uff9f\001\002\000" +
    "\040\025\142\053\132\054\145\055\135\056\134\060\140" +
    "\101\146\106\143\107\131\115\150\122\133\127\137\130" +
    "\010\131\144\132\136\001\002\000\054\045\160\046\162" +
    "\047\175\050\163\051\170\052\164\100\161\101\177\102" +
    "\171\103\173\104\203\105\157\110\174\111\201\112\176" +
    "\113\172\116\166\120\167\122\165\123\u0125\124\200\001" +
    "\002\000\006\123\uff9c\125\uff9c\001\002\000\010\123\uffb1" +
    "\124\244\125\uffb1\001\002\000\010\123\uffb1\124\244\125" +
    "\uffb1\001\002\000\006\123\uff91\125\uff91\001\002\000\006" +
    "\123\uff92\125\uff92\001\002\000\054\016\104\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\044\103\055\101\057\072\061\077\063\120\065\107\066" +
    "\066\067\117\074\074\106\065\107\071\130\010\001\002" +
    "\000\004\125\u012e\001\002\000\006\116\047\130\010\001" +
    "\002\000\004\114\125\001\002\000\040\025\142\053\132" +
    "\054\145\055\135\056\134\060\140\101\146\106\143\107" +
    "\131\115\150\122\133\127\137\130\010\131\144\132\136" +
    "\001\002\000\054\045\160\046\162\047\175\050\163\051" +
    "\170\052\164\100\161\101\177\102\171\103\173\104\203" +
    "\105\157\110\174\111\201\112\176\113\172\116\166\120" +
    "\167\122\165\124\200\125\u0130\001\002\000\054\016\104" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\044\103\055\101\057\072\061\077\063\120" +
    "\065\107\066\066\067\117\074\074\106\065\107\071\130" +
    "\010\001\002\000\004\123\u0132\001\002\000\004\126\u0133" +
    "\001\002\000\102\005\ufff9\016\104\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\031\100" +
    "\033\075\035\114\036\113\037\070\040\121\041\076\042" +
    "\110\044\103\055\101\057\072\061\077\063\120\065\107" +
    "\066\066\067\117\071\106\074\074\075\116\106\065\107" +
    "\071\130\010\001\002\000\004\005\u0135\001\002\000\114" +
    "\005\uffa8\016\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\044\uffa8\055\uffa8\057\uffa8\061\uffa8\063\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075" +
    "\uffa8\106\uffa8\107\uffa8\121\uffa8\130\uffa8\001\002\000\010" +
    "\123\uffb1\124\244\125\uffb1\001\002\000\010\123\uffb1\124" +
    "\244\125\uffb1\001\002\000\006\123\uff95\125\uff95\001\002" +
    "\000\006\123\uff96\125\uff96\001\002\000\070\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\076\uffbb\100\uffbb" +
    "\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\110\uffbb\111" +
    "\uffbb\112\uffbb\113\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb" +
    "\122\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb\130\uffbb\001" +
    "\002\000\070\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7" +
    "\117\uffb7\120\uffb7\121\uffb7\122\uffb7\123\uffb7\124\uffb7\125" +
    "\uffb7\126\uffb7\130\uffb7\001\002\000\070\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\076\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\110\uffb1\111\uffb1" +
    "\112\uffb1\113\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122" +
    "\uffb1\123\uffb1\124\244\125\uffb1\126\uffb1\130\uffb1\001\002" +
    "\000\004\120\u0141\001\002\000\070\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\076\uffb9\100\uffb9\101\uffb9" +
    "\102\uffb9\103\uffb9\104\uffb9\105\uffb9\110\uffb9\111\uffb9\112" +
    "\uffb9\113\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9" +
    "\123\uffb9\124\uffb9\125\uffb9\126\uffb9\130\uffb9\001\002\000" +
    "\070\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\076\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105" +
    "\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\116\uffb8\117\uffb8" +
    "\120\uffb8\121\uffb8\122\uffb8\123\uffb8\124\uffb8\125\uffb8\126" +
    "\uffb8\130\uffb8\001\002\000\070\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\076\uffba\100\uffba\101\uffba\102" +
    "\uffba\103\uffba\104\uffba\105\uffba\110\uffba\111\uffba\112\uffba" +
    "\113\uffba\116\uffba\117\uffba\120\uffba\121\uffba\122\uffba\123" +
    "\uffba\124\uffba\125\uffba\126\uffba\130\uffba\001\002\000\024" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\130\010\001\002\000\006\116\047\121\u0143" +
    "\001\002\000\070\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\076\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\104\uffb5\105\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\116" +
    "\uffb5\117\uffb5\120\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5" +
    "\125\uffb5\126\uffb5\130\uffb5\001\002\000\070\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\076\uffb6\100\uffb6" +
    "\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\110\uffb6\111" +
    "\uffb6\112\uffb6\113\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6" +
    "\122\uffb6\123\uffb6\124\uffb6\125\uffb6\126\uffb6\130\uffb6\001" +
    "\002\000\024\021\042\022\023\023\032\024\030\025\035" +
    "\026\031\027\043\030\036\130\010\001\002\000\006\076" +
    "\u0147\116\047\001\002\000\024\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\006\116\047\121\u0149\001\002\000\070\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\076\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\110\uffbf" +
    "\111\uffbf\112\uffbf\113\uffbf\116\uffbf\117\uffbf\120\uffbf\121" +
    "\uffbf\122\uffbf\123\uffbf\124\uffbf\125\uffbf\126\uffbf\130\uffbf" +
    "\001\002\000\004\126\u014b\001\002\000\102\005\ufff9\016" +
    "\104\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\031\100\033\075\035\114\036\113\037" +
    "\070\040\121\041\076\042\110\044\103\055\101\057\072" +
    "\061\077\063\120\065\107\066\066\067\117\071\106\074" +
    "\074\075\116\106\065\107\071\130\010\001\002\000\004" +
    "\005\u014d\001\002\000\046\002\uffe3\005\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\130\uffe3\001\002\000\024\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\030\013\u0162\020\u0160\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\006\116\047\130\010\001\002\000\004\130\010" +
    "\001\002\000\006\014\u0153\126\u0154\001\002\000\004\130" +
    "\010\001\002\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130\ufff4" +
    "\001\002\000\044\005\u0156\010\026\011\024\012\033\013" +
    "\021\015\034\017\027\020\044\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\046\002\uffec\005\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\130\uffec" +
    "\001\002\000\004\126\u0158\001\002\000\044\005\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\130\ufff4\001\002\000\044\005\u015a\010\026" +
    "\011\024\012\033\013\021\015\034\017\027\020\044\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\130\010\001\002\000\046\002\uffed\005\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\130\uffed\001\002\000\006\114\u015d\125\u015c" +
    "\001\002\000\046\002\uffd8\005\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\130" +
    "\uffd8\001\002\000\026\025\142\053\132\054\145\056\134" +
    "\060\140\101\146\122\165\127\137\131\144\132\136\001" +
    "\002\000\004\125\u015f\001\002\000\046\002\uffd4\005\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\130\uffd4\001\002\000\024\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\130\010\001\002\000\006\116\047\130\010\001\002\000" +
    "\004\130\010\001\002\000\006\014\u0164\126\u0165\001\002" +
    "\000\004\130\010\001\002\000\044\005\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\130\ufff4\001\002\000\044\005\u0167\010\026\011\024" +
    "\012\033\013\021\015\034\017\027\020\044\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\130\010\001\002\000\046\002\uffe4\005\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\130\uffe4\001\002\000\004\126\u0169\001\002\000\044" +
    "\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\130\ufff4\001\002\000\044\005" +
    "\u016b\010\026\011\024\012\033\013\021\015\034\017\027" +
    "\020\044\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\130\010\001\002\000\046\002\uffe5" +
    "\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\130\uffe5\001\002\000\006\114" +
    "\u016e\125\u016d\001\002\000\046\002\uffd0\005\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\130\uffd0\001\002\000\026\025\142\053\132\054" +
    "\145\056\134\060\140\101\146\122\165\127\137\131\144" +
    "\132\136\001\002\000\004\125\u0170\001\002\000\046\002" +
    "\uffcc\005\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\130\uffcc\001\002\000\006" +
    "\116\047\130\010\001\002\000\004\122\052\001\002\000" +
    "\004\126\u0174\001\002\000\102\005\ufff9\016\104\021\042" +
    "\022\023\023\032\024\030\025\035\026\031\027\043\030" +
    "\036\031\100\033\075\035\114\036\113\037\070\040\121" +
    "\041\076\042\110\044\103\055\101\057\072\061\077\063" +
    "\120\065\107\066\066\067\117\071\106\074\074\075\116" +
    "\106\065\107\071\130\010\001\002\000\004\005\u0176\001" +
    "\002\000\046\002\uffdb\005\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\130\uffdb" +
    "\001\002\000\006\116\047\130\010\001\002\000\004\122" +
    "\052\001\002\000\004\126\u017a\001\002\000\102\005\ufff9" +
    "\016\104\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\031\100\033\075\035\114\036\113" +
    "\037\070\040\121\041\076\042\110\044\103\055\101\057" +
    "\072\061\077\063\120\065\107\066\066\067\117\071\106" +
    "\074\074\075\116\106\065\107\071\130\010\001\002\000" +
    "\004\005\u017c\001\002\000\046\002\uffdf\005\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\130\uffdf\001\002\000\024\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\130\010" +
    "\001\002\000\006\116\047\130\010\001\002\000\004\130" +
    "\010\001\002\000\006\014\u0181\126\u0182\001\002\000\004" +
    "\130\010\001\002\000\044\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130" +
    "\ufff4\001\002\000\044\005\u0184\010\026\011\024\012\033" +
    "\013\021\015\034\017\027\020\044\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\130\010" +
    "\001\002\000\046\002\uffe6\005\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\130" +
    "\uffe6\001\002\000\004\126\u0186\001\002\000\044\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\130\ufff4\001\002\000\044\005\u0188\010" +
    "\026\011\024\012\033\013\021\015\034\017\027\020\044" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\130\010\001\002\000\046\002\uffe7\005\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\130\uffe7\001\002\000\006\114\u018b\125" +
    "\u018a\001\002\000\046\002\uffd2\005\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\130\uffd2\001\002\000\026\025\142\053\132\054\145\056" +
    "\134\060\140\101\146\122\165\127\137\131\144\132\136" +
    "\001\002\000\004\125\u018d\001\002\000\046\002\uffce\005" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\130\uffce\001\002\000\006\116\047" +
    "\130\010\001\002\000\004\122\052\001\002\000\004\126" +
    "\u0191\001\002\000\102\005\ufff9\016\104\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\031" +
    "\100\033\075\035\114\036\113\037\070\040\121\041\076" +
    "\042\110\044\103\055\101\057\072\061\077\063\120\065" +
    "\107\066\066\067\117\071\106\074\074\075\116\106\065" +
    "\107\071\130\010\001\002\000\004\005\u0193\001\002\000" +
    "\046\002\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\015\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\130\uffdc\001\002" +
    "\000\024\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\130\010\001\002\000\030\013\u01a8" +
    "\020\u01a6\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\130\010\001\002\000\006\116\047" +
    "\130\010\001\002\000\004\130\010\001\002\000\006\014" +
    "\u0199\126\u019a\001\002\000\004\130\010\001\002\000\044" +
    "\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\130\ufff4\001\002\000\044\005" +
    "\u019c\010\026\011\024\012\033\013\021\015\034\017\027" +
    "\020\044\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\130\010\001\002\000\046\002\ufff3" +
    "\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\130\ufff3\001\002\000\004\126" +
    "\u019e\001\002\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130\ufff4" +
    "\001\002\000\044\005\u01a0\010\026\011\024\012\033\013" +
    "\021\015\034\017\027\020\044\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\046\002\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\130\ufff2" +
    "\001\002\000\006\114\u01a3\125\u01a2\001\002\000\046\002" +
    "\uffd7\005\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\130\uffd7\001\002\000\026" +
    "\025\142\053\132\054\145\056\134\060\140\101\146\122" +
    "\165\127\137\131\144\132\136\001\002\000\004\125\u01a5" +
    "\001\002\000\046\002\uffd3\005\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\130" +
    "\uffd3\001\002\000\024\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\130\010\001\002\000" +
    "\006\116\047\130\010\001\002\000\004\130\010\001\002" +
    "\000\006\014\u01aa\126\u01ab\001\002\000\004\130\010\001" +
    "\002\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130\ufff4\001\002" +
    "\000\044\005\u01ad\010\026\011\024\012\033\013\021\015" +
    "\034\017\027\020\044\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\130\010\001\002\000" +
    "\046\002\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\130\uffeb\001\002" +
    "\000\004\126\u01af\001\002\000\044\005\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\130\ufff4\001\002\000\044\005\u01b1\010\026\011\024" +
    "\012\033\013\021\015\034\017\027\020\044\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\130\010\001\002\000\046\002\uffea\005\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\015\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\130\uffea\001\002\000\006\114\u01b4\125\u01b3\001\002" +
    "\000\046\002\uffcf\005\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\130\uffcf\001" +
    "\002\000\026\025\142\053\132\054\145\056\134\060\140" +
    "\101\146\122\165\127\137\131\144\132\136\001\002\000" +
    "\004\125\u01b6\001\002\000\046\002\uffcb\005\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\130\uffcb\001\002\000\006\116\047\130\010\001" +
    "\002\000\004\122\052\001\002\000\004\126\u01ba\001\002" +
    "\000\102\005\ufff9\016\104\021\042\022\023\023\032\024" +
    "\030\025\035\026\031\027\043\030\036\031\100\033\075" +
    "\035\114\036\113\037\070\040\121\041\076\042\110\044" +
    "\103\055\101\057\072\061\077\063\120\065\107\066\066" +
    "\067\117\071\106\074\074\075\116\106\065\107\071\130" +
    "\010\001\002\000\004\005\u01bc\001\002\000\046\002\uffde" +
    "\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\130\uffde\001\002\000\006\116" +
    "\047\130\010\001\002\000\004\122\052\001\002\000\004" +
    "\126\u01c0\001\002\000\102\005\ufff9\016\104\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\031\100\033\075\035\114\036\113\037\070\040\121\041" +
    "\076\042\110\044\103\055\101\057\072\061\077\063\120" +
    "\065\107\066\066\067\117\071\106\074\074\075\116\106" +
    "\065\107\071\130\010\001\002\000\004\005\u01c2\001\002" +
    "\000\046\002\uffe2\005\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\130\uffe2\001" +
    "\002\000\006\114\u01c5\125\u01c4\001\002\000\046\002\uffda" +
    "\005\uffda\010\uffda\011\uffda\012\uffda\013\uffda\015\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\130\uffda\001\002\000\026\025" +
    "\142\053\132\054\145\056\134\060\140\101\146\122\165" +
    "\127\137\131\144\132\136\001\002\000\004\125\u01c7\001" +
    "\002\000\046\002\uffd6\005\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\130\uffd6" +
    "\001\002\000\024\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\130\010\001\002\000\030" +
    "\013\u01dc\020\u01da\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\130\010\001\002\000\006" +
    "\116\047\130\010\001\002\000\004\130\010\001\002\000" +
    "\006\014\u01cd\126\u01ce\001\002\000\004\130\010\001\002" +
    "\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130\ufff4\001\002\000" +
    "\044\005\u01d0\010\026\011\024\012\033\013\021\015\034" +
    "\017\027\020\044\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\130\010\001\002\000\046" +
    "\002\ufff0\005\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\130\ufff0\001\002\000" +
    "\004\126\u01d2\001\002\000\044\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\130\ufff4\001\002\000\044\005\u01d4\010\026\011\024\012" +
    "\033\013\021\015\034\017\027\020\044\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\130" +
    "\010\001\002\000\046\002\ufff1\005\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\130\ufff1\001\002\000\006\114\u01d7\125\u01d6\001\002\000" +
    "\046\002\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\130\uffd9\001\002" +
    "\000\026\025\142\053\132\054\145\056\134\060\140\101" +
    "\146\122\165\127\137\131\144\132\136\001\002\000\004" +
    "\125\u01d9\001\002\000\046\002\uffd5\005\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\130\uffd5\001\002\000\024\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\006\116\047\130\010\001\002\000\004\130\010" +
    "\001\002\000\006\014\u01de\126\u01df\001\002\000\004\130" +
    "\010\001\002\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130\ufff4" +
    "\001\002\000\044\005\u01e1\010\026\011\024\012\033\013" +
    "\021\015\034\017\027\020\044\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\130\010\001" +
    "\002\000\046\002\uffe8\005\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\130\uffe8" +
    "\001\002\000\004\126\u01e3\001\002\000\044\005\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\130\ufff4\001\002\000\044\005\u01e5\010\026" +
    "\011\024\012\033\013\021\015\034\017\027\020\044\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\130\010\001\002\000\046\002\uffe9\005\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\130\uffe9\001\002\000\006\114\u01e8\125\u01e7" +
    "\001\002\000\046\002\uffd1\005\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\130" +
    "\uffd1\001\002\000\026\025\142\053\132\054\145\056\134" +
    "\060\140\101\146\122\165\127\137\131\144\132\136\001" +
    "\002\000\004\125\u01ea\001\002\000\046\002\uffcd\005\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\130\uffcd\001\002\000\006\116\047\130" +
    "\010\001\002\000\004\122\052\001\002\000\004\126\u01ee" +
    "\001\002\000\102\005\ufff9\016\104\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\031\100" +
    "\033\075\035\114\036\113\037\070\040\121\041\076\042" +
    "\110\044\103\055\101\057\072\061\077\063\120\065\107" +
    "\066\066\067\117\071\106\074\074\075\116\106\065\107" +
    "\071\130\010\001\002\000\004\005\u01f0\001\002\000\046" +
    "\002\uffdd\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\130\uffdd\001\002\000" +
    "\006\116\047\130\010\001\002\000\004\122\052\001\002" +
    "\000\004\126\u01f4\001\002\000\102\005\ufff9\016\104\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\031\100\033\075\035\114\036\113\037\070\040" +
    "\121\041\076\042\110\044\103\055\101\057\072\061\077" +
    "\063\120\065\107\066\066\067\117\071\106\074\074\075" +
    "\116\106\065\107\071\130\010\001\002\000\004\005\u01f6" +
    "\001\002\000\046\002\uffe1\005\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\130" +
    "\uffe1\001\002\000\006\014\u01f8\126\u01f9\001\002\000\004" +
    "\130\010\001\002\000\044\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130" +
    "\ufff4\001\002\000\044\005\u01fb\010\026\011\024\012\033" +
    "\013\021\015\034\017\027\020\044\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\130\010" +
    "\001\002\000\046\002\uffee\005\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\130" +
    "\uffee\001\002\000\004\126\u01fd\001\002\000\044\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\130\ufff4\001\002\000\044\005\u01ff\010" +
    "\026\011\024\012\033\013\021\015\034\017\027\020\044" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\130\010\001\002\000\046\002\uffef\005\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\130\uffef\001\002\000\004\005\u0201\001" +
    "\002\000\044\002\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130\ufff4\001\002" +
    "\000\044\002\ufffc\010\026\011\024\012\033\013\021\015" +
    "\034\017\027\020\044\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\130\010\001\002\000" +
    "\006\124\244\125\uffb1\001\002\000\004\125\u0205\001\002" +
    "\000\052\002\ufffe\004\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\064" +
    "\ufffe\130\ufffe\001\002\000\102\005\ufff9\016\104\021\042" +
    "\022\023\023\032\024\030\025\035\026\031\027\043\030" +
    "\036\031\100\033\075\035\114\036\113\037\070\040\121" +
    "\041\076\042\110\044\103\055\101\057\072\061\077\063" +
    "\120\065\107\066\066\067\117\071\106\074\074\075\116" +
    "\106\065\107\071\130\010\001\002\000\004\005\u0208\001" +
    "\002\000\044\002\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\130\ufff4\001\002" +
    "\000\044\002\ufffb\010\026\011\024\012\033\013\021\015" +
    "\034\017\027\020\044\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\130\010\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0207\000\004\002\004\001\001\000\004\022\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0202\001\001\000\022\005\u01ff\011\104\014" +
    "\121\015\101\022\072\026\066\027\110\036\111\001\001" +
    "\000\016\007\040\010\017\012\037\014\024\022\021\030" +
    "\036\001\001\000\002\001\001\000\004\022\u01f6\001\001" +
    "\000\004\032\271\001\001\000\002\001\001\000\006\014" +
    "\u01c9\022\021\001\001\000\004\022\u01c2\001\001\000\006" +
    "\014\u0195\022\021\001\001\000\006\014\u017d\022\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\u014f\022\021\001\001\000\004\013\u0149\001" +
    "\001\000\002\001\001\000\004\022\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\044\022\021\001\001" +
    "\000\004\022\045\001\001\000\004\013\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\052\022\021\023\054\001\001\000\004\022\062\001" +
    "\001\000\002\001\001\000\004\035\056\001\001\000\010" +
    "\014\052\022\021\023\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\114\011\104\014\121\015" +
    "\101\022\072\026\066\027\110\036\111\001\001\000\004" +
    "\022\u0135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0125\001\001\000\002\001\001" +
    "\000\004\032\u0114\001\001\000\016\016\u0112\017\146\020" +
    "\150\022\127\031\126\033\125\001\001\000\022\005\u0110" +
    "\011\104\014\121\015\101\022\072\026\066\027\110\036" +
    "\111\001\001\000\016\016\u010c\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\002\001\001\000\016\016" +
    "\373\017\146\020\150\022\127\031\126\033\125\001\001" +
    "\000\004\032\370\001\001\000\022\005\367\011\104\014" +
    "\121\015\101\022\072\026\066\027\110\036\111\001\001" +
    "\000\016\016\366\017\146\020\150\022\127\031\126\033" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\335\022\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\330" +
    "\017\146\020\150\022\127\031\126\033\125\001\001\000" +
    "\016\016\324\017\146\020\150\022\127\031\126\033\125" +
    "\001\001\000\002\001\001\000\016\011\104\014\121\022" +
    "\072\026\322\027\110\036\111\001\001\000\016\016\321" +
    "\017\146\020\150\022\127\031\320\033\125\001\001\000" +
    "\002\001\001\000\022\005\310\011\104\014\121\015\101" +
    "\022\072\026\066\027\110\036\111\001\001\000\004\022" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\140\017\146\020\150\022\127\031\126\033\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\303" +
    "\001\001\000\004\022\277\001\001\000\002\001\001\000" +
    "\016\016\275\017\146\020\150\022\127\031\126\033\125" +
    "\001\001\000\002\001\001\000\004\032\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\255\022\254" +
    "\001\001\000\004\020\201\001\001\000\002\001\001\000" +
    "\004\022\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\237\017\146\020\150\022\127\031\126\033" +
    "\125\001\001\000\002\001\001\000\016\016\155\017\146" +
    "\020\150\022\127\031\126\033\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\153\011\104\014\121" +
    "\015\101\022\072\026\066\027\110\036\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\201\001\001" +
    "\000\016\016\236\017\146\020\150\022\127\031\126\033" +
    "\125\001\001\000\016\016\235\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\016\016\234\017\146\020" +
    "\150\022\127\031\126\033\125\001\001\000\016\016\233" +
    "\017\146\020\150\022\127\031\126\033\125\001\001\000" +
    "\016\016\232\017\146\020\150\022\127\031\126\033\125" +
    "\001\001\000\016\016\231\017\146\020\150\022\127\031" +
    "\126\033\125\001\001\000\016\016\223\017\146\020\150" +
    "\022\127\031\126\033\125\001\001\000\016\016\220\017" +
    "\146\020\150\022\127\031\126\033\125\001\001\000\016" +
    "\016\216\017\146\020\150\022\127\031\126\033\125\001" +
    "\001\000\016\016\215\017\146\020\150\022\127\031\126" +
    "\033\125\001\001\000\016\016\214\017\146\020\150\022" +
    "\127\031\126\033\125\001\001\000\016\016\213\017\146" +
    "\020\150\022\127\031\126\033\125\001\001\000\016\016" +
    "\212\017\146\020\150\022\127\031\126\033\125\001\001" +
    "\000\016\016\211\017\146\020\150\022\127\031\126\033" +
    "\125\001\001\000\016\016\210\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\016\016\207\017\146\020" +
    "\150\022\127\031\126\033\125\001\001\000\016\016\206" +
    "\017\146\020\150\022\127\031\126\033\125\001\001\000" +
    "\002\001\001\000\016\016\204\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\002\001\001\000\016\016" +
    "\203\017\146\020\150\022\127\031\126\033\125\001\001" +
    "\000\004\020\201\001\001\000\004\020\201\001\001\000" +
    "\002\001\001\000\004\020\201\001\001\000\004\020\201" +
    "\001\001\000\004\020\201\001\001\000\004\020\201\001" +
    "\001\000\004\020\201\001\001\000\004\020\201\001\001" +
    "\000\004\020\201\001\001\000\004\020\201\001\001\000" +
    "\004\020\201\001\001\000\002\001\001\000\004\020\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\201\034\225\001\001\000\016\016\227\017\146\020\150" +
    "\022\127\031\126\033\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\201\034\230\001\001\000\002" +
    "\001\001\000\004\020\201\001\001\000\004\020\201\001" +
    "\001\000\004\020\201\001\001\000\004\020\201\001\001" +
    "\000\004\020\201\001\001\000\004\020\201\001\001\000" +
    "\004\020\201\001\001\000\004\032\246\001\001\000\004" +
    "\032\242\001\001\000\002\001\001\000\004\022\244\001" +
    "\001\000\004\032\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\250\022\021\001\001\000\002\001" +
    "\001\000\006\014\252\022\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\270\032\271\001\001\000" +
    "\002\001\001\000\016\016\260\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\004\021\263\001\001\000" +
    "\004\020\201\001\001\000\002\001\001\000\016\016\265" +
    "\017\146\020\150\022\127\031\126\033\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\201\034\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\201\034\225\001\001\000" +
    "\002\001\001\000\004\032\302\001\001\000\004\032\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\307\022\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\313\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\004\020\201\001\001\000" +
    "\002\001\001\000\016\016\316\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\004\020\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\201\001" +
    "\001\000\022\005\326\011\104\014\121\015\101\022\072" +
    "\026\066\027\110\036\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\201\001\001\000\022\005\332" +
    "\011\104\014\121\015\101\022\072\026\066\027\110\036" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\336\001\001\000\002\001\001\000" +
    "\004\022\340\001\001\000\004\032\341\001\001\000\002" +
    "\001\001\000\022\005\343\011\104\014\121\015\101\022" +
    "\072\026\066\027\110\036\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\346\011\104\014\121\015" +
    "\101\022\072\026\066\027\110\036\111\001\001\000\004" +
    "\037\347\001\001\000\002\001\001\000\004\022\351\001" +
    "\001\000\004\032\352\001\001\000\004\022\353\001\001" +
    "\000\002\001\001\000\022\005\355\011\104\014\121\015" +
    "\101\022\072\026\066\027\110\036\111\001\001\000\004" +
    "\037\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\362\011\104\014\121\015\101" +
    "\022\072\026\066\027\110\036\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\201" +
    "\001\001\000\022\005\375\011\104\014\121\015\101\022" +
    "\072\026\066\027\110\036\111\001\001\000\004\024\376" +
    "\001\001\000\004\025\u0101\001\001\000\016\016\u0106\017" +
    "\146\020\150\022\127\031\126\033\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\u0105\011\104\014\121\015\101\022\072" +
    "\026\066\027\110\036\111\001\001\000\002\001\001\000" +
    "\004\020\201\001\001\000\022\005\u0108\011\104\014\121" +
    "\015\101\022\072\026\066\027\110\036\111\001\001\000" +
    "\002\001\001\000\016\016\u010a\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\004\020\201\001\001\000" +
    "\002\001\001\000\004\020\201\001\001\000\022\005\u010e" +
    "\011\104\014\121\015\101\022\072\026\066\027\110\036" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\201\001\001\000" +
    "\016\016\u011e\017\146\020\150\022\127\031\126\033\125" +
    "\001\001\000\002\001\001\000\016\016\u011b\017\146\020" +
    "\150\022\127\031\126\033\125\001\001\000\016\016\u0117" +
    "\017\146\020\150\022\127\031\126\033\125\001\001\000" +
    "\004\020\201\001\001\000\002\001\001\000\016\016\u011a" +
    "\017\146\020\150\022\127\031\126\033\125\001\001\000" +
    "\004\020\201\001\001\000\004\020\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\201\001\001\000" +
    "\002\001\001\000\016\016\u0121\017\146\020\150\022\127" +
    "\031\126\033\125\001\001\000\004\020\201\001\001\000" +
    "\016\016\u0123\017\146\020\150\022\127\031\126\033\125" +
    "\001\001\000\004\020\201\001\001\000\002\001\001\000" +
    "\004\032\u0128\001\001\000\004\032\u0127\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\u012b\022\072\027" +
    "\u012a\001\001\000\002\001\001\000\004\022\u012c\001\001" +
    "\000\002\001\001\000\016\016\u012e\017\146\020\150\022" +
    "\127\031\126\033\125\001\001\000\004\020\201\001\001" +
    "\000\010\014\u012b\022\072\027\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\u0133\011\104\014\121" +
    "\015\101\022\072\026\066\027\110\036\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0138\001\001" +
    "\000\004\032\u0137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u0141\022\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u0145\022\021\001\001\000\002\001\001\000\006" +
    "\014\u0147\022\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\u014b\011\104\014\121" +
    "\015\101\022\072\026\066\027\110\036\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u0176\022\021" +
    "\001\001\000\006\014\u0160\022\021\001\001\000\004\022" +
    "\u015a\001\001\000\004\022\u0151\001\001\000\002\001\001" +
    "\000\004\022\u0156\001\001\000\004\006\u0154\001\001\000" +
    "\016\007\040\010\017\012\037\014\024\022\021\030\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0158\001\001\000\016\007\040\010\017\012\037\014\024" +
    "\022\021\030\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\u015d\020\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\u0170\022" +
    "\021\001\001\000\004\022\u016b\001\001\000\004\022\u0162" +
    "\001\001\000\002\001\001\000\004\022\u0167\001\001\000" +
    "\004\006\u0165\001\001\000\016\007\040\010\017\012\037" +
    "\014\024\022\021\030\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0169\001\001\000\016\007\040" +
    "\010\017\012\037\014\024\022\021\030\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u016e\020\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u0171\001\001\000\004\013\u0172\001\001" +
    "\000\002\001\001\000\022\005\u0174\011\104\014\121\015" +
    "\101\022\072\026\066\027\110\036\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0177\001\001\000" +
    "\004\013\u0178\001\001\000\002\001\001\000\022\005\u017a" +
    "\011\104\014\121\015\101\022\072\026\066\027\110\036" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\u018d\022\021\001\001\000\004\022\u0188\001\001\000" +
    "\004\022\u017f\001\001\000\002\001\001\000\004\022\u0184" +
    "\001\001\000\004\006\u0182\001\001\000\016\007\040\010" +
    "\017\012\037\014\024\022\021\030\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0186\001\001\000" +
    "\016\007\040\010\017\012\037\014\024\022\021\030\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u018b\020\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u018e\001\001\000\004\013" +
    "\u018f\001\001\000\002\001\001\000\022\005\u0191\011\104" +
    "\014\121\015\101\022\072\026\066\027\110\036\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u01bc" +
    "\022\021\001\001\000\006\014\u01a6\022\021\001\001\000" +
    "\004\022\u01a0\001\001\000\004\022\u0197\001\001\000\002" +
    "\001\001\000\004\022\u019c\001\001\000\004\006\u019a\001" +
    "\001\000\016\007\040\010\017\012\037\014\024\022\021" +
    "\030\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u019e\001\001\000\016\007\040\010\017\012\037" +
    "\014\024\022\021\030\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\u01a3\020\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\u01b6\022\021\001\001\000\004\022\u01b1\001\001\000\004" +
    "\022\u01a8\001\001\000\002\001\001\000\004\022\u01ad\001" +
    "\001\000\004\006\u01ab\001\001\000\016\007\040\010\017" +
    "\012\037\014\024\022\021\030\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u01af\001\001\000\016" +
    "\007\040\010\017\012\037\014\024\022\021\030\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\u01b4\020\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u01b7\001\001\000\004\013\u01b8" +
    "\001\001\000\002\001\001\000\022\005\u01ba\011\104\014" +
    "\121\015\101\022\072\026\066\027\110\036\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u01bd\001" +
    "\001\000\004\013\u01be\001\001\000\002\001\001\000\022" +
    "\005\u01c0\011\104\014\121\015\101\022\072\026\066\027" +
    "\110\036\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\u01c5\020" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\u01f0\022\021\001\001\000\006\014\u01da\022\021\001" +
    "\001\000\004\022\u01d4\001\001\000\004\022\u01cb\001\001" +
    "\000\002\001\001\000\004\022\u01d0\001\001\000\004\006" +
    "\u01ce\001\001\000\016\007\040\010\017\012\037\014\024" +
    "\022\021\030\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u01d2\001\001\000\016\007\040\010\017" +
    "\012\037\014\024\022\021\030\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u01d7" +
    "\020\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u01ea\022\021\001\001\000\004\022\u01e5\001\001" +
    "\000\004\022\u01dc\001\001\000\002\001\001\000\004\022" +
    "\u01e1\001\001\000\004\006\u01df\001\001\000\016\007\040" +
    "\010\017\012\037\014\024\022\021\030\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u01e3\001\001" +
    "\000\016\007\040\010\017\012\037\014\024\022\021\030" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u01e8\020\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u01eb\001\001\000\004" +
    "\013\u01ec\001\001\000\002\001\001\000\022\005\u01ee\011" +
    "\104\014\121\015\101\022\072\026\066\027\110\036\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u01f1\001\001\000\004\013\u01f2\001\001\000\002\001\001" +
    "\000\022\005\u01f4\011\104\014\121\015\101\022\072\026" +
    "\066\027\110\036\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u01fb\001\001\000" +
    "\004\006\u01f9\001\001\000\016\007\040\010\017\012\037" +
    "\014\024\022\021\030\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u01fd\001\001\000\016\007\040" +
    "\010\017\012\037\014\024\022\021\030\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0201\001\001" +
    "\000\016\007\040\010\017\012\037\014\024\022\021\030" +
    "\036\001\001\000\004\032\u0203\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\u0206\011\104\014\121\015" +
    "\101\022\072\026\066\027\110\036\111\001\001\000\002" +
    "\001\001\000\004\006\u0208\001\001\000\016\007\040\010" +
    "\017\012\037\014\024\022\021\030\036\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expressionchain ::= 
            {
              ExprChain RESULT =null;
		 RESULT = new ExprChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expressionchain ::= COMMA expression expressionchain 
            {
              ExprChain RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(e, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // paramlist ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // paramlist ::= LPAREN expression expressionchain RPAREN 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // bracelist ::= LBRACE RBRACE 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracelist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // bracelist ::= LBRACE expression expressionchain RBRACE 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracelist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // literal ::= CREATE type LBRACKET RBRACKET bracelist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayLiteral(t, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // literal ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // literal ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // literal ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // literal ::= MINUS expression 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e, mleft, mright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // literal ::= paramlist POINTER LBRACE statementlist RBRACE 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodLiteral(p, l, p1left, p1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // literal ::= CREATE identifier paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectCreate(i, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // literal ::= NIL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nil(nleft, nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // literal ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // literal ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // literal ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // literal ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expression ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expression ::= DECREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expression ::= DECREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expression ::= THIS idchain DECREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expression ::= identifier idchain DECREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expression ::= INCREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression ::= INCREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression ::= THIS idchain INCREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression ::= identifier idchain INCREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression ::= typeof 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Typeof t = (Typeof)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= expression DIFFERS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Differs(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s, e.line, e.column)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // catchlist ::= 
            {
              CatchList RESULT =null;
		 RESULT = new CatchList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // catchlist ::= CATCH identifier idchain identifier COLON statementlist catchlist 
            {
              CatchList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CatchList l = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new Catch(i, c, i2, s, i.line, i.column), 0); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // trycatch ::= TRY COLON statementlist catchlist FINALLY COLON statementlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, s2, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // trycatch ::= TRY COLON statementlist catchlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // semicolon_statement ::= THROW expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Throw(e, e.line, e.column);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // semicolon_statement ::= SUPER LPAREN RPAREN 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Super(sleft, sright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // semicolon_statement ::= EXEC methodcall 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCallStatement(m, m.line, m.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // semicolon_statement ::= DECREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // semicolon_statement ::= DECREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // semicolon_statement ::= THIS idchain DECREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // semicolon_statement ::= identifier idchain DECREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // semicolon_statement ::= INCREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // semicolon_statement ::= INCREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // semicolon_statement ::= THIS idchain INCREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // semicolon_statement ::= identifier idchain INCREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // semicolon_statement ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // semicolon_statement ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continue(cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // semicolon_statement ::= EXIT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // semicolon_statement ::= ASSERT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // semicolon_statement ::= RETURN expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // semicolon_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // semicolon_statement ::= identifier LBRACE expression RBRACE EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashmapAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // semicolon_statement ::= identifier EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assignment(e, i, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // semicolon_statement ::= type identifier EQUAL expression 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecAssignment(e, i, t, 1, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // semicolon_statement ::= PRINT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement v = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_statement ::= trycatch 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TryCatch t = (TryCatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_statement ::= semicolon_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_statement ::= FOREACH type identifier IN identifier idchain COLON statementlist END 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Foreach(t, i1, i2, c, s, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_statement ::= FOR LPAREN semicolon_statement SEMICOLON expression SEMICOLON semicolon_statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3, s1.line, s1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // methodcall ::= expression paramlist 
            {
              MethodCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // typeof ::= identifier idchain TYPEOF type 
            {
              Typeof RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Typeof(i, c, t, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeof",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= CONST SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= CONST identifier idchain 
            {
              Type RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, true, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= CONST STRING 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= CONST BOOLEAN 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BooleanType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= CONST FLOAT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FloatType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= CONST INT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= CONST VAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= VAR 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarType(false, vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidType(vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, false, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2, false, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringType(false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatType(false, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(false, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // argchain ::= 
            {
              ArgChain RESULT =null;
		 RESULT = new ArgChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // argchain ::= COMMA parameter argchain 
            {
              ArgChain RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arglist ::= LPAREN RPAREN 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arglist ::= LPAREN parameter argchain RPAREN 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArgList(p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // classvardec ::= PUBLIC STATIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 3, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // classvardec ::= PROTECTED STATIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 2, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // classvardec ::= PRIVATE STATIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 0, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // classvardec ::= STATIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 1, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // classvardec ::= PUBLIC STATIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // classvardec ::= PROTECTED STATIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // classvardec ::= PRIVATE STATIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // classvardec ::= STATIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // classvardec ::= PUBLIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 3, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // classvardec ::= PROTECTED type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 2, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // classvardec ::= PRIVATE type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 0, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // classvardec ::= type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 1, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // classvardec ::= PUBLIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // classvardec ::= PROTECTED type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classvardec ::= PRIVATE type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // classvardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // methoddef ::= PROTECTED STATIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // methoddef ::= STATIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // methoddef ::= PRIVATE STATIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // methoddef ::= PUBLIC STATIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // methoddef ::= PROTECTED SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methoddef ::= SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1, false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methoddef ::= PRIVATE SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // methoddef ::= PUBLIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constructor ::= CONSTRUCTOR arglist COLON statementlist END 
            {
              Constructor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdef ::= PROTECTED STATIC CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 2, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdef ::= PROTECTED STATIC CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 2, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdef ::= STATIC CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 1, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdef ::= STATIC CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 1, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classdef ::= PRIVATE STATIC CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 0, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classdef ::= PRIVATE STATIC CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 0, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classdef ::= PUBLIC STATIC CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 3, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classdef ::= PUBLIC STATIC CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 3, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // classdef ::= PROTECTED CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 2, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // classdef ::= PROTECTED CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 2, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classdef ::= CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 1, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classdef ::= CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 1, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= PRIVATE CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 0, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 0, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 3, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdef ::= PUBLIC CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 3, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // deflist ::= deflist classvardec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add((Def)c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= deflist constructor 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c, i.line, i.column)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

