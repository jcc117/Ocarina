
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 18 21:20:25 EDT 2018
//----------------------------------------------------

package lexer_parser;

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 18 21:20:25 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\002\000\002\007\010\000\002\007" +
    "\012\000\002\007\012\000\002\007\010\000\002\007\011" +
    "\000\002\007\007\000\002\007\012\000\002\007\010\000" +
    "\002\007\011\000\002\007\013\000\002\007\013\000\002" +
    "\007\011\000\002\007\012\000\002\007\010\000\002\007" +
    "\013\000\002\007\011\000\002\027\007\000\002\010\012" +
    "\000\002\010\012\000\002\010\011\000\002\010\012\000" +
    "\002\012\005\000\002\012\006\000\002\012\006\000\002" +
    "\012\006\000\002\012\007\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\011\005\000\002\013\006" +
    "\000\002\013\004\000\002\034\005\000\002\034\002\000" +
    "\002\022\004\000\002\014\005\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\010\000\002\014\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\005\000\002" +
    "\014\007\000\002\032\006\000\002\030\007\000\002\030" +
    "\007\000\002\031\005\000\002\031\002\000\002\015\003" +
    "\000\002\015\004\000\002\025\005\000\002\025\011\000" +
    "\002\025\010\000\002\025\007\000\002\025\007\000\002" +
    "\025\007\000\002\025\015\000\002\025\010\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\026\006" +
    "\000\002\026\006\000\002\026\005\000\002\026\010\000" +
    "\002\026\010\000\002\026\004\000\002\026\006\000\002" +
    "\026\006\000\002\026\003\000\002\026\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\005\000\002" +
    "\026\004\000\002\035\007\000\002\035\012\000\002\036" +
    "\011\000\002\036\002\000\002\023\007\000\002\023\002" +
    "\000\002\024\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\006\000\002\016\006\000\002" +
    "\016\004\000\002\016\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\007\000" +
    "\002\017\004\000\002\017\007\000\002\017\010\000\002" +
    "\017\003\000\002\017\007\000\002\020\006\000\002\020" +
    "\004\000\002\033\005\000\002\033\002\000\002\021\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01cb\000\004\006\004\001\002\000\004\127\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\124\011\001\002\000\104\014\uff60\043\uff60\044" +
    "\uff60\045\uff60\046\uff60\047\uff60\050\uff60\066\uff60\067\uff60" +
    "\075\uff60\077\uff60\100\uff60\101\uff60\102\uff60\103\uff60\104" +
    "\uff60\105\uff60\106\uff60\107\uff60\110\uff60\111\uff60\112\uff60" +
    "\113\uff60\115\uff60\116\uff60\117\uff60\120\uff60\121\uff60\122" +
    "\uff60\123\uff60\124\uff60\125\uff60\127\uff60\001\002\000\052" +
    "\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\062\ufffd\127" +
    "\ufffd\001\002\000\052\002\ufff4\004\016\007\015\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\062\013\127\ufff4\001\002\000\004\004\u01ca\001" +
    "\002\000\004\002\001\001\002\000\004\127\010\001\002" +
    "\000\100\005\ufff9\016\104\021\042\022\023\023\032\024" +
    "\030\025\035\026\031\027\043\030\036\031\100\033\075" +
    "\035\113\036\112\037\070\040\121\041\076\042\103\053" +
    "\101\055\072\057\077\061\120\063\107\064\066\065\116" +
    "\070\106\073\074\074\115\105\065\106\071\127\010\001" +
    "\002\000\044\002\uffff\010\027\011\024\012\033\013\021" +
    "\015\034\017\026\020\044\021\042\022\023\023\032\024" +
    "\030\025\035\026\031\027\043\030\036\127\010\001\002" +
    "\000\046\002\ufff7\005\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\127\ufff7\001" +
    "\002\000\004\127\010\001\002\000\066\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\075\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\107\uffbc\110\uffbc" +
    "\111\uffbc\112\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc\122" +
    "\uffbc\123\233\124\uffbc\125\uffbc\127\uffbc\001\002\000\066" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\075" +
    "\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf" +
    "\107\uffcf\110\uffcf\111\uffcf\112\uffcf\115\uffcf\116\uffcf\117" +
    "\uffcf\120\uffcf\122\uffcf\123\uffcf\124\uffcf\125\uffcf\127\uffcf" +
    "\001\002\000\032\013\u019c\017\u019a\020\u0199\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\127\010\001\002\000\006\115\047\127\010\001\002\000" +
    "\004\013\u018a\001\002\000\032\013\u016b\017\u0169\020\u0168" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\127\010\001\002\000\066\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\075\uffcd\077\uffcd\100" +
    "\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\107\uffcd\110\uffcd" +
    "\111\uffcd\112\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\122" +
    "\uffcd\123\uffcd\124\uffcd\125\uffcd\127\uffcd\001\002\000\066" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\075" +
    "\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc" +
    "\107\uffcc\110\uffcc\111\uffcc\112\uffcc\115\uffcc\116\uffcc\117" +
    "\uffcc\120\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\127\uffcc" +
    "\001\002\000\066\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\075\uffce\077\uffce\100\uffce\101\uffce\102\uffce" +
    "\103\uffce\104\uffce\107\uffce\110\uffce\111\uffce\112\uffce\115" +
    "\uffce\116\uffce\117\uffce\120\uffce\122\uffce\123\uffce\124\uffce" +
    "\125\uffce\127\uffce\001\002\000\032\013\u0149\017\u0147\020" +
    "\u0146\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\127\010\001\002\000\004\121\052\001" +
    "\002\000\004\117\u013d\001\002\000\020\020\u0135\022\u0138" +
    "\023\u0137\024\u0136\026\u0133\027\u0132\127\010\001\002\000" +
    "\046\002\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\127\ufff6\001\002" +
    "\000\046\002\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\127\ufff5\001" +
    "\002\000\046\002\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\127\ufff8" +
    "\001\002\000\066\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\075\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\104\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\115" +
    "\uffc9\116\uffc9\117\uffc9\120\uffc9\122\uffc9\123\uffc9\124\uffc9" +
    "\125\uffc9\127\uffc9\001\002\000\066\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\075\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\102\uffc8\103\uffc8\104\uffc8\107\uffc8\110\uffc8\111" +
    "\uffc8\112\uffc8\115\uffc8\116\uffc8\117\uffc8\120\uffc8\122\uffc8" +
    "\123\uffc8\124\uffc8\125\uffc8\127\uffc8\001\002\000\024\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\127\010\001\002\000\006\115\047\127\010\001" +
    "\002\000\004\121\052\001\002\000\004\116\050\001\002" +
    "\000\066\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\075\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\115\uffd0\116" +
    "\uffd0\117\uffd0\120\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0" +
    "\127\uffd0\001\002\000\004\125\064\001\002\000\026\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\122\054\127\010\001\002\000\006\115\047\127" +
    "\010\001\002\000\004\125\uffd4\001\002\000\006\075\056" +
    "\122\uffd2\001\002\000\024\021\042\022\023\023\032\024" +
    "\030\025\035\026\031\027\043\030\036\127\010\001\002" +
    "\000\004\122\060\001\002\000\004\125\uffd5\001\002\000" +
    "\006\075\056\122\uffd2\001\002\000\004\122\uffd3\001\002" +
    "\000\006\075\uffd1\122\uffd1\001\002\000\100\005\ufff9\016" +
    "\104\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\031\100\033\075\035\113\036\112\037" +
    "\070\040\121\041\076\042\103\053\101\055\072\057\077" +
    "\061\120\063\107\064\066\065\116\070\106\073\074\074" +
    "\115\105\065\106\071\127\010\001\002\000\006\053\u012f" +
    "\127\010\001\002\000\006\122\uffa6\124\uffa6\001\002\000" +
    "\112\005\uffbb\016\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\053\uffbb\055\uffbb\057\uffbb\061\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\105\uffbb\106\uffbb\120\uffbb\127\uffbb\001\002\000\004\121" +
    "\u0122\001\002\000\006\053\u011f\127\010\001\002\000\004" +
    "\121\u011b\001\002\000\020\105\uffbc\106\uffbc\113\u010e\115" +
    "\u010f\117\u010c\123\233\127\uffbc\001\002\000\042\025\142" +
    "\051\132\052\145\053\135\054\133\056\140\065\116\100" +
    "\146\105\143\106\131\114\150\121\134\126\137\127\010" +
    "\130\144\131\136\001\002\000\100\005\ufff9\016\104\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\031\100\033\075\035\113\036\112\037\070\040" +
    "\121\041\076\042\103\053\101\055\072\057\077\061\120" +
    "\063\107\064\066\065\116\070\106\073\074\074\115\105" +
    "\065\106\071\127\010\001\002\000\042\025\142\051\132" +
    "\052\145\053\135\054\133\056\140\065\116\100\146\105" +
    "\143\106\131\114\150\121\134\126\137\127\010\130\144" +
    "\131\136\001\002\000\004\121\u0102\001\002\000\042\025" +
    "\142\051\132\052\145\053\135\054\133\056\140\065\116" +
    "\100\146\105\143\106\131\114\150\121\134\126\137\127" +
    "\010\130\144\131\136\001\002\000\010\105\uffbc\106\uffbc" +
    "\123\233\001\002\000\112\005\ufff9\016\104\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\031\100\032\ufff9\033\075\034\ufff9\035\113\036\112\037" +
    "\070\040\121\041\076\042\103\053\101\055\072\057\077" +
    "\061\120\063\107\064\066\065\116\070\106\071\ufff9\072" +
    "\ufff9\073\074\074\115\105\065\106\071\120\ufff9\127\010" +
    "\001\002\000\042\025\142\051\132\052\145\053\135\054" +
    "\133\056\140\065\116\100\146\105\143\106\131\114\150" +
    "\121\134\126\137\127\010\130\144\131\136\001\002\000" +
    "\004\121\355\001\002\000\112\005\uffaf\016\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\053\uffaf\055\uffaf\057" +
    "\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\105\uffaf\106\uffaf\120\uffaf\127" +
    "\uffaf\001\002\000\004\125\336\001\002\000\006\122\uffa5" +
    "\124\uffa5\001\002\000\112\005\uffb0\016\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\053\uffb0\055\uffb0\057\uffb0" +
    "\061\uffb0\063\uffb0\064\uffb0\065\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\105\uffb0\106\uffb0\120\uffb0\127\uffb0" +
    "\001\002\000\004\124\335\001\002\000\042\025\142\051" +
    "\132\052\145\053\135\054\133\056\140\065\116\100\146" +
    "\105\143\106\131\114\150\121\134\126\137\127\010\130" +
    "\144\131\136\001\002\000\042\025\142\051\132\052\145" +
    "\053\135\054\133\056\140\065\116\100\146\105\143\106" +
    "\131\114\150\121\134\126\137\127\010\130\144\131\136" +
    "\001\002\000\004\005\324\001\002\000\074\016\104\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\031\100\033\075\035\113\036\112\037\070\040" +
    "\121\041\076\042\103\053\101\055\072\057\077\061\120" +
    "\063\107\064\066\065\116\070\106\073\074\105\065\106" +
    "\071\127\010\001\002\000\006\053\314\127\010\001\002" +
    "\000\006\122\uff9c\124\uff9c\001\002\000\004\121\310\001" +
    "\002\000\100\005\ufff9\016\104\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\031\100\033" +
    "\075\035\113\036\112\037\070\040\121\041\076\042\103" +
    "\053\101\055\072\057\077\061\120\063\107\064\066\065" +
    "\116\070\106\073\074\074\115\105\065\106\071\127\010" +
    "\001\002\000\006\115\047\127\010\001\002\000\006\113" +
    "\125\124\124\001\002\000\112\005\uffd6\016\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\053\uffd6\055\uffd6\057" +
    "\uffd6\061\uffd6\063\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\105\uffd6\106\uffd6\120\uffd6\127" +
    "\uffd6\001\002\000\042\025\142\051\132\052\145\053\135" +
    "\054\133\056\140\065\116\100\146\105\143\106\131\114" +
    "\150\121\134\126\137\127\010\130\144\131\136\001\002" +
    "\000\064\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050" +
    "\uff7a\075\uff7a\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a" +
    "\104\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a\115\uff7a\116" +
    "\uff7a\117\uff7a\120\uff7a\122\uff7a\123\uff7a\124\uff7a\125\uff7a" +
    "\001\002\000\064\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\075\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f" +
    "\103\uff7f\104\uff7f\107\uff7f\110\uff7f\111\uff7f\112\uff7f\115" +
    "\uff7f\116\uff7f\117\uff7f\120\uff7f\122\uff7f\123\uff7f\124\uff7f" +
    "\125\uff7f\001\002\000\072\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\067\uffbc\075\uffbc\077\uffbc\100\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\115\uffbc\116\uffbc\117\uffbc" +
    "\120\uffbc\122\uffbc\123\233\124\uffbc\125\uffbc\001\002\000" +
    "\006\053\273\127\010\001\002\000\064\043\uff6e\044\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\075\uff6e\077\uff6e\100" +
    "\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\107\uff6e\110\uff6e" +
    "\111\uff6e\112\uff6e\115\uff6e\116\uff6e\117\uff6e\120\uff6e\122" +
    "\uff6e\123\uff6e\124\uff6e\125\uff6e\001\002\000\064\043\uff6c" +
    "\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\075\uff6c\077" +
    "\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c\107\uff6c" +
    "\110\uff6c\111\uff6c\112\uff6c\115\uff6c\116\uff6c\117\uff6c\120" +
    "\uff6c\122\uff6c\123\uff6c\124\uff6c\125\uff6c\001\002\000\044" +
    "\025\142\051\132\052\145\053\135\054\133\056\140\065" +
    "\116\100\146\105\143\106\131\114\150\121\134\122\254" +
    "\126\137\127\010\130\144\131\136\001\002\000\070\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\075\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105" +
    "\uffbc\106\uffbc\107\uff7b\110\uff7b\111\uff7b\112\uff7b\115\uff7b" +
    "\116\uff7b\117\uff7b\120\uff7b\122\uff7b\123\233\124\uff7b\125" +
    "\uff7b\001\002\000\064\043\uff6f\044\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\075\uff6f\077\uff6f\100\uff6f\101\uff6f\102" +
    "\uff6f\103\uff6f\104\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f" +
    "\115\uff6f\116\uff6f\117\uff6f\120\uff6f\122\uff6f\123\uff6f\124" +
    "\uff6f\125\uff6f\001\002\000\064\043\uff66\044\uff66\045\uff66" +
    "\046\uff66\047\uff66\050\uff66\075\uff66\077\uff66\100\uff66\101" +
    "\uff66\102\uff66\103\uff66\104\uff66\107\uff66\110\uff66\111\uff66" +
    "\112\uff66\115\uff66\116\uff66\117\uff66\120\uff66\122\uff66\123" +
    "\uff66\124\uff66\125\uff66\001\002\000\024\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\127" +
    "\010\001\002\000\054\043\160\044\162\045\174\046\163" +
    "\047\167\050\164\077\161\100\176\101\170\102\172\103" +
    "\201\104\157\107\173\110\200\111\175\112\171\115\165" +
    "\117\166\122\uffad\123\177\124\uffad\001\002\000\004\117" +
    "\237\001\002\000\006\053\231\127\010\001\002\000\064" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70\075" +
    "\uff70\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70" +
    "\107\uff70\110\uff70\111\uff70\112\uff70\115\uff70\116\uff70\117" +
    "\uff70\120\uff70\122\uff70\123\uff70\124\uff70\125\uff70\001\002" +
    "\000\064\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050" +
    "\uff6d\075\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d" +
    "\104\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\115\uff6d\116" +
    "\uff6d\117\uff6d\120\uff6d\122\uff6d\123\uff6d\124\uff6d\125\uff6d" +
    "\001\002\000\042\025\142\051\132\052\145\053\135\054" +
    "\133\056\140\065\116\100\146\105\143\106\131\114\150" +
    "\121\134\126\137\127\010\130\144\131\136\001\002\000" +
    "\064\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\075\uff71\077\uff71\100\uff71\101\uff71\102\uff71\103\uff71\104" +
    "\uff71\107\uff71\110\uff71\111\uff71\112\uff71\115\uff71\116\uff71" +
    "\117\uff71\120\uff71\122\uff71\123\uff71\124\uff71\125\uff71\001" +
    "\002\000\042\025\142\051\132\052\145\053\135\054\133" +
    "\056\140\065\116\100\146\105\143\106\131\114\150\121" +
    "\134\126\137\127\010\130\144\131\136\001\002\000\004" +
    "\076\152\001\002\000\004\117\153\001\002\000\100\016" +
    "\104\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\031\100\033\075\035\113\036\112\037" +
    "\070\040\121\041\076\042\103\053\101\055\072\057\077" +
    "\061\120\063\107\064\066\065\116\070\106\073\074\074" +
    "\115\105\065\106\071\120\ufff9\127\010\001\002\000\004" +
    "\120\155\001\002\000\064\043\uff6a\044\uff6a\045\uff6a\046" +
    "\uff6a\047\uff6a\050\uff6a\075\uff6a\077\uff6a\100\uff6a\101\uff6a" +
    "\102\uff6a\103\uff6a\104\uff6a\107\uff6a\110\uff6a\111\uff6a\112" +
    "\uff6a\115\uff6a\116\uff6a\117\uff6a\120\uff6a\122\uff6a\123\uff6a" +
    "\124\uff6a\125\uff6a\001\002\000\064\043\160\044\162\045" +
    "\174\046\163\047\167\050\164\075\uff7c\077\161\100\176" +
    "\101\170\102\172\103\201\104\157\107\173\110\200\111" +
    "\175\112\171\115\165\116\uff7c\117\166\120\uff7c\122\uff7c" +
    "\123\177\124\uff7c\125\uff7c\001\002\000\042\025\142\051" +
    "\132\052\145\053\135\054\133\056\140\065\116\100\146" +
    "\105\143\106\131\114\150\121\134\126\137\127\010\130" +
    "\144\131\136\001\002\000\042\025\142\051\132\052\145" +
    "\053\135\054\133\056\140\065\116\100\146\105\143\106" +
    "\131\114\150\121\134\126\137\127\010\130\144\131\136" +
    "\001\002\000\042\025\142\051\132\052\145\053\135\054" +
    "\133\056\140\065\116\100\146\105\143\106\131\114\150" +
    "\121\134\126\137\127\010\130\144\131\136\001\002\000" +
    "\042\025\142\051\132\052\145\053\135\054\133\056\140" +
    "\065\116\100\146\105\143\106\131\114\150\121\134\126" +
    "\137\127\010\130\144\131\136\001\002\000\042\025\142" +
    "\051\132\052\145\053\135\054\133\056\140\065\116\100" +
    "\146\105\143\106\131\114\150\121\134\126\137\127\010" +
    "\130\144\131\136\001\002\000\042\025\142\051\132\052" +
    "\145\053\135\054\133\056\140\065\116\100\146\105\143" +
    "\106\131\114\150\121\134\126\137\127\010\130\144\131" +
    "\136\001\002\000\042\025\142\051\132\052\145\053\135" +
    "\054\133\056\140\065\116\100\146\105\143\106\131\114" +
    "\150\121\134\126\137\127\010\130\144\131\136\001\002" +
    "\000\042\025\142\051\132\052\145\053\135\054\133\056" +
    "\140\065\116\100\146\105\143\106\131\114\150\121\134" +
    "\126\137\127\010\130\144\131\136\001\002\000\042\025" +
    "\142\051\132\052\145\053\135\054\133\056\140\065\116" +
    "\100\146\105\143\106\131\114\150\121\134\126\137\127" +
    "\010\130\144\131\136\001\002\000\042\025\142\051\132" +
    "\052\145\053\135\054\133\056\140\065\116\100\146\105" +
    "\143\106\131\114\150\121\134\126\137\127\010\130\144" +
    "\131\136\001\002\000\042\025\142\051\132\052\145\053" +
    "\135\054\133\056\140\065\116\100\146\105\143\106\131" +
    "\114\150\121\134\126\137\127\010\130\144\131\136\001" +
    "\002\000\042\025\142\051\132\052\145\053\135\054\133" +
    "\056\140\065\116\100\146\105\143\106\131\114\150\121" +
    "\134\126\137\127\010\130\144\131\136\001\002\000\042" +
    "\025\142\051\132\052\145\053\135\054\133\056\140\065" +
    "\116\100\146\105\143\106\131\114\150\121\134\126\137" +
    "\127\010\130\144\131\136\001\002\000\042\025\142\051" +
    "\132\052\145\053\135\054\133\056\140\065\116\100\146" +
    "\105\143\106\131\114\150\121\134\126\137\127\010\130" +
    "\144\131\136\001\002\000\042\025\142\051\132\052\145" +
    "\053\135\054\133\056\140\065\116\100\146\105\143\106" +
    "\131\114\150\121\134\126\137\127\010\130\144\131\136" +
    "\001\002\000\042\025\142\051\132\052\145\053\135\054" +
    "\133\056\140\065\116\100\146\105\143\106\131\114\150" +
    "\121\134\126\137\127\010\130\144\131\136\001\002\000" +
    "\004\060\204\001\002\000\042\025\142\051\132\052\145" +
    "\053\135\054\133\056\140\065\116\100\146\105\143\106" +
    "\131\114\150\121\134\126\137\127\010\130\144\131\136" +
    "\001\002\000\042\025\142\051\132\052\145\053\135\054" +
    "\133\056\140\065\116\100\146\105\143\106\131\114\150" +
    "\121\134\126\137\127\010\130\144\131\136\001\002\000" +
    "\064\043\160\044\162\045\174\046\163\047\167\050\164" +
    "\075\uff89\077\161\100\176\101\uff89\102\uff89\103\uff89\104" +
    "\uff89\107\173\110\200\111\175\112\171\115\uff89\116\uff89" +
    "\117\uff89\120\uff89\122\uff89\123\uff89\124\uff89\125\uff89\001" +
    "\002\000\064\043\uff85\044\uff85\045\uff85\046\uff85\047\167" +
    "\050\164\075\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103" +
    "\uff85\104\uff85\107\uff85\110\uff85\111\uff85\112\uff85\115\uff85" +
    "\116\uff85\117\uff85\120\uff85\122\uff85\123\uff85\124\uff85\125" +
    "\uff85\001\002\000\064\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\uff7e\050\uff7e\075\uff7e\077\uff7e\100\uff7e\101\uff7e\102" +
    "\uff7e\103\uff7e\104\uff7e\107\uff7e\110\uff7e\111\uff7e\112\uff7e" +
    "\115\uff7e\116\uff7e\117\uff7e\120\uff7e\122\uff7e\123\uff7e\124" +
    "\uff7e\125\uff7e\001\002\000\064\043\160\044\162\045\174" +
    "\046\163\047\167\050\164\075\uff8b\077\uff8b\100\uff8b\101" +
    "\uff8b\102\uff8b\103\uff8b\104\uff8b\107\173\110\200\111\175" +
    "\112\171\115\uff8b\116\uff8b\117\uff8b\120\uff8b\122\uff8b\123" +
    "\uff8b\124\uff8b\125\uff8b\001\002\000\064\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\167\050\164\075\uff83\077\uff83\100" +
    "\uff83\101\uff83\102\uff83\103\uff83\104\uff83\107\uff83\110\uff83" +
    "\111\uff83\112\uff83\115\uff83\116\uff83\117\uff83\120\uff83\122" +
    "\uff83\123\uff83\124\uff83\125\uff83\001\002\000\064\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\167\050\164\075\uff90\077" +
    "\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90\107\173" +
    "\110\200\111\175\112\171\115\uff90\116\uff90\117\uff90\120" +
    "\uff90\122\uff90\123\uff90\124\uff90\125\uff90\001\002\000\064" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\167\050\164\075" +
    "\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86" +
    "\107\uff86\110\uff86\111\uff86\112\uff86\115\uff86\116\uff86\117" +
    "\uff86\120\uff86\122\uff86\123\uff86\124\uff86\125\uff86\001\002" +
    "\000\064\043\160\044\162\045\174\046\163\047\167\050" +
    "\164\075\uff88\077\161\100\176\101\uff88\102\uff88\103\uff88" +
    "\104\uff88\107\173\110\200\111\175\112\171\115\uff88\116" +
    "\uff88\117\uff88\120\uff88\122\uff88\123\uff88\124\uff88\125\uff88" +
    "\001\002\000\064\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\167\050\164\075\uff84\077\uff84\100\uff84\101\uff84\102\uff84" +
    "\103\uff84\104\uff84\107\uff84\110\uff84\111\uff84\112\uff84\115" +
    "\uff84\116\uff84\117\uff84\120\uff84\122\uff84\123\uff84\124\uff84" +
    "\125\uff84\001\002\000\064\043\160\044\162\045\174\046" +
    "\163\047\167\050\164\075\uff8a\077\161\100\176\101\uff8a" +
    "\102\uff8a\103\uff8a\104\uff8a\107\173\110\200\111\175\112" +
    "\171\115\uff8a\116\uff8a\117\uff8a\120\uff8a\122\uff8a\123\uff8a" +
    "\124\uff8a\125\uff8a\001\002\000\064\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\050\uff8e\075\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\104\uff8e\107\uff8e\110\uff8e\111" +
    "\uff8e\112\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e\122\uff8e" +
    "\123\uff8e\124\uff8e\125\uff8e\001\002\000\052\043\160\044" +
    "\162\045\174\046\163\047\167\050\164\077\161\100\176" +
    "\101\170\102\172\103\201\104\157\107\173\110\200\111" +
    "\175\112\171\115\165\117\166\120\216\123\177\001\002" +
    "\000\064\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050" +
    "\uff82\075\uff82\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82" +
    "\104\uff82\107\uff82\110\uff82\111\uff82\112\uff82\115\uff82\116" +
    "\uff82\117\uff82\120\uff82\122\uff82\123\uff82\124\uff82\125\uff82" +
    "\001\002\000\052\043\160\044\162\045\174\046\163\047" +
    "\167\050\164\077\161\100\176\101\170\102\172\103\201" +
    "\104\157\107\173\110\200\111\175\112\171\115\165\116" +
    "\220\117\166\123\177\001\002\000\064\043\uff81\044\uff81" +
    "\045\uff81\046\uff81\047\uff81\050\uff81\075\uff81\077\uff81\100" +
    "\uff81\101\uff81\102\uff81\103\uff81\104\uff81\107\uff81\110\uff81" +
    "\111\uff81\112\uff81\115\uff81\116\uff81\117\uff81\120\uff81\122" +
    "\uff81\123\uff81\124\uff81\125\uff81\001\002\000\064\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\075\uff8d\077" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\107\uff8d" +
    "\110\uff8d\111\uff8d\112\uff8d\115\uff8d\116\uff8d\117\uff8d\120" +
    "\uff8d\122\uff8d\123\uff8d\124\uff8d\125\uff8d\001\002\000\064" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\167\050\164\075" +
    "\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f" +
    "\107\173\110\200\111\175\112\171\115\uff8f\116\uff8f\117" +
    "\uff8f\120\uff8f\122\uff8f\123\uff8f\124\uff8f\125\uff8f\001\002" +
    "\000\064\043\uff91\044\uff91\045\uff91\046\uff91\047\167\050" +
    "\164\075\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91" +
    "\104\uff91\107\173\110\200\111\175\112\171\115\uff91\116" +
    "\uff91\117\uff91\120\uff91\122\uff91\123\uff91\124\uff91\125\uff91" +
    "\001\002\000\064\043\160\044\162\045\174\046\163\047" +
    "\167\050\164\075\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c" +
    "\103\uff8c\104\uff8c\107\173\110\200\111\175\112\171\115" +
    "\uff8c\116\uff8c\117\uff8c\120\uff8c\122\uff8c\123\uff8c\124\uff8c" +
    "\125\uff8c\001\002\000\064\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\047\167\050\164\075\uff92\077\uff92\100\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\107\173\110\200\111\175\112" +
    "\171\115\uff92\116\uff92\117\uff92\120\uff92\122\uff92\123\uff92" +
    "\124\uff92\125\uff92\001\002\000\064\043\160\044\162\045" +
    "\174\046\163\047\167\050\164\075\uff87\077\161\100\176" +
    "\101\uff87\102\uff87\103\uff87\104\uff87\107\173\110\200\111" +
    "\175\112\171\115\uff87\116\uff87\117\uff87\120\uff87\122\uff87" +
    "\123\uff87\124\uff87\125\uff87\001\002\000\064\043\160\044" +
    "\162\045\174\046\163\047\167\050\164\075\uff69\077\uff69" +
    "\100\uff69\101\uff69\102\uff69\103\uff69\104\uff69\107\173\110" +
    "\200\111\175\112\171\115\uff69\116\uff69\117\uff69\120\uff69" +
    "\122\uff69\123\uff69\124\uff69\125\uff69\001\002\000\064\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\075\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\107" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\115\uffbc\116\uffbc\117\uffbc" +
    "\120\uffbc\122\uffbc\123\233\124\uffbc\125\uffbc\001\002\000" +
    "\064\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\075\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104" +
    "\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\115\uffbc\116\uffbc" +
    "\117\uffbc\120\uffbc\122\uffbc\123\233\124\uffbc\125\uffbc\001" +
    "\002\000\064\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\075\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103" +
    "\uff76\104\uff76\107\uff76\110\uff76\111\uff76\112\uff76\115\uff76" +
    "\116\uff76\117\uff76\120\uff76\122\uff76\123\uff76\124\uff76\125" +
    "\uff76\001\002\000\004\127\010\001\002\000\076\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\066\uffbc\067" +
    "\uffbc\075\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc\122\uffbc\123\233" +
    "\124\uffbc\125\uffbc\127\uffbc\001\002\000\076\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\066\uffbd\067\uffbd" +
    "\075\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd" +
    "\115\uffbd\116\uffbd\117\uffbd\120\uffbd\122\uffbd\123\uffbd\124" +
    "\uffbd\125\uffbd\127\uffbd\001\002\000\064\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\075\uff77\077\uff77\100" +
    "\uff77\101\uff77\102\uff77\103\uff77\104\uff77\107\uff77\110\uff77" +
    "\111\uff77\112\uff77\115\uff77\116\uff77\117\uff77\120\uff77\122" +
    "\uff77\123\uff77\124\uff77\125\uff77\001\002\000\024\021\042" +
    "\022\023\023\032\024\030\025\035\026\031\027\043\030" +
    "\036\127\010\001\002\000\006\075\241\115\047\001\002" +
    "\000\024\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\127\010\001\002\000\006\115\047" +
    "\120\243\001\002\000\064\043\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\050\uff67\075\uff67\077\uff67\100\uff67\101\uff67" +
    "\102\uff67\103\uff67\104\uff67\107\uff67\110\uff67\111\uff67\112" +
    "\uff67\115\uff67\116\uff67\117\uff67\120\uff67\122\uff67\123\uff67" +
    "\124\uff67\125\uff67\001\002\000\010\115\uffbc\121\253\123" +
    "\233\001\002\000\004\115\246\001\002\000\044\025\142" +
    "\051\132\052\145\053\135\054\133\056\140\065\116\100" +
    "\146\105\143\106\131\114\150\116\247\121\134\126\137" +
    "\127\010\130\144\131\136\001\002\000\006\115\uffd0\121" +
    "\253\001\002\000\052\043\160\044\162\045\174\046\163" +
    "\047\167\050\164\077\161\100\176\101\170\102\172\103" +
    "\201\104\157\107\173\110\200\111\175\112\171\115\165" +
    "\116\251\117\166\123\177\001\002\000\064\043\uff68\044" +
    "\uff68\045\uff68\046\uff68\047\uff68\050\uff68\075\uff68\077\uff68" +
    "\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\107\uff68\110" +
    "\uff68\111\uff68\112\uff68\115\uff68\116\uff68\117\uff68\120\uff68" +
    "\122\uff68\123\uff68\124\uff68\125\uff68\001\002\000\064\043" +
    "\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\075\uff65" +
    "\077\uff65\100\uff65\101\uff65\102\uff65\103\uff65\104\uff65\107" +
    "\uff65\110\uff65\111\uff65\112\uff65\115\uff65\116\uff65\117\uff65" +
    "\120\uff65\122\uff65\123\uff65\124\uff65\125\uff65\001\002\000" +
    "\044\025\142\051\132\052\145\053\135\054\133\056\140" +
    "\065\116\100\146\105\143\106\131\114\150\121\134\122" +
    "\254\126\137\127\010\130\144\131\136\001\002\000\066" +
    "\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\075" +
    "\uff63\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63" +
    "\104\uff63\107\uff63\110\uff63\111\uff63\112\uff63\115\uff63\116" +
    "\uff63\117\uff63\120\uff63\122\uff63\123\uff63\124\uff63\125\uff63" +
    "\001\002\000\054\043\160\044\162\045\174\046\163\047" +
    "\167\050\164\075\256\077\161\100\176\101\170\102\172" +
    "\103\201\104\157\107\173\110\200\111\175\112\171\115" +
    "\165\117\166\122\uff61\123\177\001\002\000\042\025\142" +
    "\051\132\052\145\053\135\054\133\056\140\065\116\100" +
    "\146\105\143\106\131\114\150\121\134\126\137\127\010" +
    "\130\144\131\136\001\002\000\004\122\260\001\002\000" +
    "\066\043\uff64\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64" +
    "\075\uff64\076\uff64\077\uff64\100\uff64\101\uff64\102\uff64\103" +
    "\uff64\104\uff64\107\uff64\110\uff64\111\uff64\112\uff64\115\uff64" +
    "\116\uff64\117\uff64\120\uff64\122\uff64\123\uff64\124\uff64\125" +
    "\uff64\001\002\000\054\043\160\044\162\045\174\046\163" +
    "\047\167\050\164\075\256\077\161\100\176\101\170\102" +
    "\172\103\201\104\157\107\173\110\200\111\175\112\171" +
    "\115\165\117\166\122\uff61\123\177\001\002\000\004\122" +
    "\uff62\001\002\000\066\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\075\uffca\077\uffca\100\uffca\101\uffca\102" +
    "\uffca\103\uffca\104\uffca\107\uffca\110\uffca\111\uffca\112\uffca" +
    "\115\uffca\116\uffca\117\uffca\120\uffca\122\uffca\123\uffca\124" +
    "\uffca\125\uffca\127\uffca\001\002\000\064\043\uff6b\044\uff6b" +
    "\045\uff6b\046\uff6b\047\uff6b\050\uff6b\075\uff6b\077\uff6b\100" +
    "\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b\107\uff6b\110\uff6b" +
    "\111\uff6b\112\uff6b\115\uff6b\116\uff6b\117\uff6b\120\uff6b\122" +
    "\uff6b\123\uff6b\124\uff6b\125\uff6b\001\002\000\006\105\267" +
    "\106\266\001\002\000\064\043\uff74\044\uff74\045\uff74\046" +
    "\uff74\047\uff74\050\uff74\075\uff74\077\uff74\100\uff74\101\uff74" +
    "\102\uff74\103\uff74\104\uff74\107\uff74\110\uff74\111\uff74\112" +
    "\uff74\115\uff74\116\uff74\117\uff74\120\uff74\122\uff74\123\uff74" +
    "\124\uff74\125\uff74\001\002\000\064\043\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\050\uff78\075\uff78\077\uff78\100\uff78" +
    "\101\uff78\102\uff78\103\uff78\104\uff78\107\uff78\110\uff78\111" +
    "\uff78\112\uff78\115\uff78\116\uff78\117\uff78\120\uff78\122\uff78" +
    "\123\uff78\124\uff78\125\uff78\001\002\000\054\043\160\044" +
    "\162\045\174\046\163\047\167\050\164\075\256\077\161" +
    "\100\176\101\170\102\172\103\201\104\157\107\173\110" +
    "\200\111\175\112\171\115\165\117\166\122\271\123\177" +
    "\001\002\000\064\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
    "\uff7d\050\uff7d\075\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d" +
    "\103\uff7d\104\uff7d\107\uff7d\110\uff7d\111\uff7d\112\uff7d\115" +
    "\uff7d\116\uff7d\117\uff7d\120\uff7d\122\uff7d\123\uff7d\124\uff7d" +
    "\125\uff7d\001\002\000\064\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\075\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\103\uffbc\104\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc\122\uffbc\123\233" +
    "\124\uffbc\125\uffbc\001\002\000\064\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\075\uffbc\077\uffbc\100\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\107\uffbc\110\uffbc\111" +
    "\uffbc\112\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc\122\uffbc" +
    "\123\233\124\uffbc\125\uffbc\001\002\000\064\043\uff72\044" +
    "\uff72\045\uff72\046\uff72\047\uff72\050\uff72\075\uff72\077\uff72" +
    "\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72\107\uff72\110" +
    "\uff72\111\uff72\112\uff72\115\uff72\116\uff72\117\uff72\120\uff72" +
    "\122\uff72\123\uff72\124\uff72\125\uff72\001\002\000\064\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\075\uff73" +
    "\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73\107" +
    "\uff73\110\uff73\111\uff73\112\uff73\115\uff73\116\uff73\117\uff73" +
    "\120\uff73\122\uff73\123\uff73\124\uff73\125\uff73\001\002\000" +
    "\072\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80" +
    "\067\277\075\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103" +
    "\uff80\104\uff80\105\301\106\300\107\uff80\110\uff80\111\uff80" +
    "\112\uff80\115\uff80\116\uff80\117\uff80\120\uff80\122\uff80\123" +
    "\uff80\124\uff80\125\uff80\001\002\000\024\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\127" +
    "\010\001\002\000\064\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\047\uff75\050\uff75\075\uff75\077\uff75\100\uff75\101\uff75\102" +
    "\uff75\103\uff75\104\uff75\107\uff75\110\uff75\111\uff75\112\uff75" +
    "\115\uff75\116\uff75\117\uff75\120\uff75\122\uff75\123\uff75\124" +
    "\uff75\125\uff75\001\002\000\064\043\uff79\044\uff79\045\uff79" +
    "\046\uff79\047\uff79\050\uff79\075\uff79\077\uff79\100\uff79\101" +
    "\uff79\102\uff79\103\uff79\104\uff79\107\uff79\110\uff79\111\uff79" +
    "\112\uff79\115\uff79\116\uff79\117\uff79\120\uff79\122\uff79\123" +
    "\uff79\124\uff79\125\uff79\001\002\000\064\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\075\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\107\uffc0\110\uffc0" +
    "\111\uffc0\112\uffc0\115\047\116\uffc0\117\uffc0\120\uffc0\122" +
    "\uffc0\123\uffc0\124\uffc0\125\uffc0\001\002\000\004\005\304" +
    "\001\002\000\004\036\305\001\002\000\042\025\142\051" +
    "\132\052\145\053\135\054\133\056\140\065\116\100\146" +
    "\105\143\106\131\114\150\121\134\126\137\127\010\130" +
    "\144\131\136\001\002\000\052\043\160\044\162\045\174" +
    "\046\163\047\167\050\164\077\161\100\176\101\170\102" +
    "\172\103\201\104\157\107\173\110\200\111\175\112\171" +
    "\115\165\117\166\123\177\124\307\001\002\000\112\005" +
    "\uffb2\016\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\053\uffb2\055\uffb2\057\uffb2\061\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\105\uffb2" +
    "\106\uffb2\120\uffb2\127\uffb2\001\002\000\042\025\142\051" +
    "\132\052\145\053\135\054\133\056\140\065\116\100\146" +
    "\105\143\106\131\114\150\121\134\126\137\127\010\130" +
    "\144\131\136\001\002\000\052\043\160\044\162\045\174" +
    "\046\163\047\167\050\164\077\161\100\176\101\170\102" +
    "\172\103\201\104\157\107\173\110\200\111\175\112\171" +
    "\115\165\117\166\122\312\123\177\001\002\000\006\122" +
    "\uffae\124\uffae\001\002\000\006\066\uffbc\123\233\001\002" +
    "\000\006\066\uffbc\123\233\001\002\000\004\066\316\001" +
    "\002\000\004\121\253\001\002\000\064\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\075\uffbe\077\uffbe\100" +
    "\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\107\uffbe\110\uffbe" +
    "\111\uffbe\112\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\122" +
    "\uffbe\123\uffbe\124\uffbe\125\uffbe\001\002\000\004\066\321" +
    "\001\002\000\004\121\253\001\002\000\064\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\075\uffbf\077\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\107\uffbf\110" +
    "\uffbf\111\uffbf\112\uffbf\115\uffbf\116\uffbf\117\uffbf\120\uffbf" +
    "\122\uffbf\123\uffbf\124\uffbf\125\uffbf\001\002\000\112\005" +
    "\uffba\016\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\053\uffba\055\uffba\057\uffba\061\uffba\063\uffba\064\uffba\065" +
    "\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\105\uffba" +
    "\106\uffba\120\uffba\127\uffba\001\002\000\046\002\uffe0\005" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\127\uffe0\001\002\000\052\043\160" +
    "\044\162\045\174\046\163\047\167\050\164\077\161\100" +
    "\176\101\170\102\172\103\201\104\157\107\173\110\200" +
    "\111\175\112\171\115\165\117\166\123\177\125\326\001" +
    "\002\000\100\005\ufff9\016\104\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\031\100\033" +
    "\075\035\113\036\112\037\070\040\121\041\076\042\103" +
    "\053\101\055\072\057\077\061\120\063\107\064\066\065" +
    "\116\070\106\073\074\074\115\105\065\106\071\127\010" +
    "\001\002\000\004\005\330\001\002\000\112\005\uffb6\016" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\053\uffb6" +
    "\055\uffb6\057\uffb6\061\uffb6\063\uffb6\064\uffb6\065\uffb6\070" +
    "\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\105\uffb6\106\uffb6" +
    "\120\uffb6\127\uffb6\001\002\000\052\043\160\044\162\045" +
    "\174\046\163\047\167\050\164\077\161\100\176\101\170" +
    "\102\172\103\201\104\157\107\173\110\200\111\175\112" +
    "\171\115\165\117\166\123\177\125\332\001\002\000\100" +
    "\005\ufff9\016\104\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\031\100\033\075\035\113" +
    "\036\112\037\070\040\121\041\076\042\103\053\101\055" +
    "\072\057\077\061\120\063\107\064\066\065\116\070\106" +
    "\073\074\074\115\105\065\106\071\127\010\001\002\000" +
    "\004\005\334\001\002\000\112\005\uffb5\016\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\053\uffb5\055\uffb5\057" +
    "\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\071\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\105\uffb5\106\uffb5\120\uffb5\127" +
    "\uffb5\001\002\000\112\005\uffb1\016\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\053\uffb1\055\uffb1\057\uffb1\061" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\105\uffb1\106\uffb1\120\uffb1\127\uffb1\001" +
    "\002\000\104\005\ufff9\016\104\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\031\100\033" +
    "\075\035\113\036\112\037\070\040\121\041\076\042\103" +
    "\053\101\055\072\057\077\061\120\063\107\064\066\065" +
    "\116\070\106\071\ufff9\072\ufff9\073\074\074\115\105\065" +
    "\106\071\127\010\001\002\000\010\005\uff96\071\341\072" +
    "\uff96\001\002\000\006\005\351\072\350\001\002\000\004" +
    "\127\010\001\002\000\006\123\233\127\uffbc\001\002\000" +
    "\004\127\010\001\002\000\004\125\345\001\002\000\104" +
    "\005\ufff9\016\104\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\031\100\033\075\035\113" +
    "\036\112\037\070\040\121\041\076\042\103\053\101\055" +
    "\072\057\077\061\120\063\107\064\066\065\116\070\106" +
    "\071\ufff9\072\ufff9\073\074\074\115\105\065\106\071\127" +
    "\010\001\002\000\010\005\uff96\071\341\072\uff96\001\002" +
    "\000\006\005\uff97\072\uff97\001\002\000\004\125\352\001" +
    "\002\000\112\005\uff99\016\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\053\uff99\055\uff99\057\uff99\061\uff99\063" +
    "\uff99\064\uff99\065\uff99\070\uff99\071\uff99\072\uff99\073\uff99" +
    "\074\uff99\105\uff99\106\uff99\120\uff99\127\uff99\001\002\000" +
    "\100\005\ufff9\016\104\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\031\100\033\075\035" +
    "\113\036\112\037\070\040\121\041\076\042\103\053\101" +
    "\055\072\057\077\061\120\063\107\064\066\065\116\070" +
    "\106\073\074\074\115\105\065\106\071\127\010\001\002" +
    "\000\004\005\354\001\002\000\112\005\uff98\016\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\053\uff98\055\uff98" +
    "\057\uff98\061\uff98\063\uff98\064\uff98\065\uff98\070\uff98\071" +
    "\uff98\072\uff98\073\uff98\074\uff98\105\uff98\106\uff98\120\uff98" +
    "\127\uff98\001\002\000\004\122\356\001\002\000\006\122" +
    "\uff9b\124\uff9b\001\002\000\054\043\160\044\162\045\174" +
    "\046\163\047\167\050\164\077\161\100\176\101\170\102" +
    "\172\103\201\104\157\107\173\110\200\111\175\112\171" +
    "\115\165\117\166\122\uffa9\123\177\124\uffa9\001\002\000" +
    "\016\005\ufffa\032\ufffa\034\ufffa\071\ufffa\072\ufffa\120\ufffa" +
    "\001\002\000\006\105\363\106\362\001\002\000\006\122" +
    "\uff9f\124\uff9f\001\002\000\006\122\uffa3\124\uffa3\001\002" +
    "\000\052\043\160\044\162\045\174\046\163\047\167\050" +
    "\164\077\161\100\176\101\170\102\172\103\201\104\157" +
    "\107\173\110\200\111\175\112\171\115\165\117\166\123" +
    "\177\125\365\001\002\000\104\005\ufff9\016\104\021\042" +
    "\022\023\023\032\024\030\025\035\026\031\027\043\030" +
    "\036\031\100\032\ufff9\033\075\034\ufff9\035\113\036\112" +
    "\037\070\040\121\041\076\042\103\053\101\055\072\057" +
    "\077\061\120\063\107\064\066\065\116\070\106\073\074" +
    "\074\115\105\065\106\071\127\010\001\002\000\010\005" +
    "\uff94\032\uff94\034\uff94\001\002\000\010\005\373\032\371" +
    "\034\370\001\002\000\042\025\142\051\132\052\145\053" +
    "\135\054\133\056\140\065\116\100\146\105\143\106\131" +
    "\114\150\121\134\126\137\127\010\130\144\131\136\001" +
    "\002\000\004\125\375\001\002\000\004\005\374\001\002" +
    "\000\112\005\uffb7\016\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\053\uffb7\055\uffb7\057\uffb7\061\uffb7\063\uffb7" +
    "\064\uffb7\065\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074" +
    "\uffb7\105\uffb7\106\uffb7\120\uffb7\127\uffb7\001\002\000\112" +
    "\005\uffb8\016\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\053\uffb8\055\uffb8\057\uffb8\061\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\105" +
    "\uffb8\106\uffb8\120\uffb8\127\uffb8\001\002\000\100\005\ufff9" +
    "\016\104\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\031\100\033\075\035\113\036\112" +
    "\037\070\040\121\041\076\042\103\053\101\055\072\057" +
    "\077\061\120\063\107\064\066\065\116\070\106\073\074" +
    "\074\115\105\065\106\071\127\010\001\002\000\004\005" +
    "\uff93\001\002\000\052\043\160\044\162\045\174\046\163" +
    "\047\167\050\164\077\161\100\176\101\170\102\172\103" +
    "\201\104\157\107\173\110\200\111\175\112\171\115\165" +
    "\117\166\123\177\125\u0100\001\002\000\104\005\ufff9\016" +
    "\104\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\031\100\032\ufff9\033\075\034\ufff9\035" +
    "\113\036\112\037\070\040\121\041\076\042\103\053\101" +
    "\055\072\057\077\061\120\063\107\064\066\065\116\070" +
    "\106\073\074\074\115\105\065\106\071\127\010\001\002" +
    "\000\010\005\uff95\032\uff95\034\uff95\001\002\000\042\025" +
    "\142\051\132\052\145\053\135\054\133\056\140\065\116" +
    "\100\146\105\143\106\131\114\150\121\134\126\137\127" +
    "\010\130\144\131\136\001\002\000\052\043\160\044\162" +
    "\045\174\046\163\047\167\050\164\077\161\100\176\101" +
    "\170\102\172\103\201\104\157\107\173\110\200\111\175" +
    "\112\171\115\165\117\166\122\u0104\123\177\001\002\000" +
    "\006\122\uffa7\124\uffa7\001\002\000\052\043\160\044\162" +
    "\045\174\046\163\047\167\050\164\077\161\100\176\101" +
    "\170\102\172\103\201\104\157\107\173\110\200\111\175" +
    "\112\171\115\165\117\166\123\177\125\u0106\001\002\000" +
    "\100\005\ufff9\016\104\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\031\100\033\075\035" +
    "\113\036\112\037\070\040\121\041\076\042\103\053\101" +
    "\055\072\057\077\061\120\063\107\064\066\065\116\070" +
    "\106\073\074\074\115\105\065\106\071\127\010\001\002" +
    "\000\004\005\u0108\001\002\000\112\005\uffb4\016\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\053\uffb4\055\uffb4" +
    "\057\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\073\uffb4\074\uffb4\105\uffb4\106\uffb4\120\uffb4" +
    "\127\uffb4\001\002\000\004\005\u010a\001\002\000\112\005" +
    "\uffb9\016\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\053\uffb9\055\uffb9\057\uffb9\061\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\105\uffb9" +
    "\106\uffb9\120\uffb9\127\uffb9\001\002\000\054\043\160\044" +
    "\162\045\174\046\163\047\167\050\164\077\161\100\176" +
    "\101\170\102\172\103\201\104\157\107\173\110\200\111" +
    "\175\112\171\115\165\117\166\122\uff9a\123\177\124\uff9a" +
    "\001\002\000\042\025\142\051\132\052\145\053\135\054" +
    "\133\056\140\065\116\100\146\105\143\106\131\114\150" +
    "\121\134\126\137\127\010\130\144\131\136\001\002\000" +
    "\012\105\u0116\106\u0115\115\uffca\127\uffca\001\002\000\042" +
    "\025\142\051\132\052\145\053\135\054\133\056\140\065" +
    "\116\100\146\105\143\106\131\114\150\121\134\126\137" +
    "\127\010\130\144\131\136\001\002\000\042\025\142\051" +
    "\132\052\145\053\135\054\133\056\140\065\116\100\146" +
    "\105\143\106\131\114\150\121\134\126\137\127\010\130" +
    "\144\131\136\001\002\000\052\043\160\044\162\045\174" +
    "\046\163\047\167\050\164\077\161\100\176\101\170\102" +
    "\172\103\201\104\157\107\173\110\200\111\175\112\171" +
    "\115\165\116\u0111\117\166\123\177\001\002\000\004\113" +
    "\u0112\001\002\000\042\025\142\051\132\052\145\053\135" +
    "\054\133\056\140\065\116\100\146\105\143\106\131\114" +
    "\150\121\134\126\137\127\010\130\144\131\136\001\002" +
    "\000\054\043\160\044\162\045\174\046\163\047\167\050" +
    "\164\077\161\100\176\101\170\102\172\103\201\104\157" +
    "\107\173\110\200\111\175\112\171\115\165\117\166\122" +
    "\uffaa\123\177\124\uffaa\001\002\000\054\043\160\044\162" +
    "\045\174\046\163\047\167\050\164\077\161\100\176\101" +
    "\170\102\172\103\201\104\157\107\173\110\200\111\175" +
    "\112\171\115\165\117\166\122\uffac\123\177\124\uffac\001" +
    "\002\000\006\122\uffa0\124\uffa0\001\002\000\006\122\uffa4" +
    "\124\uffa4\001\002\000\052\043\160\044\162\045\174\046" +
    "\163\047\167\050\164\077\161\100\176\101\170\102\172" +
    "\103\201\104\157\107\173\110\200\111\175\112\171\115" +
    "\165\117\166\120\u0118\123\177\001\002\000\004\113\u0119" +
    "\001\002\000\042\025\142\051\132\052\145\053\135\054" +
    "\133\056\140\065\116\100\146\105\143\106\131\114\150" +
    "\121\134\126\137\127\010\130\144\131\136\001\002\000" +
    "\054\043\160\044\162\045\174\046\163\047\167\050\164" +
    "\077\161\100\176\101\170\102\172\103\201\104\157\107" +
    "\173\110\200\111\175\112\171\115\165\117\166\122\uffab" +
    "\123\177\124\uffab\001\002\000\042\025\142\051\132\052" +
    "\145\053\135\054\133\056\140\065\116\100\146\105\143" +
    "\106\131\114\150\121\134\126\137\127\010\130\144\131" +
    "\136\001\002\000\052\043\160\044\162\045\174\046\163" +
    "\047\167\050\164\077\161\100\176\101\170\102\172\103" +
    "\201\104\157\107\173\110\200\111\175\112\171\115\165" +
    "\117\166\122\u011d\123\177\001\002\000\006\122\uffa8\124" +
    "\uffa8\001\002\000\010\122\uffbc\123\233\124\uffbc\001\002" +
    "\000\010\122\uffbc\123\233\124\uffbc\001\002\000\006\122" +
    "\uff9d\124\uff9d\001\002\000\006\122\uff9e\124\uff9e\001\002" +
    "\000\054\016\104\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\042\103\053\101\055\072" +
    "\057\077\061\120\063\107\064\066\065\116\073\074\105" +
    "\065\106\071\127\010\001\002\000\004\124\u0126\001\002" +
    "\000\006\115\047\127\010\001\002\000\004\113\125\001" +
    "\002\000\042\025\142\051\132\052\145\053\135\054\133" +
    "\056\140\065\116\100\146\105\143\106\131\114\150\121" +
    "\134\126\137\127\010\130\144\131\136\001\002\000\052" +
    "\043\160\044\162\045\174\046\163\047\167\050\164\077" +
    "\161\100\176\101\170\102\172\103\201\104\157\107\173" +
    "\110\200\111\175\112\171\115\165\117\166\123\177\124" +
    "\u0128\001\002\000\054\016\104\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\042\103\053" +
    "\101\055\072\057\077\061\120\063\107\064\066\065\116" +
    "\073\074\105\065\106\071\127\010\001\002\000\004\122" +
    "\u012a\001\002\000\004\125\u012b\001\002\000\100\005\ufff9" +
    "\016\104\021\042\022\023\023\032\024\030\025\035\026" +
    "\031\027\043\030\036\031\100\033\075\035\113\036\112" +
    "\037\070\040\121\041\076\042\103\053\101\055\072\057" +
    "\077\061\120\063\107\064\066\065\116\070\106\073\074" +
    "\074\115\105\065\106\071\127\010\001\002\000\004\005" +
    "\u012d\001\002\000\112\005\uffb3\016\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\053\uffb3\055\uffb3\057\uffb3\061" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\105\uffb3\106\uffb3\120\uffb3\127\uffb3\001" +
    "\002\000\010\122\uffbc\123\233\124\uffbc\001\002\000\010" +
    "\122\uffbc\123\233\124\uffbc\001\002\000\006\122\uffa1\124" +
    "\uffa1\001\002\000\006\122\uffa2\124\uffa2\001\002\000\066" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\075" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\107\uffc7\110\uffc7\111\uffc7\112\uffc7\115\uffc7\116\uffc7\117" +
    "\uffc7\120\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7\127\uffc7" +
    "\001\002\000\066\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\075\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3" +
    "\103\uffc3\104\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\115" +
    "\uffc3\116\uffc3\117\uffc3\120\uffc3\122\uffc3\123\uffc3\124\uffc3" +
    "\125\uffc3\127\uffc3\001\002\000\066\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\075\uffbc\077\uffbc\100\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\107\uffbc\110\uffbc\111" +
    "\uffbc\112\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc\122\uffbc" +
    "\123\233\124\uffbc\125\uffbc\127\uffbc\001\002\000\004\117" +
    "\u0139\001\002\000\066\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\075\uffc4\077\uffc4\100\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\104\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\115\uffc4\116\uffc4\117\uffc4\120\uffc4\122\uffc4\123\uffc4\124" +
    "\uffc4\125\uffc4\127\uffc4\001\002\000\066\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\075\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\107\uffc5\110\uffc5" +
    "\111\uffc5\112\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\122" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\127\uffc5\001\002\000\066" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\075" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\107\uffc6\110\uffc6\111\uffc6\112\uffc6\115\uffc6\116\uffc6\117" +
    "\uffc6\120\uffc6\122\uffc6\123\uffc6\124\uffc6\125\uffc6\127\uffc6" +
    "\001\002\000\024\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\127\010\001\002\000\006" +
    "\115\047\120\u013b\001\002\000\066\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\075\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\102\uffc1\103\uffc1\104\uffc1\107\uffc1\110\uffc1\111" +
    "\uffc1\112\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1\122\uffc1" +
    "\123\uffc1\124\uffc1\125\uffc1\127\uffc1\001\002\000\066\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\075\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\107" +
    "\uffc2\110\uffc2\111\uffc2\112\uffc2\115\uffc2\116\uffc2\117\uffc2" +
    "\120\uffc2\122\uffc2\123\uffc2\124\uffc2\125\uffc2\127\uffc2\001" +
    "\002\000\024\021\042\022\023\023\032\024\030\025\035" +
    "\026\031\027\043\030\036\127\010\001\002\000\006\075" +
    "\u013f\115\047\001\002\000\024\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\127\010\001" +
    "\002\000\006\115\047\120\u0141\001\002\000\066\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\075\uffcb\077" +
    "\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\107\uffcb" +
    "\110\uffcb\111\uffcb\112\uffcb\115\uffcb\116\uffcb\117\uffcb\120" +
    "\uffcb\122\uffcb\123\uffcb\124\uffcb\125\uffcb\127\uffcb\001\002" +
    "\000\004\125\u0143\001\002\000\100\005\ufff9\016\104\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\031\100\033\075\035\113\036\112\037\070\040" +
    "\121\041\076\042\103\053\101\055\072\057\077\061\120" +
    "\063\107\064\066\065\116\070\106\073\074\074\115\105" +
    "\065\106\071\127\010\001\002\000\004\005\u0145\001\002" +
    "\000\046\002\uffe3\005\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\127\uffe3\001" +
    "\002\000\024\021\042\022\023\023\032\024\030\025\035" +
    "\026\031\027\043\030\036\127\010\001\002\000\004\013" +
    "\u0158\001\002\000\006\115\047\127\010\001\002\000\004" +
    "\127\010\001\002\000\006\014\u014b\125\u014c\001\002\000" +
    "\004\127\010\001\002\000\044\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\127\ufff4\001\002\000\044\005\u014e\010\027\011\024\012" +
    "\033\013\021\015\034\017\026\020\044\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\127" +
    "\010\001\002\000\046\002\uffec\005\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\127\uffec\001\002\000\004\125\u0150\001\002\000\044\005" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002\000\044\005\u0152" +
    "\010\027\011\024\012\033\013\021\015\034\017\026\020" +
    "\044\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\127\010\001\002\000\046\002\uffed\005" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\127\uffed\001\002\000\006\113\u0155" +
    "\124\u0154\001\002\000\046\002\uffdc\005\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\127\uffdc\001\002\000\026\025\142\051\132\052\145" +
    "\054\133\056\140\100\146\121\253\126\137\130\144\131" +
    "\136\001\002\000\004\124\u0157\001\002\000\046\002\uffd8" +
    "\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\127\uffd8\001\002\000\004\127" +
    "\010\001\002\000\006\014\u015a\125\u015b\001\002\000\004" +
    "\127\010\001\002\000\044\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\127" +
    "\ufff4\001\002\000\044\005\u015d\010\027\011\024\012\033" +
    "\013\021\015\034\017\026\020\044\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\127\010" +
    "\001\002\000\046\002\uffe4\005\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\127" +
    "\uffe4\001\002\000\004\125\u015f\001\002\000\044\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\127\ufff4\001\002\000\044\005\u0161\010" +
    "\027\011\024\012\033\013\021\015\034\017\026\020\044" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\127\010\001\002\000\046\002\uffe5\005\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\127\uffe5\001\002\000\006\115\047\127" +
    "\010\001\002\000\004\121\052\001\002\000\004\125\u0165" +
    "\001\002\000\100\005\ufff9\016\104\021\042\022\023\023" +
    "\032\024\030\025\035\026\031\027\043\030\036\031\100" +
    "\033\075\035\113\036\112\037\070\040\121\041\076\042" +
    "\103\053\101\055\072\057\077\061\120\063\107\064\066" +
    "\065\116\070\106\073\074\074\115\105\065\106\071\127" +
    "\010\001\002\000\004\005\u0167\001\002\000\046\002\uffdf" +
    "\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\127\uffdf\001\002\000\024\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\127\010\001\002\000\004\013\u017a\001\002\000" +
    "\006\115\047\127\010\001\002\000\004\127\010\001\002" +
    "\000\006\014\u016d\125\u016e\001\002\000\004\127\010\001" +
    "\002\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002" +
    "\000\044\005\u0170\010\027\011\024\012\033\013\021\015" +
    "\034\017\026\020\044\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\127\010\001\002\000" +
    "\046\002\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\127\ufff3\001\002" +
    "\000\004\125\u0172\001\002\000\044\005\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\127\ufff4\001\002\000\044\005\u0174\010\027\011\024" +
    "\012\033\013\021\015\034\017\026\020\044\021\042\022" +
    "\023\023\032\024\030\025\035\026\031\027\043\030\036" +
    "\127\010\001\002\000\046\002\ufff2\005\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\127\ufff2\001\002\000\006\113\u0177\124\u0176\001\002" +
    "\000\046\002\uffdb\005\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\127\uffdb\001" +
    "\002\000\026\025\142\051\132\052\145\054\133\056\140" +
    "\100\146\121\253\126\137\130\144\131\136\001\002\000" +
    "\004\124\u0179\001\002\000\046\002\uffd7\005\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\127\uffd7\001\002\000\004\127\010\001\002\000" +
    "\006\014\u017c\125\u017d\001\002\000\004\127\010\001\002" +
    "\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002\000" +
    "\044\005\u017f\010\027\011\024\012\033\013\021\015\034" +
    "\017\026\020\044\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\127\010\001\002\000\046" +
    "\002\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\127\uffeb\001\002\000" +
    "\004\125\u0181\001\002\000\044\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\127\ufff4\001\002\000\044\005\u0183\010\027\011\024\012" +
    "\033\013\021\015\034\017\026\020\044\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\127" +
    "\010\001\002\000\046\002\uffea\005\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\127\uffea\001\002\000\006\115\047\127\010\001\002\000" +
    "\004\121\052\001\002\000\004\125\u0187\001\002\000\100" +
    "\005\ufff9\016\104\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\031\100\033\075\035\113" +
    "\036\112\037\070\040\121\041\076\042\103\053\101\055" +
    "\072\057\077\061\120\063\107\064\066\065\116\070\106" +
    "\073\074\074\115\105\065\106\071\127\010\001\002\000" +
    "\004\005\u0189\001\002\000\046\002\uffe2\005\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\127\uffe2\001\002\000\004\127\010\001\002\000" +
    "\006\014\u018c\125\u018d\001\002\000\004\127\010\001\002" +
    "\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002\000" +
    "\044\005\u018f\010\027\011\024\012\033\013\021\015\034" +
    "\017\026\020\044\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\127\010\001\002\000\046" +
    "\002\uffe6\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\127\uffe6\001\002\000" +
    "\004\125\u0191\001\002\000\044\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\127\ufff4\001\002\000\044\005\u0193\010\027\011\024\012" +
    "\033\013\021\015\034\017\026\020\044\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\127" +
    "\010\001\002\000\046\002\uffe7\005\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\127\uffe7\001\002\000\006\113\u0196\124\u0195\001\002\000" +
    "\046\002\uffde\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\127\uffde\001\002" +
    "\000\026\025\142\051\132\052\145\054\133\056\140\100" +
    "\146\121\253\126\137\130\144\131\136\001\002\000\004" +
    "\124\u0198\001\002\000\046\002\uffda\005\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\015\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\127\uffda\001\002\000\024\021\042\022\023\023\032" +
    "\024\030\025\035\026\031\027\043\030\036\127\010\001" +
    "\002\000\004\013\u01ab\001\002\000\006\115\047\127\010" +
    "\001\002\000\004\127\010\001\002\000\006\014\u019e\125" +
    "\u019f\001\002\000\004\127\010\001\002\000\044\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\127\ufff4\001\002\000\044\005\u01a1\010" +
    "\027\011\024\012\033\013\021\015\034\017\026\020\044" +
    "\021\042\022\023\023\032\024\030\025\035\026\031\027" +
    "\043\030\036\127\010\001\002\000\046\002\ufff0\005\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\127\ufff0\001\002\000\004\125\u01a3\001" +
    "\002\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002" +
    "\000\044\005\u01a5\010\027\011\024\012\033\013\021\015" +
    "\034\017\026\020\044\021\042\022\023\023\032\024\030" +
    "\025\035\026\031\027\043\030\036\127\010\001\002\000" +
    "\046\002\ufff1\005\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\127\ufff1\001\002" +
    "\000\006\113\u01a8\124\u01a7\001\002\000\046\002\uffdd\005" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\127\uffdd\001\002\000\026\025\142" +
    "\051\132\052\145\054\133\056\140\100\146\121\253\126" +
    "\137\130\144\131\136\001\002\000\004\124\u01aa\001\002" +
    "\000\046\002\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\127\uffd9\001" +
    "\002\000\004\127\010\001\002\000\006\014\u01ad\125\u01ae" +
    "\001\002\000\004\127\010\001\002\000\044\005\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\127\ufff4\001\002\000\044\005\u01b0\010\027" +
    "\011\024\012\033\013\021\015\034\017\026\020\044\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\127\010\001\002\000\046\002\uffe8\005\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\127\uffe8\001\002\000\004\125\u01b2\001\002" +
    "\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002\000" +
    "\044\005\u01b4\010\027\011\024\012\033\013\021\015\034" +
    "\017\026\020\044\021\042\022\023\023\032\024\030\025" +
    "\035\026\031\027\043\030\036\127\010\001\002\000\046" +
    "\002\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\127\uffe9\001\002\000" +
    "\006\115\047\127\010\001\002\000\004\121\052\001\002" +
    "\000\004\125\u01b8\001\002\000\100\005\ufff9\016\104\021" +
    "\042\022\023\023\032\024\030\025\035\026\031\027\043" +
    "\030\036\031\100\033\075\035\113\036\112\037\070\040" +
    "\121\041\076\042\103\053\101\055\072\057\077\061\120" +
    "\063\107\064\066\065\116\070\106\073\074\074\115\105" +
    "\065\106\071\127\010\001\002\000\004\005\u01ba\001\002" +
    "\000\046\002\uffe1\005\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\127\uffe1\001" +
    "\002\000\006\014\u01bc\125\u01bd\001\002\000\004\127\010" +
    "\001\002\000\044\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\127\ufff4\001" +
    "\002\000\044\005\u01bf\010\027\011\024\012\033\013\021" +
    "\015\034\017\026\020\044\021\042\022\023\023\032\024" +
    "\030\025\035\026\031\027\043\030\036\127\010\001\002" +
    "\000\046\002\uffee\005\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\127\uffee\001" +
    "\002\000\004\125\u01c1\001\002\000\044\005\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\127\ufff4\001\002\000\044\005\u01c3\010\027\011" +
    "\024\012\033\013\021\015\034\017\026\020\044\021\042" +
    "\022\023\023\032\024\030\025\035\026\031\027\043\030" +
    "\036\127\010\001\002\000\046\002\uffef\005\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\127\uffef\001\002\000\004\005\u01c5\001\002\000" +
    "\044\002\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002\000\044" +
    "\002\ufffc\010\027\011\024\012\033\013\021\015\034\017" +
    "\026\020\044\021\042\022\023\023\032\024\030\025\035" +
    "\026\031\027\043\030\036\127\010\001\002\000\006\123" +
    "\233\124\uffbc\001\002\000\004\124\u01c9\001\002\000\052" +
    "\002\ufffe\004\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\062\ufffe\127" +
    "\ufffe\001\002\000\100\005\ufff9\016\104\021\042\022\023" +
    "\023\032\024\030\025\035\026\031\027\043\030\036\031" +
    "\100\033\075\035\113\036\112\037\070\040\121\041\076" +
    "\042\103\053\101\055\072\057\077\061\120\063\107\064" +
    "\066\065\116\070\106\073\074\074\115\105\065\106\071" +
    "\127\010\001\002\000\004\005\u01cc\001\002\000\044\002" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\127\ufff4\001\002\000\044\002\ufffb" +
    "\010\027\011\024\012\033\013\021\015\034\017\026\020" +
    "\044\021\042\022\023\023\032\024\030\025\035\026\031" +
    "\027\043\030\036\127\010\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01cb\000\004\002\004\001\001\000\004\021\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u01c6\001\001\000\024\005\u01c3\011\104\014" +
    "\121\015\101\021\072\025\066\026\110\030\116\035\107" +
    "\001\001\000\016\007\040\010\017\012\037\014\024\021" +
    "\021\027\036\001\001\000\002\001\001\000\004\021\u01ba" +
    "\001\001\000\004\031\262\001\001\000\002\001\001\000" +
    "\006\014\u019a\021\021\001\001\000\004\021\u0193\001\001" +
    "\000\002\001\001\000\006\014\u0169\021\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\u0147\021\021\001\001\000\004\013\u0141\001\001\000" +
    "\002\001\001\000\004\021\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\044\021\021\001\001\000\004" +
    "\021\045\001\001\000\004\013\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\052" +
    "\021\021\022\054\001\001\000\004\021\062\001\001\000" +
    "\002\001\001\000\004\034\056\001\001\000\010\014\052" +
    "\021\021\022\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\113\011\104\014\121\015\101\021" +
    "\072\025\066\026\110\030\116\035\107\001\001\000\004" +
    "\021\u012d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u011d\001\001\000\002\001\001" +
    "\000\004\031\u010c\001\001\000\016\016\u010a\017\146\020" +
    "\150\021\127\030\126\032\125\001\001\000\024\005\u0108" +
    "\011\104\014\121\015\101\021\072\025\066\026\110\030" +
    "\116\035\107\001\001\000\016\016\u0104\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\002\001\001\000" +
    "\016\016\363\017\146\020\150\021\127\030\126\032\125" +
    "\001\001\000\004\031\360\001\001\000\024\005\357\011" +
    "\104\014\121\015\101\021\072\025\066\026\110\030\116" +
    "\035\107\001\001\000\016\016\356\017\146\020\150\021" +
    "\127\030\126\032\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\330\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\016\016\324\017" +
    "\146\020\150\021\127\030\126\032\125\001\001\000\002" +
    "\001\001\000\020\011\104\014\121\021\072\025\322\026" +
    "\110\030\116\035\107\001\001\000\004\021\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\302\011" +
    "\104\014\121\015\101\021\072\025\066\026\110\030\116" +
    "\035\107\001\001\000\004\021\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\140\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\275\001\001\000\004\021\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\016" +
    "\267\017\146\020\150\021\127\030\126\032\125\001\001" +
    "\000\004\031\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\244\021\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\226\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\002\001\001\000" +
    "\016\016\155\017\146\020\150\021\127\030\126\032\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\153\011\104\014\121\015\101\021\072\025\066\026\110" +
    "\030\116\035\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\225\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\016\016\224\017" +
    "\146\020\150\021\127\030\126\032\125\001\001\000\016" +
    "\016\223\017\146\020\150\021\127\030\126\032\125\001" +
    "\001\000\016\016\222\017\146\020\150\021\127\030\126" +
    "\032\125\001\001\000\016\016\221\017\146\020\150\021" +
    "\127\030\126\032\125\001\001\000\016\016\220\017\146" +
    "\020\150\021\127\030\126\032\125\001\001\000\016\016" +
    "\216\017\146\020\150\021\127\030\126\032\125\001\001" +
    "\000\016\016\214\017\146\020\150\021\127\030\126\032" +
    "\125\001\001\000\016\016\213\017\146\020\150\021\127" +
    "\030\126\032\125\001\001\000\016\016\212\017\146\020" +
    "\150\021\127\030\126\032\125\001\001\000\016\016\211" +
    "\017\146\020\150\021\127\030\126\032\125\001\001\000" +
    "\016\016\210\017\146\020\150\021\127\030\126\032\125" +
    "\001\001\000\016\016\207\017\146\020\150\021\127\030" +
    "\126\032\125\001\001\000\016\016\206\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\016\016\205\017" +
    "\146\020\150\021\127\030\126\032\125\001\001\000\016" +
    "\016\204\017\146\020\150\021\127\030\126\032\125\001" +
    "\001\000\002\001\001\000\016\016\202\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\016\016\201\017" +
    "\146\020\150\021\127\030\126\032\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\235\001" +
    "\001\000\004\031\231\001\001\000\002\001\001\000\004" +
    "\021\233\001\001\000\004\031\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\237\021\021\001\001" +
    "\000\002\001\001\000\006\014\241\021\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\263\031\262" +
    "\001\001\000\002\001\001\000\016\016\247\017\146\020" +
    "\150\021\127\030\126\032\125\001\001\000\004\020\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\254\017\146\020\150\021\127\030\126" +
    "\032\125\001\001\000\002\001\001\000\004\033\256\001" +
    "\001\000\016\016\260\017\146\020\150\021\127\030\126" +
    "\032\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\256\001\001\000\002\001\001" +
    "\000\004\031\274\001\001\000\004\031\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\301\021\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\305\017\146\020\150\021\127\030\126\032" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\310\017\146\020\150\021\127\030\126\032\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\317" +
    "\001\001\000\004\031\314\001\001\000\002\001\001\000" +
    "\004\020\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\326" +
    "\011\104\014\121\015\101\021\072\025\066\026\110\030" +
    "\116\035\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\332\011\104\014\121\015" +
    "\101\021\072\025\066\026\110\030\116\035\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\336\011\104\014\121\015\101\021\072\025\066" +
    "\026\110\030\116\035\107\001\001\000\004\036\337\001" +
    "\001\000\002\001\001\000\004\021\341\001\001\000\004" +
    "\031\342\001\001\000\004\021\343\001\001\000\002\001" +
    "\001\000\024\005\345\011\104\014\121\015\101\021\072" +
    "\025\066\026\110\030\116\035\107\001\001\000\004\036" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\352\011\104\014\121\015\101\021" +
    "\072\025\066\026\110\030\116\035\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\365\011\104\014\121\015\101\021\072\025\066" +
    "\026\110\030\116\035\107\001\001\000\004\023\366\001" +
    "\001\000\004\024\371\001\001\000\016\016\376\017\146" +
    "\020\150\021\127\030\126\032\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\375\011\104\014\121\015\101\021\072\025" +
    "\066\026\110\030\116\035\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\u0100\011\104\014\121\015" +
    "\101\021\072\025\066\026\110\030\116\035\107\001\001" +
    "\000\002\001\001\000\016\016\u0102\017\146\020\150\021" +
    "\127\030\126\032\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\u0106\011\104\014" +
    "\121\015\101\021\072\025\066\026\110\030\116\035\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\u0116" +
    "\017\146\020\150\021\127\030\126\032\125\001\001\000" +
    "\002\001\001\000\016\016\u0113\017\146\020\150\021\127" +
    "\030\126\032\125\001\001\000\016\016\u010f\017\146\020" +
    "\150\021\127\030\126\032\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\u0112\017\146\020\150\021" +
    "\127\030\126\032\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\u0119\017\146\020\150" +
    "\021\127\030\126\032\125\001\001\000\002\001\001\000" +
    "\016\016\u011b\017\146\020\150\021\127\030\126\032\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u0120\001\001\000\004\031\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\u0123\021\072\026\u0122\030" +
    "\116\001\001\000\002\001\001\000\004\021\u0124\001\001" +
    "\000\002\001\001\000\016\016\u0126\017\146\020\150\021" +
    "\127\030\126\032\125\001\001\000\002\001\001\000\012" +
    "\014\u0123\021\072\026\u0128\030\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\u012b\011\104\014\121" +
    "\015\101\021\072\025\066\026\110\030\116\035\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0130" +
    "\001\001\000\004\031\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u0139\021\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\u013d\021\021\001\001\000\002\001\001" +
    "\000\006\014\u013f\021\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\u0143\011\104" +
    "\014\121\015\101\021\072\025\066\026\110\030\116\035" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\u0161\021\021\001\001\000\002\001\001\000\004\021" +
    "\u0152\001\001\000\004\021\u0149\001\001\000\002\001\001" +
    "\000\004\021\u014e\001\001\000\004\006\u014c\001\001\000" +
    "\016\007\040\010\017\012\037\014\024\021\021\027\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0150\001\001\000\016\007\040\010\017\012\037\014\024" +
    "\021\021\027\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\u0155\020\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0158\001" +
    "\001\000\002\001\001\000\004\021\u015d\001\001\000\004" +
    "\006\u015b\001\001\000\016\007\040\010\017\012\037\014" +
    "\024\021\021\027\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u015f\001\001\000\016\007\040\010" +
    "\017\012\037\014\024\021\021\027\036\001\001\000\002" +
    "\001\001\000\004\021\u0162\001\001\000\004\013\u0163\001" +
    "\001\000\002\001\001\000\024\005\u0165\011\104\014\121" +
    "\015\101\021\072\025\066\026\110\030\116\035\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u0183" +
    "\021\021\001\001\000\002\001\001\000\004\021\u0174\001" +
    "\001\000\004\021\u016b\001\001\000\002\001\001\000\004" +
    "\021\u0170\001\001\000\004\006\u016e\001\001\000\016\007" +
    "\040\010\017\012\037\014\024\021\021\027\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0172\001" +
    "\001\000\016\007\040\010\017\012\037\014\024\021\021" +
    "\027\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\u0177\020\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u017a\001\001\000" +
    "\002\001\001\000\004\021\u017f\001\001\000\004\006\u017d" +
    "\001\001\000\016\007\040\010\017\012\037\014\024\021" +
    "\021\027\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0181\001\001\000\016\007\040\010\017\012" +
    "\037\014\024\021\021\027\036\001\001\000\002\001\001" +
    "\000\004\021\u0184\001\001\000\004\013\u0185\001\001\000" +
    "\002\001\001\000\024\005\u0187\011\104\014\121\015\101" +
    "\021\072\025\066\026\110\030\116\035\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u018a\001\001" +
    "\000\002\001\001\000\004\021\u018f\001\001\000\004\006" +
    "\u018d\001\001\000\016\007\040\010\017\012\037\014\024" +
    "\021\021\027\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0191\001\001\000\016\007\040\010\017" +
    "\012\037\014\024\021\021\027\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u0196" +
    "\020\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u01b4\021\021\001\001\000\002\001\001\000\004" +
    "\021\u01a5\001\001\000\004\021\u019c\001\001\000\002\001" +
    "\001\000\004\021\u01a1\001\001\000\004\006\u019f\001\001" +
    "\000\016\007\040\010\017\012\037\014\024\021\021\027" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u01a3\001\001\000\016\007\040\010\017\012\037\014" +
    "\024\021\021\027\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\u01a8\020\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u01ab" +
    "\001\001\000\002\001\001\000\004\021\u01b0\001\001\000" +
    "\004\006\u01ae\001\001\000\016\007\040\010\017\012\037" +
    "\014\024\021\021\027\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u01b2\001\001\000\016\007\040" +
    "\010\017\012\037\014\024\021\021\027\036\001\001\000" +
    "\002\001\001\000\004\021\u01b5\001\001\000\004\013\u01b6" +
    "\001\001\000\002\001\001\000\024\005\u01b8\011\104\014" +
    "\121\015\101\021\072\025\066\026\110\030\116\035\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u01bf\001\001\000\004\006\u01bd\001\001" +
    "\000\016\007\040\010\017\012\037\014\024\021\021\027" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u01c1\001\001\000\016\007\040\010\017\012\037\014" +
    "\024\021\021\027\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u01c5\001\001\000\016\007\040\010" +
    "\017\012\037\014\024\021\021\027\036\001\001\000\004" +
    "\031\u01c7\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\u01ca\011\104\014\121\015\101\021\072\025\066" +
    "\026\110\030\116\035\107\001\001\000\002\001\001\000" +
    "\004\006\u01cc\001\001\000\016\007\040\010\017\012\037" +
    "\014\024\021\021\027\036\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expressionchain ::= 
            {
              ExprChain RESULT =null;
		 RESULT = new ExprChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expressionchain ::= COMMA expression expressionchain 
            {
              ExprChain RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(e, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // paramlist ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // paramlist ::= LPAREN expression expressionchain RPAREN 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // literal ::= CREATE type LBRACKET RBRACKET paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayLiteral(t, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // literal ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // literal ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // literal ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // literal ::= MINUS expression 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e, mleft, mright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= paramlist POINTER LBRACE statementlist RBRACE 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodLiteral(p, l, p1left, p1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // literal ::= CREATE identifier paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectCreate(i, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // literal ::= NIL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nil(nleft, nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // literal ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression ::= DECREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression ::= DECREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression ::= THIS idchain DECREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= identifier idchain DECREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= INCREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= INCREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= THIS idchain INCREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= identifier idchain INCREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= typeof 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Typeof t = (Typeof)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression DIFFERS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Differs(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s, e.line, e.column)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // catchlist ::= 
            {
              CatchList RESULT =null;
		 RESULT = new CatchList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // catchlist ::= CATCH identifier idchain identifier COLON statementlist catchlist 
            {
              CatchList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CatchList l = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new Catch(i, c, i2, s, i.line, i.column), 0); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // trycatch ::= TRY COLON statementlist catchlist FINALLY COLON statementlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, s2, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // trycatch ::= TRY COLON statementlist catchlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // semicolon_statement ::= THROW expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Throw(e, e.line, e.column);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // semicolon_statement ::= SUPER LPAREN RPAREN 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Super(sleft, sright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // semicolon_statement ::= methodcall 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCallStatement(m, m.line, m.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // semicolon_statement ::= DECREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // semicolon_statement ::= DECREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // semicolon_statement ::= THIS idchain DECREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // semicolon_statement ::= identifier idchain DECREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // semicolon_statement ::= INCREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // semicolon_statement ::= INCREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // semicolon_statement ::= THIS idchain INCREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // semicolon_statement ::= identifier idchain INCREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // semicolon_statement ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // semicolon_statement ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continue(cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // semicolon_statement ::= EXIT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // semicolon_statement ::= ASSERT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // semicolon_statement ::= RETURN expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // semicolon_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // semicolon_statement ::= identifier LBRACE expression RBRACE EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashmapAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // semicolon_statement ::= identifier EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assignment(e, i, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // semicolon_statement ::= type identifier EQUAL expression 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecAssignment(e, i, t, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // semicolon_statement ::= PRINT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement v = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_statement ::= trycatch 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TryCatch t = (TryCatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_statement ::= semicolon_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_statement ::= FOR LPAREN semicolon_statement SEMICOLON expression SEMICOLON semicolon_statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3, s1.line, s1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // methodcall ::= EXEC THIS idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(new This(tleft, tright), i2, l, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // methodcall ::= EXEC identifier idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(i1, i2, l, i1.line, i1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // typeof ::= identifier idchain TYPEOF type 
            {
              Typeof RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Typeof(i, c, t, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeof",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= CONST SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= CONST identifier idchain 
            {
              Type RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, true, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= CONST STRING 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= CONST BOOLEAN 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BooleanType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= CONST FLOAT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FloatType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= CONST INT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= CONST VAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= VAR 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarType(false, vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidType(vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, false, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2, false, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringType(false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatType(false, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(false, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // argchain ::= 
            {
              ArgChain RESULT =null;
		 RESULT = new ArgChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // argchain ::= COMMA parameter argchain 
            {
              ArgChain RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arglist ::= LPAREN RPAREN 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arglist ::= LPAREN parameter argchain RPAREN 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArgList(p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // classvardec ::= PUBLIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 3, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // classvardec ::= PROTECTED type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 2, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classvardec ::= PRIVATE type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 0, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // classvardec ::= type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // classvardec ::= PUBLIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classvardec ::= PROTECTED type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // classvardec ::= PRIVATE type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // classvardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // methoddef ::= PROTECTED SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methoddef ::= SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methoddef ::= PRIVATE SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // methoddef ::= PUBLIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constructor ::= CONSTRUCTOR arglist COLON statementlist END 
            {
              Constructor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdef ::= PROTECTED SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 2, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdef ::= PROTECTED SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 2, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdef ::= SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 1, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdef ::= SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 1, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classdef ::= PRIVATE SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 0, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classdef ::= PRIVATE SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 0, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classdef ::= PUBLIC SINGLETON CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 3, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classdef ::= PUBLIC SINGLETON CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 3, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // classdef ::= PROTECTED CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 2, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // classdef ::= PROTECTED CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 2, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classdef ::= CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 1, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classdef ::= CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 1, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= PRIVATE CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 0, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 0, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, 3, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdef ::= PUBLIC CLASS identifier COLON deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, 3, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // deflist ::= deflist classvardec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add((Def)c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= deflist constructor 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c, i.line, i.column)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

