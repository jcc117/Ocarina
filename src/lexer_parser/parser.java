
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 06 08:39:57 EST 2018
//----------------------------------------------------

package lexer_parser;

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;
import filecatalog.FileCatalogBuilder;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 06 08:39:57 EST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\002\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\002\000\002\040\005\000\002\041\005\000\002" +
    "\042\005\000\002\007\011\000\002\007\007\000\002\007" +
    "\012\000\002\007\010\000\002\030\007\000\002\010\011" +
    "\000\002\010\012\000\002\012\005\000\002\012\007\000" +
    "\002\012\006\000\002\012\010\000\002\011\005\000\002" +
    "\013\006\000\002\013\004\000\002\035\005\000\002\035" +
    "\002\000\002\023\004\000\002\014\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\010\000\002\014\004\000\002\014\006\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\005\000\002\014\007\000\002\033\006\000" +
    "\002\031\004\000\002\032\005\000\002\032\002\000\002" +
    "\015\003\000\002\015\004\000\002\026\005\000\002\026" +
    "\011\000\002\026\010\000\002\026\007\000\002\026\007" +
    "\000\002\026\007\000\002\026\015\000\002\026\013\000" +
    "\002\026\010\000\002\026\004\000\002\026\003\000\002" +
    "\026\003\000\002\027\006\000\002\027\006\000\002\027" +
    "\006\000\002\027\011\000\002\027\011\000\002\027\004" +
    "\000\002\027\006\000\002\027\006\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\036\007\000" +
    "\002\036\012\000\002\037\011\000\002\037\002\000\002" +
    "\024\007\000\002\024\002\000\002\025\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\006" +
    "\000\002\016\006\000\002\016\004\000\002\016\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\006\000\002\017\012\000\002\017\004\000\002\017\007" +
    "\000\002\017\010\000\002\017\003\000\002\017\007\000" +
    "\002\021\006\000\002\021\004\000\002\020\006\000\002" +
    "\020\004\000\002\034\005\000\002\034\002\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018f\000\004\006\004\001\002\000\004\131\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\126\011\001\002\000\106\014\uff63\044\uff63\046" +
    "\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\071\uff63" +
    "\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105" +
    "\uff63\106\uff63\107\uff63\110\uff63\111\uff63\112\uff63\113\uff63" +
    "\114\uff63\115\uff63\117\uff63\120\uff63\121\uff63\122\uff63\123" +
    "\uff63\124\uff63\125\uff63\126\uff63\127\uff63\131\uff63\001\002" +
    "\000\052\002\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\065" +
    "\ufffd\131\ufffd\001\002\000\052\002\uffeb\004\017\007\016" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\065\013\131\uffeb\001\002\000\004\004" +
    "\u018e\001\002\000\004\002\001\001\002\000\044\002\uffff" +
    "\010\320\011\316\012\325\013\314\015\326\017\322\020" +
    "\332\021\050\022\024\023\056\024\040\025\046\026\060" +
    "\027\063\030\021\131\010\001\002\000\004\131\010\001" +
    "\002\000\104\005\ufff9\016\043\020\022\021\050\022\024" +
    "\023\056\024\040\025\046\026\060\027\063\030\021\032" +
    "\036\034\033\036\055\037\054\040\026\041\065\042\034" +
    "\043\052\045\042\056\037\060\030\062\035\064\064\066" +
    "\047\067\023\070\062\072\045\075\032\076\061\107\020" +
    "\110\027\131\010\001\002\000\006\056\u0188\131\010\001" +
    "\002\000\020\020\u017f\022\u0182\023\u0180\024\u0181\026\u017d" +
    "\027\u017c\131\010\001\002\000\004\121\333\001\002\000" +
    "\006\124\uffab\126\uffab\001\002\000\072\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\111\uffd5" +
    "\112\uffd5\113\uffd5\114\uffd5\117\uffd5\120\uffd5\121\uffd5\122" +
    "\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\131\uffd5" +
    "\001\002\000\116\005\uffc1\016\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\056\uffc1\060\uffc1" +
    "\062\uffc1\064\uffc1\066\uffc1\067\uffc1\070\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\107\uffc1\110\uffc1\122\uffc1" +
    "\131\uffc1\001\002\000\004\123\u0170\001\002\000\006\056" +
    "\u016d\131\010\001\002\000\004\123\u0169\001\002\000\020" +
    "\107\uffc2\110\uffc2\115\uffc2\117\uffc2\121\uffc2\125\206\131" +
    "\uffc2\001\002\000\042\025\111\031\103\054\100\055\114" +
    "\056\104\057\101\061\107\102\115\107\112\110\077\116" +
    "\117\123\102\130\106\131\010\132\113\133\105\001\002" +
    "\000\104\005\ufff9\016\043\020\022\021\050\022\024\023" +
    "\056\024\040\025\046\026\060\027\063\030\021\032\036" +
    "\034\033\036\055\037\054\040\026\041\065\042\034\043" +
    "\052\045\042\056\037\060\030\062\035\064\064\066\047" +
    "\067\023\070\062\072\045\075\032\076\061\107\020\110" +
    "\027\131\010\001\002\000\042\025\111\031\103\054\100" +
    "\055\114\056\104\057\101\061\107\102\115\107\112\110" +
    "\077\116\117\123\102\130\106\131\010\132\113\133\105" +
    "\001\002\000\004\123\u0150\001\002\000\042\025\111\031" +
    "\103\054\100\055\114\056\104\057\101\061\107\102\115" +
    "\107\112\110\077\116\117\123\102\130\106\131\010\132" +
    "\113\133\105\001\002\000\010\107\uffc2\110\uffc2\125\206" +
    "\001\002\000\072\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\104\uffd3\105\uffd3\106\uffd3\111\uffd3\112\uffd3\113\uffd3\114" +
    "\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3" +
    "\125\uffd3\126\uffd3\127\uffd3\131\uffd3\001\002\000\116\005" +
    "\ufff9\016\043\020\022\021\050\022\024\023\056\024\040" +
    "\025\046\026\060\027\063\030\021\032\036\033\ufff9\034" +
    "\033\035\ufff9\036\055\037\054\040\026\041\065\042\034" +
    "\043\052\045\042\056\037\060\030\062\035\064\064\066" +
    "\047\067\023\070\062\072\045\073\ufff9\074\ufff9\075\032" +
    "\076\061\107\020\110\027\122\ufff9\131\010\001\002\000" +
    "\042\025\111\031\103\054\100\055\114\056\104\057\101" +
    "\061\107\102\115\107\112\110\077\116\117\123\102\130" +
    "\106\131\010\132\113\133\105\001\002\000\004\123\127" +
    "\001\002\000\116\005\uffb4\016\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4\056\uffb4\060\uffb4" +
    "\062\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\072\uffb4\073" +
    "\uffb4\074\uffb4\075\uffb4\076\uffb4\107\uffb4\110\uffb4\122\uffb4" +
    "\131\uffb4\001\002\000\004\127\u012d\001\002\000\004\121" +
    "\u0128\001\002\000\006\124\uffaa\126\uffaa\001\002\000\072" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\077" +
    "\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce" +
    "\106\uffce\111\uffce\112\uffce\113\uffce\114\uffce\117\uffce\120" +
    "\uffce\121\uffce\122\uffce\123\uffce\124\uffce\125\uffce\126\uffce" +
    "\127\uffce\131\uffce\001\002\000\116\005\uffb5\016\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\045\uffb5" +
    "\056\uffb5\060\uffb5\062\uffb5\064\uffb5\066\uffb5\067\uffb5\070" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\107\uffb5" +
    "\110\uffb5\122\uffb5\131\uffb5\001\002\000\026\020\022\021" +
    "\050\022\024\023\056\024\040\025\046\026\060\027\063" +
    "\030\021\131\010\001\002\000\004\126\u011f\001\002\000" +
    "\042\025\111\031\103\054\100\055\114\056\104\057\101" +
    "\061\107\102\115\107\112\110\077\116\117\123\102\130" +
    "\106\131\010\132\113\133\105\001\002\000\042\025\111" +
    "\031\103\054\100\055\114\056\104\057\101\061\107\102" +
    "\115\107\112\110\077\116\117\123\102\130\106\131\010" +
    "\132\113\133\105\001\002\000\072\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\077\uffd4\100\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\111\uffd4\112" +
    "\uffd4\113\uffd4\114\uffd4\117\uffd4\120\uffd4\121\uffd4\122\uffd4" +
    "\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\131\uffd4\001" +
    "\002\000\004\005\311\001\002\000\072\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\111\uffd2" +
    "\112\uffd2\113\uffd2\114\uffd2\117\uffd2\120\uffd2\121\uffd2\122" +
    "\uffd2\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2\131\uffd2" +
    "\001\002\000\100\016\043\020\022\021\050\022\024\023" +
    "\056\024\040\025\046\026\060\027\063\030\021\032\036" +
    "\034\033\036\055\037\054\040\026\041\065\042\034\043" +
    "\052\045\042\056\037\060\030\062\035\064\064\066\047" +
    "\067\023\070\062\072\045\075\032\107\020\110\027\131" +
    "\010\001\002\000\042\025\111\031\103\054\100\055\114" +
    "\056\104\057\101\061\107\102\115\107\112\110\077\116" +
    "\117\123\102\130\106\131\010\132\113\133\105\001\002" +
    "\000\072\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\105\uffcd\106\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd\117" +
    "\uffcd\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd" +
    "\126\uffcd\127\uffcd\131\uffcd\001\002\000\004\123\303\001" +
    "\002\000\104\005\ufff9\016\043\020\022\021\050\022\024" +
    "\023\056\024\040\025\046\026\060\027\063\030\021\032" +
    "\036\034\033\036\055\037\054\040\026\041\065\042\034" +
    "\043\052\045\042\056\037\060\030\062\035\064\064\066" +
    "\047\067\023\070\062\072\045\075\032\076\061\107\020" +
    "\110\027\131\010\001\002\000\006\117\070\131\010\001" +
    "\002\000\006\115\073\126\072\001\002\000\004\120\071" +
    "\001\002\000\072\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6" +
    "\104\uffd6\105\uffd6\106\uffd6\111\uffd6\112\uffd6\113\uffd6\114" +
    "\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6" +
    "\125\uffd6\126\uffd6\127\uffd6\131\uffd6\001\002\000\116\005" +
    "\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\045\uffdc\056\uffdc\060\uffdc\062\uffdc\064\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc" +
    "\076\uffdc\107\uffdc\110\uffdc\122\uffdc\131\uffdc\001\002\000" +
    "\042\025\111\031\103\054\100\055\114\056\104\057\101" +
    "\061\107\102\115\107\112\110\077\116\117\123\102\130" +
    "\106\131\010\132\113\133\105\001\002\000\066\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\077\uff7f\101" +
    "\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\111\uff7f" +
    "\112\uff7f\113\uff7f\114\uff7f\117\uff7f\120\uff7f\121\uff7f\122" +
    "\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f\127\uff7f\001\002" +
    "\000\066\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053" +
    "\uff84\077\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84" +
    "\106\uff84\111\uff84\112\uff84\113\uff84\114\uff84\117\uff84\120" +
    "\uff84\121\uff84\122\uff84\123\uff84\124\uff84\125\uff84\126\uff84" +
    "\127\uff84\001\002\000\074\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\071\uffc2\077\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111" +
    "\uffc2\112\uffc2\113\uffc2\114\uffc2\117\uffc2\120\uffc2\121\uffc2" +
    "\122\uffc2\123\uffc2\124\uffc2\125\206\126\uffc2\127\uffc2\001" +
    "\002\000\006\056\266\131\010\001\002\000\066\046\uff73" +
    "\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\077\uff73\101" +
    "\uff73\102\uff73\103\uff73\104\uff73\105\uff73\106\uff73\111\uff73" +
    "\112\uff73\113\uff73\114\uff73\117\uff73\120\uff73\121\uff73\122" +
    "\uff73\123\uff73\124\uff73\125\uff73\126\uff73\127\uff73\001\002" +
    "\000\066\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053" +
    "\uff71\077\uff71\101\uff71\102\uff71\103\uff71\104\uff71\105\uff71" +
    "\106\uff71\111\uff71\112\uff71\113\uff71\114\uff71\117\uff71\120" +
    "\uff71\121\uff71\122\uff71\123\uff71\124\uff71\125\uff71\126\uff71" +
    "\127\uff71\001\002\000\042\025\111\031\103\054\100\055" +
    "\114\056\104\057\101\061\107\102\115\107\112\110\077" +
    "\116\117\123\102\130\106\131\010\132\113\133\105\001" +
    "\002\000\004\123\243\001\002\000\072\046\uff80\047\uff80" +
    "\050\uff80\051\uff80\052\uff80\053\uff80\077\uff80\101\uff80\102" +
    "\uff80\103\uff80\104\uff80\105\uff80\106\uff80\107\uffc2\110\uffc2" +
    "\111\uff80\112\uff80\113\uff80\114\uff80\117\uff80\120\uff80\121" +
    "\uff80\122\uff80\123\uff80\124\uff80\125\206\126\uff80\127\uff80" +
    "\001\002\000\066\046\uff74\047\uff74\050\uff74\051\uff74\052" +
    "\uff74\053\uff74\077\uff74\101\uff74\102\uff74\103\uff74\104\uff74" +
    "\105\uff74\106\uff74\111\uff74\112\uff74\113\uff74\114\uff74\117" +
    "\uff74\120\uff74\121\uff74\122\uff74\123\uff74\124\uff74\125\uff74" +
    "\126\uff74\127\uff74\001\002\000\066\046\uff6b\047\uff6b\050" +
    "\uff6b\051\uff6b\052\uff6b\053\uff6b\077\uff6b\101\uff6b\102\uff6b" +
    "\103\uff6b\104\uff6b\105\uff6b\106\uff6b\111\uff6b\112\uff6b\113" +
    "\uff6b\114\uff6b\117\uff6b\120\uff6b\121\uff6b\122\uff6b\123\uff6b" +
    "\124\uff6b\125\uff6b\126\uff6b\127\uff6b\001\002\000\026\020" +
    "\022\021\050\022\024\023\056\024\040\025\046\026\060" +
    "\027\063\030\021\131\010\001\002\000\056\046\122\047" +
    "\124\050\137\051\125\052\132\053\126\101\123\102\141" +
    "\103\133\104\135\105\145\106\121\111\136\112\143\113" +
    "\140\114\134\117\130\121\131\123\127\124\uffb2\125\142" +
    "\126\uffb2\001\002\000\004\121\212\001\002\000\006\056" +
    "\204\131\010\001\002\000\066\046\uff75\047\uff75\050\uff75" +
    "\051\uff75\052\uff75\053\uff75\077\uff75\101\uff75\102\uff75\103" +
    "\uff75\104\uff75\105\uff75\106\uff75\111\uff75\112\uff75\113\uff75" +
    "\114\uff75\117\uff75\120\uff75\121\uff75\122\uff75\123\uff75\124" +
    "\uff75\125\uff75\126\uff75\127\uff75\001\002\000\066\046\uff72" +
    "\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\077\uff72\101" +
    "\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\111\uff72" +
    "\112\uff72\113\uff72\114\uff72\117\uff72\120\uff72\121\uff72\122" +
    "\uff72\123\uff72\124\uff72\125\uff72\126\uff72\127\uff72\001\002" +
    "\000\042\025\111\031\103\054\100\055\114\056\104\057" +
    "\101\061\107\102\115\107\112\110\077\116\117\123\102" +
    "\130\106\131\010\132\113\133\105\001\002\000\066\046" +
    "\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\077\uff76" +
    "\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\111" +
    "\uff76\112\uff76\113\uff76\114\uff76\117\uff76\120\uff76\121\uff76" +
    "\122\uff76\123\uff76\124\uff76\125\uff76\126\uff76\127\uff76\001" +
    "\002\000\042\025\111\031\103\054\100\055\114\056\104" +
    "\057\101\061\107\102\115\107\112\110\077\116\117\123" +
    "\102\130\106\131\010\132\113\133\105\001\002\000\066" +
    "\046\122\047\124\050\137\051\125\052\132\053\126\077" +
    "\uff81\101\123\102\141\103\133\104\135\105\145\106\121" +
    "\111\136\112\143\113\140\114\134\117\uff81\120\uff81\121" +
    "\uff81\122\uff81\123\uff81\124\uff81\125\uff81\126\uff81\127\uff81" +
    "\001\002\000\042\025\111\031\103\054\100\055\114\056" +
    "\104\057\101\061\107\102\115\107\112\110\077\116\117" +
    "\123\102\130\106\131\010\132\113\133\105\001\002\000" +
    "\042\025\111\031\103\054\100\055\114\056\104\057\101" +
    "\061\107\102\115\107\112\110\077\116\117\123\102\130" +
    "\106\131\010\132\113\133\105\001\002\000\042\025\111" +
    "\031\103\054\100\055\114\056\104\057\101\061\107\102" +
    "\115\107\112\110\077\116\117\123\102\130\106\131\010" +
    "\132\113\133\105\001\002\000\042\025\111\031\103\054" +
    "\100\055\114\056\104\057\101\061\107\102\115\107\112" +
    "\110\077\116\117\123\102\130\106\131\010\132\113\133" +
    "\105\001\002\000\042\025\111\031\103\054\100\055\114" +
    "\056\104\057\101\061\107\102\115\107\112\110\077\116" +
    "\117\123\102\130\106\131\010\132\113\133\105\001\002" +
    "\000\042\025\111\031\103\054\100\055\114\056\104\057" +
    "\101\061\107\102\115\107\112\110\077\116\117\123\102" +
    "\130\106\131\010\132\113\133\105\001\002\000\044\025" +
    "\111\031\103\054\100\055\114\056\104\057\101\061\107" +
    "\102\115\107\112\110\077\116\117\123\102\124\165\130" +
    "\106\131\010\132\113\133\105\001\002\000\042\025\111" +
    "\031\103\054\100\055\114\056\104\057\101\061\107\102" +
    "\115\107\112\110\077\116\117\123\102\130\106\131\010" +
    "\132\113\133\105\001\002\000\042\025\111\031\103\054" +
    "\100\055\114\056\104\057\101\061\107\102\115\107\112" +
    "\110\077\116\117\123\102\130\106\131\010\132\113\133" +
    "\105\001\002\000\042\025\111\031\103\054\100\055\114" +
    "\056\104\057\101\061\107\102\115\107\112\110\077\116" +
    "\117\123\102\130\106\131\010\132\113\133\105\001\002" +
    "\000\042\025\111\031\103\054\100\055\114\056\104\057" +
    "\101\061\107\102\115\107\112\110\077\116\117\123\102" +
    "\130\106\131\010\132\113\133\105\001\002\000\042\025" +
    "\111\031\103\054\100\055\114\056\104\057\101\061\107" +
    "\102\115\107\112\110\077\116\117\123\102\130\106\131" +
    "\010\132\113\133\105\001\002\000\042\025\111\031\103" +
    "\054\100\055\114\056\104\057\101\061\107\102\115\107" +
    "\112\110\077\116\117\123\102\130\106\131\010\132\113" +
    "\133\105\001\002\000\042\025\111\031\103\054\100\055" +
    "\114\056\104\057\101\061\107\102\115\107\112\110\077" +
    "\116\117\123\102\130\106\131\010\132\113\133\105\001" +
    "\002\000\042\025\111\031\103\054\100\055\114\056\104" +
    "\057\101\061\107\102\115\107\112\110\077\116\117\123" +
    "\102\130\106\131\010\132\113\133\105\001\002\000\042" +
    "\025\111\031\103\054\100\055\114\056\104\057\101\061" +
    "\107\102\115\107\112\110\077\116\117\123\102\130\106" +
    "\131\010\132\113\133\105\001\002\000\042\025\111\031" +
    "\103\054\100\055\114\056\104\057\101\061\107\102\115" +
    "\107\112\110\077\116\117\123\102\130\106\131\010\132" +
    "\113\133\105\001\002\000\004\063\150\001\002\000\042" +
    "\025\111\031\103\054\100\055\114\056\104\057\101\061" +
    "\107\102\115\107\112\110\077\116\117\123\102\130\106" +
    "\131\010\132\113\133\105\001\002\000\066\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\077\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\111\uffc4\112" +
    "\uffc4\113\uffc4\114\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4" +
    "\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4\001\002\000" +
    "\042\025\111\031\103\054\100\055\114\056\104\057\101" +
    "\061\107\102\115\107\112\110\077\116\117\123\102\130" +
    "\106\131\010\132\113\133\105\001\002\000\066\046\122" +
    "\047\124\050\137\051\125\052\132\053\126\077\uff8e\101" +
    "\123\102\141\103\133\104\135\105\uff8e\106\121\111\136" +
    "\112\143\113\140\114\134\117\uff8e\120\uff8e\121\uff8e\122" +
    "\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e\001\002" +
    "\000\066\046\122\047\124\050\137\051\125\052\132\053" +
    "\126\077\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a" +
    "\106\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\117\uff8a\120" +
    "\uff8a\121\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\126\uff8a" +
    "\127\uff8a\001\002\000\066\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\077\uff83\101\uff83\102\uff83\103\uff83" +
    "\104\uff83\105\uff83\106\uff83\111\uff83\112\uff83\113\uff83\114" +
    "\uff83\117\uff83\120\uff83\121\uff83\122\uff83\123\uff83\124\uff83" +
    "\125\uff83\126\uff83\127\uff83\001\002\000\066\046\122\047" +
    "\124\050\137\051\125\052\132\053\126\077\uff90\101\uff90" +
    "\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\111\136\112" +
    "\143\113\140\114\134\117\uff90\120\uff90\121\uff90\122\uff90" +
    "\123\uff90\124\uff90\125\uff90\126\uff90\127\uff90\001\002\000" +
    "\066\046\122\047\124\050\137\051\125\052\132\053\126" +
    "\077\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106" +
    "\uff88\111\uff88\112\uff88\113\uff88\114\uff88\117\uff88\120\uff88" +
    "\121\uff88\122\uff88\123\uff88\124\uff88\125\uff88\126\uff88\127" +
    "\uff88\001\002\000\066\046\uff95\047\124\050\uff95\051\125" +
    "\052\uff95\053\uff95\077\uff95\101\uff95\102\uff95\103\uff95\104" +
    "\uff95\105\uff95\106\uff95\111\uff95\112\uff95\113\uff95\114\uff95" +
    "\117\uff95\120\uff95\121\uff95\122\uff95\123\uff95\124\uff95\125" +
    "\uff95\126\uff95\127\uff95\001\002\000\066\046\122\047\124" +
    "\050\137\051\125\052\132\053\126\077\uff8b\101\uff8b\102" +
    "\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\111\uff8b\112\uff8b" +
    "\113\uff8b\114\uff8b\117\uff8b\120\uff8b\121\uff8b\122\uff8b\123" +
    "\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\001\002\000\066" +
    "\046\122\047\124\050\137\051\125\052\132\053\126\077" +
    "\uff8d\101\123\102\141\103\uff8d\104\uff8d\105\uff8d\106\uff8d" +
    "\111\136\112\143\113\140\114\134\117\uff8d\120\uff8d\121" +
    "\uff8d\122\uff8d\123\uff8d\124\uff8d\125\uff8d\126\uff8d\127\uff8d" +
    "\001\002\000\066\046\122\047\124\050\137\051\125\052" +
    "\132\053\126\077\uff89\101\uff89\102\uff89\103\uff89\104\uff89" +
    "\105\uff89\106\uff89\111\uff89\112\uff89\113\uff89\114\uff89\117" +
    "\uff89\120\uff89\121\uff89\122\uff89\123\uff89\124\uff89\125\uff89" +
    "\126\uff89\127\uff89\001\002\000\066\046\122\047\124\050" +
    "\137\051\125\052\132\053\126\077\uff8f\101\123\102\141" +
    "\103\uff8f\104\uff8f\105\uff8f\106\uff8f\111\136\112\143\113" +
    "\140\114\134\117\uff8f\120\uff8f\121\uff8f\122\uff8f\123\uff8f" +
    "\124\uff8f\125\uff8f\126\uff8f\127\uff8f\001\002\000\066\046" +
    "\122\047\124\050\137\051\125\052\uff93\053\uff93\077\uff93" +
    "\101\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\111" +
    "\uff93\112\uff93\113\uff93\114\uff93\117\uff93\120\uff93\121\uff93" +
    "\122\uff93\123\uff93\124\uff93\125\uff93\126\uff93\127\uff93\001" +
    "\002\000\054\046\122\047\124\050\137\051\125\052\132" +
    "\053\126\101\123\102\141\103\133\104\135\105\145\106" +
    "\121\111\136\112\143\113\140\114\134\117\130\121\131" +
    "\122\162\123\127\125\142\001\002\000\066\046\uff87\047" +
    "\uff87\050\uff87\051\uff87\052\uff87\053\uff87\077\uff87\101\uff87" +
    "\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87\111\uff87\112" +
    "\uff87\113\uff87\114\uff87\117\uff87\120\uff87\121\uff87\122\uff87" +
    "\123\uff87\124\uff87\125\uff87\126\uff87\127\uff87\001\002\000" +
    "\054\046\122\047\124\050\137\051\125\052\132\053\126" +
    "\101\123\102\141\103\133\104\135\105\145\106\121\111" +
    "\136\112\143\113\140\114\134\117\130\120\164\121\131" +
    "\123\127\125\142\001\002\000\066\046\uff86\047\uff86\050" +
    "\uff86\051\uff86\052\uff86\053\uff86\077\uff86\101\uff86\102\uff86" +
    "\103\uff86\104\uff86\105\uff86\106\uff86\111\uff86\112\uff86\113" +
    "\uff86\114\uff86\117\uff86\120\uff86\121\uff86\122\uff86\123\uff86" +
    "\124\uff86\125\uff86\126\uff86\127\uff86\001\002\000\066\046" +
    "\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\077\uff66" +
    "\101\uff66\102\uff66\103\uff66\104\uff66\105\uff66\106\uff66\111" +
    "\uff66\112\uff66\113\uff66\114\uff66\117\uff66\120\uff66\121\uff66" +
    "\122\uff66\123\uff66\124\uff66\125\uff66\126\uff66\127\uff66\001" +
    "\002\000\056\046\122\047\124\050\137\051\125\052\132" +
    "\053\126\077\167\101\123\102\141\103\133\104\135\105" +
    "\145\106\121\111\136\112\143\113\140\114\134\117\130" +
    "\121\131\123\127\124\uff64\125\142\001\002\000\042\025" +
    "\111\031\103\054\100\055\114\056\104\057\101\061\107" +
    "\102\115\107\112\110\077\116\117\123\102\130\106\131" +
    "\010\132\113\133\105\001\002\000\004\124\171\001\002" +
    "\000\066\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053" +
    "\uff67\077\uff67\101\uff67\102\uff67\103\uff67\104\uff67\105\uff67" +
    "\106\uff67\111\uff67\112\uff67\113\uff67\114\uff67\117\uff67\120" +
    "\uff67\121\uff67\122\uff67\123\uff67\124\uff67\125\uff67\126\uff67" +
    "\127\uff67\001\002\000\060\046\122\047\124\050\137\051" +
    "\125\052\132\053\126\077\167\101\123\102\141\103\133" +
    "\104\135\105\145\106\121\111\136\112\143\113\140\114" +
    "\134\117\130\121\131\122\uff64\123\127\124\uff64\125\142" +
    "\001\002\000\006\122\uff65\124\uff65\001\002\000\066\046" +
    "\122\047\124\050\137\051\125\052\uff92\053\uff92\077\uff92" +
    "\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\111" +
    "\uff92\112\uff92\113\uff92\114\uff92\117\uff92\120\uff92\121\uff92" +
    "\122\uff92\123\uff92\124\uff92\125\uff92\126\uff92\127\uff92\001" +
    "\002\000\066\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\077\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105" +
    "\uff94\106\uff94\111\uff94\112\uff94\113\uff94\114\uff94\117\uff94" +
    "\120\uff94\121\uff94\122\uff94\123\uff94\124\uff94\125\uff94\126" +
    "\uff94\127\uff94\001\002\000\066\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\077\uff96\101\uff96\102\uff96\103" +
    "\uff96\104\uff96\105\uff96\106\uff96\111\uff96\112\uff96\113\uff96" +
    "\114\uff96\117\uff96\120\uff96\121\uff96\122\uff96\123\uff96\124" +
    "\uff96\125\uff96\126\uff96\127\uff96\001\002\000\066\046\122" +
    "\047\124\050\137\051\125\052\132\053\126\077\uff91\101" +
    "\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91\111\136" +
    "\112\143\113\140\114\134\117\uff91\120\uff91\121\uff91\122" +
    "\uff91\123\uff91\124\uff91\125\uff91\126\uff91\127\uff91\001\002" +
    "\000\066\046\uff97\047\124\050\uff97\051\125\052\uff97\053" +
    "\uff97\077\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97" +
    "\106\uff97\111\uff97\112\uff97\113\uff97\114\uff97\117\uff97\120" +
    "\uff97\121\uff97\122\uff97\123\uff97\124\uff97\125\uff97\126\uff97" +
    "\127\uff97\001\002\000\066\046\122\047\124\050\137\051" +
    "\125\052\132\053\126\077\uff8c\101\123\102\141\103\uff8c" +
    "\104\uff8c\105\uff8c\106\uff8c\111\136\112\143\113\140\114" +
    "\134\117\uff8c\120\uff8c\121\uff8c\122\uff8c\123\uff8c\124\uff8c" +
    "\125\uff8c\126\uff8c\127\uff8c\001\002\000\066\046\122\047" +
    "\124\050\137\051\125\052\132\053\126\077\uff6e\101\uff6e" +
    "\102\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\111\136\112" +
    "\143\113\140\114\134\117\uff6e\120\uff6e\121\uff6e\122\uff6e" +
    "\123\uff6e\124\uff6e\125\uff6e\126\uff6e\127\uff6e\001\002\000" +
    "\066\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\117\uffc2\120\uffc2" +
    "\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125\206\126\uffc2\127" +
    "\uffc2\001\002\000\066\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\106\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\117\uffc2\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125" +
    "\206\126\uffc2\127\uffc2\001\002\000\066\046\uff7b\047\uff7b" +
    "\050\uff7b\051\uff7b\052\uff7b\053\uff7b\077\uff7b\101\uff7b\102" +
    "\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b\111\uff7b\112\uff7b" +
    "\113\uff7b\114\uff7b\117\uff7b\120\uff7b\121\uff7b\122\uff7b\123" +
    "\uff7b\124\uff7b\125\uff7b\126\uff7b\127\uff7b\001\002\000\004" +
    "\131\010\001\002\000\102\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\071\uffc2\077\uffc2\100\uffc2\101\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110" +
    "\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125\206\126" +
    "\uffc2\127\uffc2\131\uffc2\001\002\000\102\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\071\uffc3\077\uffc3\100" +
    "\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3" +
    "\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\114\uffc3\115" +
    "\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3\123\uffc3\124\uffc3" +
    "\125\uffc3\126\uffc3\127\uffc3\131\uffc3\001\002\000\066\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\077\uff7c" +
    "\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\111" +
    "\uff7c\112\uff7c\113\uff7c\114\uff7c\117\uff7c\120\uff7c\121\uff7c" +
    "\122\uff7c\123\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c\001" +
    "\002\000\026\020\022\021\050\022\024\023\056\024\040" +
    "\025\046\026\060\027\063\030\021\131\010\001\002\000" +
    "\072\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125\206\126" +
    "\uffc2\127\uffc2\131\uffc2\001\002\000\006\077\215\117\070" +
    "\001\002\000\026\020\022\021\050\022\024\023\056\024" +
    "\040\025\046\026\060\027\063\030\021\131\010\001\002" +
    "\000\006\117\070\122\217\001\002\000\066\046\uff6c\047" +
    "\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\077\uff6c\101\uff6c" +
    "\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\111\uff6c\112" +
    "\uff6c\113\uff6c\114\uff6c\117\uff6c\120\uff6c\121\uff6c\122\uff6c" +
    "\123\uff6c\124\uff6c\125\uff6c\126\uff6c\127\uff6c\001\002\000" +
    "\072\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105" +
    "\uffd0\106\uffd0\111\uffd0\112\uffd0\113\uffd0\114\uffd0\117\uffd0" +
    "\120\uffd0\121\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0\126" +
    "\uffd0\127\uffd0\131\uffd0\001\002\000\010\117\uffc2\123\uffc2" +
    "\125\206\001\002\000\004\117\223\001\002\000\044\025" +
    "\111\031\103\054\100\055\114\056\104\057\101\061\107" +
    "\102\115\107\112\110\077\116\117\120\224\123\102\130" +
    "\106\131\010\132\113\133\105\001\002\000\006\117\uffd6" +
    "\121\227\001\002\000\054\046\122\047\124\050\137\051" +
    "\125\052\132\053\126\101\123\102\141\103\133\104\135" +
    "\105\145\106\121\111\136\112\143\113\140\114\134\117" +
    "\130\120\226\121\131\123\127\125\142\001\002\000\066" +
    "\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\077" +
    "\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d" +
    "\111\uff6d\112\uff6d\113\uff6d\114\uff6d\117\uff6d\120\uff6d\121" +
    "\uff6d\122\uff6d\123\uff6d\124\uff6d\125\uff6d\126\uff6d\127\uff6d" +
    "\001\002\000\044\025\111\031\103\054\100\055\114\056" +
    "\104\057\101\061\107\102\115\107\112\110\077\116\117" +
    "\122\231\123\102\130\106\131\010\132\113\133\105\001" +
    "\002\000\066\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a" +
    "\053\uff6a\077\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105" +
    "\uff6a\106\uff6a\111\uff6a\112\uff6a\113\uff6a\114\uff6a\117\uff6a" +
    "\120\uff6a\121\uff6a\122\uff6a\123\uff6a\124\uff6a\125\uff6a\126" +
    "\uff6a\127\uff6a\001\002\000\066\046\uff68\047\uff68\050\uff68" +
    "\051\uff68\052\uff68\053\uff68\077\uff68\101\uff68\102\uff68\103" +
    "\uff68\104\uff68\105\uff68\106\uff68\111\uff68\112\uff68\113\uff68" +
    "\114\uff68\117\uff68\120\uff68\121\uff68\122\uff68\123\uff68\124" +
    "\uff68\125\uff68\126\uff68\127\uff68\001\002\000\056\046\122" +
    "\047\124\050\137\051\125\052\132\053\126\077\167\101" +
    "\123\102\141\103\133\104\135\105\145\106\121\111\136" +
    "\112\143\113\140\114\134\117\130\121\131\122\uff64\123" +
    "\127\125\142\001\002\000\004\122\234\001\002\000\066" +
    "\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\077" +
    "\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106\uff69" +
    "\111\uff69\112\uff69\113\uff69\114\uff69\117\uff69\120\uff69\121" +
    "\uff69\122\uff69\123\uff69\124\uff69\125\uff69\126\uff69\127\uff69" +
    "\001\002\000\006\117\uffd0\123\127\001\002\000\066\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\077\uff70" +
    "\101\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\111" +
    "\uff70\112\uff70\113\uff70\114\uff70\117\uff70\120\uff70\121\uff70" +
    "\122\uff70\123\uff70\124\uff70\125\uff70\126\uff70\127\uff70\001" +
    "\002\000\006\107\241\110\240\001\002\000\066\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\077\uff79\101" +
    "\uff79\102\uff79\103\uff79\104\uff79\105\uff79\106\uff79\111\uff79" +
    "\112\uff79\113\uff79\114\uff79\117\uff79\120\uff79\121\uff79\122" +
    "\uff79\123\uff79\124\uff79\125\uff79\126\uff79\127\uff79\001\002" +
    "\000\066\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053" +
    "\uff7d\077\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d" +
    "\106\uff7d\111\uff7d\112\uff7d\113\uff7d\114\uff7d\117\uff7d\120" +
    "\uff7d\121\uff7d\122\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d" +
    "\127\uff7d\001\002\000\004\127\255\001\002\000\030\020" +
    "\022\021\050\022\024\023\056\024\040\025\046\026\060" +
    "\027\063\030\021\124\245\131\010\001\002\000\006\117" +
    "\070\131\010\001\002\000\004\127\uffda\001\002\000\006" +
    "\077\247\124\uffd8\001\002\000\026\020\022\021\050\022" +
    "\024\023\056\024\040\025\046\026\060\027\063\030\021" +
    "\131\010\001\002\000\004\124\251\001\002\000\004\127" +
    "\uffdb\001\002\000\006\077\247\124\uffd8\001\002\000\004" +
    "\124\uffd9\001\002\000\006\077\uffd7\124\uffd7\001\002\000" +
    "\026\020\022\021\050\022\024\023\056\024\040\025\046" +
    "\026\060\027\063\030\021\131\010\001\002\000\006\100" +
    "\257\117\070\001\002\000\004\121\260\001\002\000\104" +
    "\016\043\020\022\021\050\022\024\023\056\024\040\025" +
    "\046\026\060\027\063\030\021\032\036\034\033\036\055" +
    "\037\054\040\026\041\065\042\034\043\052\045\042\056" +
    "\037\060\030\062\035\064\064\066\047\067\023\070\062" +
    "\072\045\075\032\076\061\107\020\110\027\122\ufff9\131" +
    "\010\001\002\000\004\122\262\001\002\000\066\046\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\077\uff6f\101" +
    "\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\111\uff6f" +
    "\112\uff6f\113\uff6f\114\uff6f\117\uff6f\120\uff6f\121\uff6f\122" +
    "\uff6f\123\uff6f\124\uff6f\125\uff6f\126\uff6f\127\uff6f\001\002" +
    "\000\054\046\122\047\124\050\137\051\125\052\132\053" +
    "\126\101\123\102\141\103\133\104\135\105\145\106\121" +
    "\111\136\112\143\113\140\114\134\117\130\121\131\123" +
    "\127\124\264\125\142\001\002\000\066\046\uff82\047\uff82" +
    "\050\uff82\051\uff82\052\uff82\053\uff82\077\uff82\101\uff82\102" +
    "\uff82\103\uff82\104\uff82\105\uff82\106\uff82\111\uff82\112\uff82" +
    "\113\uff82\114\uff82\117\uff82\120\uff82\121\uff82\122\uff82\123" +
    "\uff82\124\uff82\125\uff82\126\uff82\127\uff82\001\002\000\066" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\077" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\111\uffc2\112\uffc2\113\uffc2\114\uffc2\117\uffc2\120\uffc2\121" +
    "\uffc2\122\uffc2\123\uffc2\124\uffc2\125\206\126\uffc2\127\uffc2" +
    "\001\002\000\066\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2" +
    "\105\uffc2\106\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\117" +
    "\uffc2\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125\206" +
    "\126\uffc2\127\uffc2\001\002\000\066\046\uff77\047\uff77\050" +
    "\uff77\051\uff77\052\uff77\053\uff77\077\uff77\101\uff77\102\uff77" +
    "\103\uff77\104\uff77\105\uff77\106\uff77\111\uff77\112\uff77\113" +
    "\uff77\114\uff77\117\uff77\120\uff77\121\uff77\122\uff77\123\uff77" +
    "\124\uff77\125\uff77\126\uff77\127\uff77\001\002\000\066\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\077\uff78" +
    "\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78\111" +
    "\uff78\112\uff78\113\uff78\114\uff78\117\uff78\120\uff78\121\uff78" +
    "\122\uff78\123\uff78\124\uff78\125\uff78\126\uff78\127\uff78\001" +
    "\002\000\074\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85" +
    "\053\uff85\071\272\077\uff85\101\uff85\102\uff85\103\uff85\104" +
    "\uff85\105\uff85\106\uff85\107\274\110\273\111\uff85\112\uff85" +
    "\113\uff85\114\uff85\117\uff85\120\uff85\121\uff85\122\uff85\123" +
    "\uff85\124\uff85\125\uff85\126\uff85\127\uff85\001\002\000\026" +
    "\020\022\021\050\022\024\023\056\024\040\025\046\026" +
    "\060\027\063\030\021\131\010\001\002\000\066\046\uff7a" +
    "\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\077\uff7a\101" +
    "\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\111\uff7a" +
    "\112\uff7a\113\uff7a\114\uff7a\117\uff7a\120\uff7a\121\uff7a\122" +
    "\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a\127\uff7a\001\002" +
    "\000\066\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053" +
    "\uff7e\077\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e" +
    "\106\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\117\uff7e\120" +
    "\uff7e\121\uff7e\122\uff7e\123\uff7e\124\uff7e\125\uff7e\126\uff7e" +
    "\127\uff7e\001\002\000\066\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\077\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\105\uffc5\106\uffc5\111\uffc5\112\uffc5\113\uffc5\114" +
    "\uffc5\117\070\120\uffc5\121\uffc5\122\uffc5\123\uffc5\124\uffc5" +
    "\125\uffc5\126\uffc5\127\uffc5\001\002\000\004\005\277\001" +
    "\002\000\004\037\300\001\002\000\042\025\111\031\103" +
    "\054\100\055\114\056\104\057\101\061\107\102\115\107" +
    "\112\110\077\116\117\123\102\130\106\131\010\132\113" +
    "\133\105\001\002\000\054\046\122\047\124\050\137\051" +
    "\125\052\132\053\126\101\123\102\141\103\133\104\135" +
    "\105\145\106\121\111\136\112\143\113\140\114\134\117" +
    "\130\121\131\123\127\125\142\126\302\001\002\000\116" +
    "\005\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\045\uffb7\056\uffb7\060\uffb7\062\uffb7\064\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\072\uffb7\073\uffb7\074\uffb7\075" +
    "\uffb7\076\uffb7\107\uffb7\110\uffb7\122\uffb7\131\uffb7\001\002" +
    "\000\042\025\111\031\103\054\100\055\114\056\104\057" +
    "\101\061\107\102\115\107\112\110\077\116\117\123\102" +
    "\130\106\131\010\132\113\133\105\001\002\000\054\046" +
    "\122\047\124\050\137\051\125\052\132\053\126\101\123" +
    "\102\141\103\133\104\135\105\145\106\121\111\136\112" +
    "\143\113\140\114\134\117\130\121\131\123\127\124\305" +
    "\125\142\001\002\000\006\124\uffb3\126\uffb3\001\002\000" +
    "\056\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\111" +
    "\uff84\112\uff84\113\uff84\114\uff84\117\uff84\121\uff84\123\uff84" +
    "\124\uffa1\125\uff84\126\uffa1\001\002\000\052\046\122\047" +
    "\124\050\137\051\125\052\132\053\126\101\123\102\141" +
    "\103\133\104\135\105\145\106\121\111\136\112\143\113" +
    "\140\114\134\117\130\121\131\123\127\125\142\001\002" +
    "\000\116\005\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\045\uffc0\056\uffc0\060\uffc0\062\uffc0" +
    "\064\uffc0\066\uffc0\067\uffc0\070\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\107\uffc0\110\uffc0\122\uffc0\131\uffc0" +
    "\001\002\000\044\002\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\131\uffeb\001" +
    "\002\000\044\002\ufffc\010\320\011\316\012\325\013\314" +
    "\015\326\017\322\020\332\021\050\022\024\023\056\024" +
    "\040\025\046\026\060\027\063\030\021\131\010\001\002" +
    "\000\046\002\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\131\ufff2\001" +
    "\002\000\004\131\010\001\002\000\046\002\uffec\005\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\131\uffec\001\002\000\036\005\ufff4\013" +
    "\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\131\ufff4\001" +
    "\002\000\006\117\070\131\010\001\002\000\036\005\ufff4" +
    "\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\131\ufff4" +
    "\001\002\000\046\002\uffed\005\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\131" +
    "\uffed\001\002\000\030\013\360\020\356\021\050\022\024" +
    "\023\056\024\040\025\046\026\060\027\063\030\021\131" +
    "\010\001\002\000\046\002\uffee\005\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\131\uffee\001\002\000\046\002\uffef\005\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\131\uffef\001\002\000\036\005\ufff4\013\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\131\ufff4\001\002\000\004" +
    "\123\243\001\002\000\046\002\ufff0\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\131\ufff0\001\002\000\046\002\ufff1\005\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\131\ufff1\001\002\000\046\002\ufff3\005\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\131\ufff3\001\002\000\030\020\022\021\050" +
    "\022\024\023\056\024\040\025\046\026\060\027\063\030" +
    "\021\121\333\131\010\001\002\000\026\020\022\021\050" +
    "\022\024\023\056\024\040\025\046\026\060\027\063\030" +
    "\021\131\010\001\002\000\006\117\070\131\010\001\002" +
    "\000\004\123\243\001\002\000\004\127\337\001\002\000" +
    "\104\005\ufff9\016\043\020\022\021\050\022\024\023\056" +
    "\024\040\025\046\026\060\027\063\030\021\032\036\034" +
    "\033\036\055\037\054\040\026\041\065\042\034\043\052" +
    "\045\042\056\037\060\030\062\035\064\064\066\047\067" +
    "\023\070\062\072\045\075\032\076\061\107\020\110\027" +
    "\131\010\001\002\000\004\005\341\001\002\000\046\002" +
    "\uffe2\005\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\131\uffe2\001\002\000\006" +
    "\117\070\122\343\001\002\000\072\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\111\uffcf\112" +
    "\uffcf\113\uffcf\114\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf" +
    "\123\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\131\uffcf\001" +
    "\002\000\004\127\345\001\002\000\104\005\ufff9\016\043" +
    "\020\022\021\050\022\024\023\056\024\040\025\046\026" +
    "\060\027\063\030\021\032\036\034\033\036\055\037\054" +
    "\040\026\041\065\042\034\043\052\045\042\056\037\060" +
    "\030\062\035\064\064\066\047\067\023\070\062\072\045" +
    "\075\032\076\061\107\020\110\027\131\010\001\002\000" +
    "\004\005\347\001\002\000\046\002\uffe3\005\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\131\uffe3\001\002\000\036\005\352\013\314\015" +
    "\326\017\322\020\332\021\050\022\024\023\056\024\040" +
    "\025\046\026\060\027\063\030\021\131\010\001\002\000" +
    "\036\005\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\131\ufff7\001\002\000\046\002\uffe8\005\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\131\uffe8\001\002\000\036\005\ufff6\013\ufff6\015" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\131\ufff6\001\002\000" +
    "\036\005\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\131\ufff5\001\002\000\036\005\ufff8\013\ufff8\015\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\131\ufff8\001\002\000\030" +
    "\020\022\021\050\022\024\023\056\024\040\025\046\026" +
    "\060\027\063\030\021\121\333\131\010\001\002\000\006" +
    "\117\070\131\010\001\002\000\004\131\010\001\002\000" +
    "\006\014\362\127\363\001\002\000\004\131\010\001\002" +
    "\000\044\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\131\uffeb\001\002\000" +
    "\044\005\365\010\320\011\316\012\325\013\314\015\326" +
    "\017\322\020\332\021\050\022\024\023\056\024\040\025" +
    "\046\026\060\027\063\030\021\131\010\001\002\000\046" +
    "\002\uffe4\005\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\131\uffe4\001\002\000" +
    "\004\127\367\001\002\000\044\005\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\131\uffeb\001\002\000\044\005\371\010\320\011\316\012" +
    "\325\013\314\015\326\017\322\020\332\021\050\022\024" +
    "\023\056\024\040\025\046\026\060\027\063\030\021\131" +
    "\010\001\002\000\046\002\uffe5\005\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\131\uffe5\001\002\000\006\115\374\126\373\001\002\000" +
    "\046\002\uffde\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\131\uffde\001\002" +
    "\000\026\025\111\031\103\054\100\055\114\057\101\061" +
    "\107\102\115\130\106\132\113\133\105\001\002\000\004" +
    "\126\376\001\002\000\046\002\uffdd\005\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\131\uffdd\001\002\000\006\117\070\131\010\001\002" +
    "\000\004\123\243\001\002\000\004\127\u0102\001\002\000" +
    "\104\005\ufff9\016\043\020\022\021\050\022\024\023\056" +
    "\024\040\025\046\026\060\027\063\030\021\032\036\034" +
    "\033\036\055\037\054\040\026\041\065\042\034\043\052" +
    "\045\042\056\037\060\030\062\035\064\064\066\047\067" +
    "\023\070\062\072\045\075\032\076\061\107\020\110\027" +
    "\131\010\001\002\000\004\005\u0104\001\002\000\046\002" +
    "\uffe1\005\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\131\uffe1\001\002\000\036" +
    "\005\u0106\013\314\015\326\017\322\020\332\021\050\022" +
    "\024\023\056\024\040\025\046\026\060\027\063\030\021" +
    "\131\010\001\002\000\046\002\uffea\005\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\015\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\131\uffea\001\002\000\006\115\u0109\126\u0108\001\002" +
    "\000\046\002\uffe0\005\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\131\uffe0\001" +
    "\002\000\026\025\111\031\103\054\100\055\114\057\101" +
    "\061\107\102\115\130\106\132\113\133\105\001\002\000" +
    "\004\126\u010b\001\002\000\046\002\uffdf\005\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\131\uffdf\001\002\000\036\005\u010d\013\314\015" +
    "\326\017\322\020\332\021\050\022\024\023\056\024\040" +
    "\025\046\026\060\027\063\030\021\131\010\001\002\000" +
    "\046\002\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\131\uffe9\001\002" +
    "\000\006\014\u010f\127\u0110\001\002\000\004\131\010\001" +
    "\002\000\044\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\131\uffeb\001\002" +
    "\000\044\005\u0112\010\320\011\316\012\325\013\314\015" +
    "\326\017\322\020\332\021\050\022\024\023\056\024\040" +
    "\025\046\026\060\027\063\030\021\131\010\001\002\000" +
    "\046\002\uffe6\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\131\uffe6\001\002" +
    "\000\004\127\u0114\001\002\000\044\005\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\131\uffeb\001\002\000\044\005\u0116\010\320\011\316" +
    "\012\325\013\314\015\326\017\322\020\332\021\050\022" +
    "\024\023\056\024\040\025\046\026\060\027\063\030\021" +
    "\131\010\001\002\000\046\002\uffe7\005\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\131\uffe7\001\002\000\054\046\122\047\124\050\137" +
    "\051\125\052\132\053\126\101\123\102\141\103\133\104" +
    "\135\105\145\106\121\111\136\112\143\113\140\114\134" +
    "\117\130\121\131\123\127\125\142\127\u0118\001\002\000" +
    "\104\005\ufff9\016\043\020\022\021\050\022\024\023\056" +
    "\024\040\025\046\026\060\027\063\030\021\032\036\034" +
    "\033\036\055\037\054\040\026\041\065\042\034\043\052" +
    "\045\042\056\037\060\030\062\035\064\064\066\047\067" +
    "\023\070\062\072\045\075\032\076\061\107\020\110\027" +
    "\131\010\001\002\000\004\005\u011a\001\002\000\116\005" +
    "\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\045\uffbc\056\uffbc\060\uffbc\062\uffbc\064\uffbc\066" +
    "\uffbc\067\uffbc\070\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc" +
    "\076\uffbc\107\uffbc\110\uffbc\122\uffbc\131\uffbc\001\002\000" +
    "\054\046\122\047\124\050\137\051\125\052\132\053\126" +
    "\101\123\102\141\103\133\104\135\105\145\106\121\111" +
    "\136\112\143\113\140\114\134\117\130\121\131\123\127" +
    "\125\142\127\u011c\001\002\000\104\005\ufff9\016\043\020" +
    "\022\021\050\022\024\023\056\024\040\025\046\026\060" +
    "\027\063\030\021\032\036\034\033\036\055\037\054\040" +
    "\026\041\065\042\034\043\052\045\042\056\037\060\030" +
    "\062\035\064\064\066\047\067\023\070\062\072\045\075" +
    "\032\076\061\107\020\110\027\131\010\001\002\000\004" +
    "\005\u011e\001\002\000\116\005\uffbb\016\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\056\uffbb" +
    "\060\uffbb\062\uffbb\064\uffbb\066\uffbb\067\uffbb\070\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\107\uffbb\110\uffbb" +
    "\122\uffbb\131\uffbb\001\002\000\116\005\uffb6\016\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\045\uffb6" +
    "\056\uffb6\060\uffb6\062\uffb6\064\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\107\uffb6" +
    "\110\uffb6\122\uffb6\131\uffb6\001\002\000\006\117\070\131" +
    "\010\001\002\000\004\044\u0122\001\002\000\004\131\010" +
    "\001\002\000\006\125\206\127\uffc2\001\002\000\004\127" +
    "\u0125\001\002\000\104\005\ufff9\016\043\020\022\021\050" +
    "\022\024\023\056\024\040\025\046\026\060\027\063\030" +
    "\021\032\036\034\033\036\055\037\054\040\026\041\065" +
    "\042\034\043\052\045\042\056\037\060\030\062\035\064" +
    "\064\066\047\067\023\070\062\072\045\075\032\076\061" +
    "\107\020\110\027\131\010\001\002\000\004\005\u0127\001" +
    "\002\000\116\005\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\045\uffb8\056\uffb8\060\uffb8\062" +
    "\uffb8\064\uffb8\066\uffb8\067\uffb8\070\uffb8\072\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\076\uffb8\107\uffb8\110\uffb8\122\uffb8\131" +
    "\uffb8\001\002\000\026\020\022\021\050\022\024\023\056" +
    "\024\040\025\046\026\060\027\063\030\021\131\010\001" +
    "\002\000\006\077\u012a\117\070\001\002\000\026\020\022" +
    "\021\050\022\024\023\056\024\040\025\046\026\060\027" +
    "\063\030\021\131\010\001\002\000\006\117\070\122\u012c" +
    "\001\002\000\072\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\111\uffd1\112\uffd1\113\uffd1\114" +
    "\uffd1\117\uffd1\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1" +
    "\125\uffd1\126\uffd1\127\uffd1\131\uffd1\001\002\000\110\005" +
    "\ufff9\016\043\020\022\021\050\022\024\023\056\024\040" +
    "\025\046\026\060\027\063\030\021\032\036\034\033\036" +
    "\055\037\054\040\026\041\065\042\034\043\052\045\042" +
    "\056\037\060\030\062\035\064\064\066\047\067\023\070" +
    "\062\072\045\073\ufff9\074\ufff9\075\032\076\061\107\020" +
    "\110\027\131\010\001\002\000\010\005\uff9b\073\u0130\074" +
    "\uff9b\001\002\000\006\005\u0138\074\u0137\001\002\000\004" +
    "\131\010\001\002\000\006\125\206\131\uffc2\001\002\000" +
    "\004\131\010\001\002\000\004\127\u0134\001\002\000\110" +
    "\005\ufff9\016\043\020\022\021\050\022\024\023\056\024" +
    "\040\025\046\026\060\027\063\030\021\032\036\034\033" +
    "\036\055\037\054\040\026\041\065\042\034\043\052\045" +
    "\042\056\037\060\030\062\035\064\064\066\047\067\023" +
    "\070\062\072\045\073\ufff9\074\ufff9\075\032\076\061\107" +
    "\020\110\027\131\010\001\002\000\010\005\uff9b\073\u0130" +
    "\074\uff9b\001\002\000\006\005\uff9c\074\uff9c\001\002\000" +
    "\004\127\u0139\001\002\000\116\005\uff9e\016\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\045\uff9e\056" +
    "\uff9e\060\uff9e\062\uff9e\064\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\107\uff9e\110" +
    "\uff9e\122\uff9e\131\uff9e\001\002\000\104\005\ufff9\016\043" +
    "\020\022\021\050\022\024\023\056\024\040\025\046\026" +
    "\060\027\063\030\021\032\036\034\033\036\055\037\054" +
    "\040\026\041\065\042\034\043\052\045\042\056\037\060" +
    "\030\062\035\064\064\066\047\067\023\070\062\072\045" +
    "\075\032\076\061\107\020\110\027\131\010\001\002\000" +
    "\004\005\u013b\001\002\000\116\005\uff9d\016\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\045\uff9d\056" +
    "\uff9d\060\uff9d\062\uff9d\064\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\107\uff9d\110" +
    "\uff9d\122\uff9d\131\uff9d\001\002\000\006\124\uffa0\126\uffa0" +
    "\001\002\000\056\046\122\047\124\050\137\051\125\052" +
    "\132\053\126\101\123\102\141\103\133\104\135\105\145" +
    "\106\121\111\136\112\143\113\140\114\134\117\130\121" +
    "\131\123\127\124\uffae\125\142\126\uffae\001\002\000\016" +
    "\005\ufffa\033\ufffa\035\ufffa\073\ufffa\074\ufffa\122\ufffa\001" +
    "\002\000\006\107\u0141\110\u0140\001\002\000\006\124\uffa4" +
    "\126\uffa4\001\002\000\006\124\uffa8\126\uffa8\001\002\000" +
    "\054\046\122\047\124\050\137\051\125\052\132\053\126" +
    "\101\123\102\141\103\133\104\135\105\145\106\121\111" +
    "\136\112\143\113\140\114\134\117\130\121\131\123\127" +
    "\125\142\127\u0143\001\002\000\110\005\ufff9\016\043\020" +
    "\022\021\050\022\024\023\056\024\040\025\046\026\060" +
    "\027\063\030\021\032\036\033\ufff9\034\033\035\ufff9\036" +
    "\055\037\054\040\026\041\065\042\034\043\052\045\042" +
    "\056\037\060\030\062\035\064\064\066\047\067\023\070" +
    "\062\072\045\075\032\076\061\107\020\110\027\131\010" +
    "\001\002\000\010\005\uff99\033\uff99\035\uff99\001\002\000" +
    "\010\005\u0148\033\u0147\035\u0146\001\002\000\042\025\111" +
    "\031\103\054\100\055\114\056\104\057\101\061\107\102" +
    "\115\107\112\110\077\116\117\123\102\130\106\131\010" +
    "\132\113\133\105\001\002\000\004\127\u014b\001\002\000" +
    "\116\005\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\045\uffbd\056\uffbd\060\uffbd\062\uffbd\064" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\072\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\107\uffbd\110\uffbd\122\uffbd\131\uffbd\001" +
    "\002\000\004\005\u014a\001\002\000\116\005\uffbe\016\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045" +
    "\uffbe\056\uffbe\060\uffbe\062\uffbe\064\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\107" +
    "\uffbe\110\uffbe\122\uffbe\131\uffbe\001\002\000\104\005\ufff9" +
    "\016\043\020\022\021\050\022\024\023\056\024\040\025" +
    "\046\026\060\027\063\030\021\032\036\034\033\036\055" +
    "\037\054\040\026\041\065\042\034\043\052\045\042\056" +
    "\037\060\030\062\035\064\064\066\047\067\023\070\062" +
    "\072\045\075\032\076\061\107\020\110\027\131\010\001" +
    "\002\000\004\005\uff98\001\002\000\054\046\122\047\124" +
    "\050\137\051\125\052\132\053\126\101\123\102\141\103" +
    "\133\104\135\105\145\106\121\111\136\112\143\113\140" +
    "\114\134\117\130\121\131\123\127\125\142\127\u014e\001" +
    "\002\000\110\005\ufff9\016\043\020\022\021\050\022\024" +
    "\023\056\024\040\025\046\026\060\027\063\030\021\032" +
    "\036\033\ufff9\034\033\035\ufff9\036\055\037\054\040\026" +
    "\041\065\042\034\043\052\045\042\056\037\060\030\062" +
    "\035\064\064\066\047\067\023\070\062\072\045\075\032" +
    "\076\061\107\020\110\027\131\010\001\002\000\010\005" +
    "\uff9a\033\uff9a\035\uff9a\001\002\000\042\025\111\031\103" +
    "\054\100\055\114\056\104\057\101\061\107\102\115\107" +
    "\112\110\077\116\117\123\102\130\106\131\010\132\113" +
    "\133\105\001\002\000\054\046\122\047\124\050\137\051" +
    "\125\052\132\053\126\101\123\102\141\103\133\104\135" +
    "\105\145\106\121\111\136\112\143\113\140\114\134\117" +
    "\130\121\131\123\127\124\u0152\125\142\001\002\000\006" +
    "\124\uffac\126\uffac\001\002\000\054\046\122\047\124\050" +
    "\137\051\125\052\132\053\126\101\123\102\141\103\133" +
    "\104\135\105\145\106\121\111\136\112\143\113\140\114" +
    "\134\117\130\121\131\123\127\125\142\127\u0154\001\002" +
    "\000\104\005\ufff9\016\043\020\022\021\050\022\024\023" +
    "\056\024\040\025\046\026\060\027\063\030\021\032\036" +
    "\034\033\036\055\037\054\040\026\041\065\042\034\043" +
    "\052\045\042\056\037\060\030\062\035\064\064\066\047" +
    "\067\023\070\062\072\045\075\032\076\061\107\020\110" +
    "\027\131\010\001\002\000\004\005\u0156\001\002\000\116" +
    "\005\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\045\uffba\056\uffba\060\uffba\062\uffba\064\uffba" +
    "\066\uffba\067\uffba\070\uffba\072\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\107\uffba\110\uffba\122\uffba\131\uffba\001\002" +
    "\000\004\005\u0158\001\002\000\116\005\uffbf\016\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf" +
    "\056\uffbf\060\uffbf\062\uffbf\064\uffbf\066\uffbf\067\uffbf\070" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\107\uffbf" +
    "\110\uffbf\122\uffbf\131\uffbf\001\002\000\056\046\122\047" +
    "\124\050\137\051\125\052\132\053\126\101\123\102\141" +
    "\103\133\104\135\105\145\106\121\111\136\112\143\113" +
    "\140\114\134\117\130\121\131\123\127\124\uff9f\125\142" +
    "\126\uff9f\001\002\000\016\107\u015e\110\u015c\115\u015d\117" +
    "\u015f\121\u015b\131\uffd0\001\002\000\042\025\111\031\103" +
    "\054\100\055\114\056\104\057\101\061\107\102\115\107" +
    "\112\110\077\116\117\123\102\130\106\131\010\132\113" +
    "\133\105\001\002\000\006\124\uffa5\126\uffa5\001\002\000" +
    "\042\025\111\031\103\054\100\055\114\056\104\057\101" +
    "\061\107\102\115\107\112\110\077\116\117\123\102\130" +
    "\106\131\010\132\113\133\105\001\002\000\006\124\uffa9" +
    "\126\uffa9\001\002\000\042\025\111\031\103\054\100\055" +
    "\114\056\104\057\101\061\107\102\115\107\112\110\077" +
    "\116\117\123\102\130\106\131\010\132\113\133\105\001" +
    "\002\000\054\046\122\047\124\050\137\051\125\052\132" +
    "\053\126\101\123\102\141\103\133\104\135\105\145\106" +
    "\121\111\136\112\143\113\140\114\134\117\130\120\u0161" +
    "\121\131\123\127\125\142\001\002\000\004\115\u0162\001" +
    "\002\000\042\025\111\031\103\054\100\055\114\056\104" +
    "\057\101\061\107\102\115\107\112\110\077\116\117\123" +
    "\102\130\106\131\010\132\113\133\105\001\002\000\056" +
    "\046\122\047\124\050\137\051\125\052\132\053\126\101" +
    "\123\102\141\103\133\104\135\105\145\106\121\111\136" +
    "\112\143\113\140\114\134\117\130\121\131\123\127\124" +
    "\uffaf\125\142\126\uffaf\001\002\000\056\046\122\047\124" +
    "\050\137\051\125\052\132\053\126\101\123\102\141\103" +
    "\133\104\135\105\145\106\121\111\136\112\143\113\140" +
    "\114\134\117\130\121\131\123\127\124\uffb1\125\142\126" +
    "\uffb1\001\002\000\054\046\122\047\124\050\137\051\125" +
    "\052\132\053\126\101\123\102\141\103\133\104\135\105" +
    "\145\106\121\111\136\112\143\113\140\114\134\117\130" +
    "\121\131\122\u0166\123\127\125\142\001\002\000\004\115" +
    "\u0167\001\002\000\042\025\111\031\103\054\100\055\114" +
    "\056\104\057\101\061\107\102\115\107\112\110\077\116" +
    "\117\123\102\130\106\131\010\132\113\133\105\001\002" +
    "\000\056\046\122\047\124\050\137\051\125\052\132\053" +
    "\126\101\123\102\141\103\133\104\135\105\145\106\121" +
    "\111\136\112\143\113\140\114\134\117\130\121\131\123" +
    "\127\124\uffb0\125\142\126\uffb0\001\002\000\042\025\111" +
    "\031\103\054\100\055\114\056\104\057\101\061\107\102" +
    "\115\107\112\110\077\116\117\123\102\130\106\131\010" +
    "\132\113\133\105\001\002\000\054\046\122\047\124\050" +
    "\137\051\125\052\132\053\126\101\123\102\141\103\133" +
    "\104\135\105\145\106\121\111\136\112\143\113\140\114" +
    "\134\117\130\121\131\123\127\124\u016b\125\142\001\002" +
    "\000\006\124\uffad\126\uffad\001\002\000\010\124\uffc2\125" +
    "\206\126\uffc2\001\002\000\010\124\uffc2\125\206\126\uffc2" +
    "\001\002\000\006\124\uffa2\126\uffa2\001\002\000\006\124" +
    "\uffa3\126\uffa3\001\002\000\056\016\043\020\022\021\050" +
    "\022\024\023\056\024\040\025\046\026\060\027\063\030" +
    "\021\045\042\056\037\060\030\062\035\064\064\066\047" +
    "\067\023\070\062\075\032\107\020\110\027\131\010\001" +
    "\002\000\004\126\u0174\001\002\000\006\117\070\131\010" +
    "\001\002\000\004\115\073\001\002\000\042\025\111\031" +
    "\103\054\100\055\114\056\104\057\101\061\107\102\115" +
    "\107\112\110\077\116\117\123\102\130\106\131\010\132" +
    "\113\133\105\001\002\000\054\046\122\047\124\050\137" +
    "\051\125\052\132\053\126\101\123\102\141\103\133\104" +
    "\135\105\145\106\121\111\136\112\143\113\140\114\134" +
    "\117\130\121\131\123\127\125\142\126\u0176\001\002\000" +
    "\056\016\043\020\022\021\050\022\024\023\056\024\040" +
    "\025\046\026\060\027\063\030\021\045\042\056\037\060" +
    "\030\062\035\064\064\066\047\067\023\070\062\075\032" +
    "\107\020\110\027\131\010\001\002\000\004\124\u0178\001" +
    "\002\000\004\127\u0179\001\002\000\104\005\ufff9\016\043" +
    "\020\022\021\050\022\024\023\056\024\040\025\046\026" +
    "\060\027\063\030\021\032\036\034\033\036\055\037\054" +
    "\040\026\041\065\042\034\043\052\045\042\056\037\060" +
    "\030\062\035\064\064\066\047\067\023\070\062\072\045" +
    "\075\032\076\061\107\020\110\027\131\010\001\002\000" +
    "\004\005\u017b\001\002\000\116\005\uffb9\016\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9\056" +
    "\uffb9\060\uffb9\062\uffb9\064\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\107\uffb9\110" +
    "\uffb9\122\uffb9\131\uffb9\001\002\000\072\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\111\uffcc" +
    "\112\uffcc\113\uffcc\114\uffcc\117\uffcc\120\uffcc\121\uffcc\122" +
    "\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc\127\uffcc\131\uffcc" +
    "\001\002\000\072\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\105\uffc8\106\uffc8\111\uffc8\112\uffc8\113\uffc8\114" +
    "\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8" +
    "\125\uffc8\126\uffc8\127\uffc8\131\uffc8\001\002\000\072\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\117\uffc2\120\uffc2" +
    "\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125\206\126\uffc2\127" +
    "\uffc2\131\uffc2\001\002\000\004\121\u0183\001\002\000\072" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\077" +
    "\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca" +
    "\106\uffca\111\uffca\112\uffca\113\uffca\114\uffca\117\uffca\120" +
    "\uffca\121\uffca\122\uffca\123\uffca\124\uffca\125\uffca\126\uffca" +
    "\127\uffca\131\uffca\001\002\000\072\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\077\uffc9\100\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\111\uffc9\112" +
    "\uffc9\113\uffc9\114\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9" +
    "\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\131\uffc9\001" +
    "\002\000\072\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104" +
    "\uffcb\105\uffcb\106\uffcb\111\uffcb\112\uffcb\113\uffcb\114\uffcb" +
    "\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125" +
    "\uffcb\126\uffcb\127\uffcb\131\uffcb\001\002\000\026\020\022" +
    "\021\050\022\024\023\056\024\040\025\046\026\060\027" +
    "\063\030\021\131\010\001\002\000\006\117\070\122\u0185" +
    "\001\002\000\072\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6" +
    "\104\uffc6\105\uffc6\106\uffc6\111\uffc6\112\uffc6\113\uffc6\114" +
    "\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6" +
    "\125\uffc6\126\uffc6\127\uffc6\131\uffc6\001\002\000\072\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106" +
    "\uffc7\111\uffc7\112\uffc7\113\uffc7\114\uffc7\117\uffc7\120\uffc7" +
    "\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127" +
    "\uffc7\131\uffc7\001\002\000\010\124\uffc2\125\206\126\uffc2" +
    "\001\002\000\010\124\uffc2\125\206\126\uffc2\001\002\000" +
    "\006\124\uffa6\126\uffa6\001\002\000\006\124\uffa7\126\uffa7" +
    "\001\002\000\006\125\206\126\uffc2\001\002\000\004\126" +
    "\u018d\001\002\000\052\002\ufffe\004\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\015\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\065\ufffe\131\ufffe\001\002\000\104\005\ufff9\016" +
    "\043\020\022\021\050\022\024\023\056\024\040\025\046" +
    "\026\060\027\063\030\021\032\036\034\033\036\055\037" +
    "\054\040\026\041\065\042\034\043\052\045\042\056\037" +
    "\060\030\062\035\064\064\066\047\067\023\070\062\072" +
    "\045\075\032\076\061\107\020\110\027\131\010\001\002" +
    "\000\004\005\u0190\001\002\000\044\002\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\131\uffeb\001\002\000\044\002\ufffb\010\320\011\316" +
    "\012\325\013\314\015\326\017\322\020\332\021\050\022" +
    "\024\023\056\024\040\025\046\026\060\027\063\030\021" +
    "\131\010\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018f\000\004\002\004\001\001\000\004\022\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\043\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\330\010\312\012\327\014\316\022\212\030" +
    "\326\040\322\041\320\042\314\044\323\001\001\000\004" +
    "\022\u018a\001\001\000\022\005\056\011\043\014\065\015" +
    "\040\022\030\026\024\027\052\036\050\001\001\000\004" +
    "\022\u0186\001\001\000\004\022\u017d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u016b\001\001\000\002\001" +
    "\001\000\004\032\u0159\001\001\000\014\016\u0158\017\115" +
    "\022\075\031\074\033\073\001\001\000\022\005\u0156\011" +
    "\043\014\065\015\040\022\030\026\024\027\052\036\050" +
    "\001\001\000\014\016\u0152\017\115\022\075\031\074\033" +
    "\073\001\001\000\002\001\001\000\014\016\u0141\017\115" +
    "\022\075\031\074\033\073\001\001\000\004\032\u013e\001" +
    "\001\000\002\001\001\000\022\005\u013d\011\043\014\065" +
    "\015\040\022\030\026\024\027\052\036\050\001\001\000" +
    "\014\016\u013c\017\115\022\075\031\074\033\073\001\001" +
    "\000\004\020\u013b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\u011f\022\212\001\001\000" +
    "\002\001\001\000\014\016\u011a\017\115\022\075\031\074" +
    "\033\073\001\001\000\014\016\u0116\017\115\022\075\031" +
    "\074\033\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\043\014\065\022\030\026" +
    "\307\027\052\036\050\001\001\000\014\016\306\017\115" +
    "\022\075\031\305\033\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\275\011\043\014\065\015\040" +
    "\022\030\026\024\027\052\036\050\001\001\000\004\022" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\107\017\115\022" +
    "\075\031\074\033\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\270\001\001\000\004\022\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\262" +
    "\017\115\022\075\031\074\033\073\001\001\000\004\013" +
    "\241\001\001\000\004\032\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\221\022\220\001\001\000" +
    "\004\020\143\001\001\000\002\001\001\000\004\022\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\201\017\115\022\075\031\074\033\073\001\001\000\002" +
    "\001\001\000\014\016\117\017\115\022\075\031\074\033" +
    "\073\001\001\000\004\020\143\001\001\000\014\016\200" +
    "\017\115\022\075\031\074\033\073\001\001\000\014\016" +
    "\177\017\115\022\075\031\074\033\073\001\001\000\014" +
    "\016\176\017\115\022\075\031\074\033\073\001\001\000" +
    "\014\016\175\017\115\022\075\031\074\033\073\001\001" +
    "\000\014\016\174\017\115\022\075\031\074\033\073\001" +
    "\001\000\014\016\173\017\115\022\075\031\074\033\073" +
    "\001\001\000\014\016\165\017\115\022\075\031\074\033" +
    "\073\001\001\000\014\016\162\017\115\022\075\031\074" +
    "\033\073\001\001\000\014\016\160\017\115\022\075\031" +
    "\074\033\073\001\001\000\014\016\157\017\115\022\075" +
    "\031\074\033\073\001\001\000\014\016\156\017\115\022" +
    "\075\031\074\033\073\001\001\000\014\016\155\017\115" +
    "\022\075\031\074\033\073\001\001\000\014\016\154\017" +
    "\115\022\075\031\074\033\073\001\001\000\014\016\153" +
    "\017\115\022\075\031\074\033\073\001\001\000\014\016" +
    "\152\017\115\022\075\031\074\033\073\001\001\000\014" +
    "\016\151\017\115\022\075\031\074\033\073\001\001\000" +
    "\014\016\150\017\115\022\075\031\074\033\073\001\001" +
    "\000\002\001\001\000\014\016\146\017\115\022\075\031" +
    "\074\033\073\001\001\000\002\001\001\000\014\016\145" +
    "\017\115\022\075\031\074\033\073\001\001\000\004\020" +
    "\143\001\001\000\004\020\143\001\001\000\002\001\001" +
    "\000\004\020\143\001\001\000\004\020\143\001\001\000" +
    "\004\020\143\001\001\000\004\020\143\001\001\000\004" +
    "\020\143\001\001\000\004\020\143\001\001\000\004\020" +
    "\143\001\001\000\004\020\143\001\001\000\004\020\143" +
    "\001\001\000\002\001\001\000\004\020\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\143\034\167" +
    "\001\001\000\014\016\171\017\115\022\075\031\074\033" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\143\034\172\001\001\000\002\001\001\000\004\020" +
    "\143\001\001\000\004\020\143\001\001\000\004\020\143" +
    "\001\001\000\004\020\143\001\001\000\004\020\143\001" +
    "\001\000\004\020\143\001\001\000\004\020\143\001\001" +
    "\000\004\032\210\001\001\000\004\032\204\001\001\000" +
    "\002\001\001\000\004\022\206\001\001\000\004\032\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\213\022\212\001\001\000\004\032\217\001\001\000\002" +
    "\001\001\000\006\014\215\022\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\234" +
    "\001\001\000\002\001\001\000\014\016\224\017\115\022" +
    "\075\031\074\033\073\001\001\000\004\021\227\001\001" +
    "\000\004\020\143\001\001\000\002\001\001\000\014\016" +
    "\231\017\115\022\075\031\074\033\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\143\034\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\243" +
    "\022\212\023\245\001\001\000\004\022\253\001\001\000" +
    "\002\001\001\000\004\035\247\001\001\000\010\014\243" +
    "\022\212\023\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\255\022\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\260\011\043\014\065" +
    "\015\040\022\030\026\024\027\052\036\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\143\001\001" +
    "\000\002\001\001\000\004\032\267\001\001\000\004\032" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\274\022\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\300\017\115\022\075\031" +
    "\074\033\073\001\001\000\004\020\143\001\001\000\002" +
    "\001\001\000\014\016\303\017\115\022\075\031\074\033" +
    "\073\001\001\000\004\020\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\143\001\001\000\002\001" +
    "\001\000\004\043\311\001\001\000\026\007\330\010\312" +
    "\012\327\014\316\022\212\030\326\040\322\041\320\042" +
    "\314\044\323\001\001\000\002\001\001\000\004\022\u010d" +
    "\001\001\000\002\001\001\000\004\006\u010b\001\001\000" +
    "\004\022\u0106\001\001\000\004\006\u0104\001\001\000\002" +
    "\001\001\000\006\014\356\022\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\347\001\001\000\004" +
    "\013\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\333\022\212\001\001\000\006" +
    "\014\341\022\212\001\001\000\004\022\334\001\001\000" +
    "\004\013\335\001\001\000\002\001\001\000\022\005\337" +
    "\011\043\014\065\015\040\022\030\026\024\027\052\036" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\345\011\043\014\065\015\040\022\030\026\024\027\052" +
    "\036\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\354\010\350\012\353\014\316\022\212\030\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\376" +
    "\022\212\001\001\000\004\022\371\001\001\000\004\022" +
    "\360\001\001\000\002\001\001\000\004\022\365\001\001" +
    "\000\004\043\363\001\001\000\026\007\330\010\312\012" +
    "\327\014\316\022\212\030\326\040\322\041\320\042\314" +
    "\044\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\367\001\001\000\026\007\330\010\312\012\327" +
    "\014\316\022\212\030\326\040\322\041\320\042\314\044" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\377\001\001\000\004\013\u0100" +
    "\001\001\000\002\001\001\000\022\005\u0102\011\043\014" +
    "\065\015\040\022\030\026\024\027\052\036\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\354\010" +
    "\350\012\353\014\316\022\212\030\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\354\010\350\012\353\014\316\022\212\030\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0112" +
    "\001\001\000\004\043\u0110\001\001\000\026\007\330\010" +
    "\312\012\327\014\316\022\212\030\326\040\322\041\320" +
    "\042\314\044\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0114\001\001\000\026\007\330\010\312" +
    "\012\327\014\316\022\212\030\326\040\322\041\320\042" +
    "\314\044\323\001\001\000\002\001\001\000\004\020\143" +
    "\001\001\000\022\005\u0118\011\043\014\065\015\040\022" +
    "\030\026\024\027\052\036\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\143\001\001\000\022\005" +
    "\u011c\011\043\014\065\015\040\022\030\026\024\027\052" +
    "\036\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0120\001\001\000\002\001\001" +
    "\000\004\022\u0122\001\001\000\004\032\u0123\001\001\000" +
    "\002\001\001\000\022\005\u0125\011\043\014\065\015\040" +
    "\022\030\026\024\027\052\036\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u0128\022\212\001\001" +
    "\000\002\001\001\000\006\014\u012a\022\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\u012d\011\043" +
    "\014\065\015\040\022\030\026\024\027\052\036\050\001" +
    "\001\000\004\037\u012e\001\001\000\002\001\001\000\004" +
    "\022\u0130\001\001\000\004\032\u0131\001\001\000\004\022" +
    "\u0132\001\001\000\002\001\001\000\022\005\u0134\011\043" +
    "\014\065\015\040\022\030\026\024\027\052\036\050\001" +
    "\001\000\004\037\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\u0139\011\043\014" +
    "\065\015\040\022\030\026\024\027\052\036\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\143\001" +
    "\001\000\022\005\u0143\011\043\014\065\015\040\022\030" +
    "\026\024\027\052\036\050\001\001\000\004\024\u0144\001" +
    "\001\000\004\025\u0148\001\001\000\014\016\u014c\017\115" +
    "\022\075\031\074\033\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\u014b\011\043\014\065\015\040\022\030\026\024\027" +
    "\052\036\050\001\001\000\002\001\001\000\004\020\143" +
    "\001\001\000\022\005\u014e\011\043\014\065\015\040\022" +
    "\030\026\024\027\052\036\050\001\001\000\002\001\001" +
    "\000\014\016\u0150\017\115\022\075\031\074\033\073\001" +
    "\001\000\004\020\143\001\001\000\002\001\001\000\004" +
    "\020\143\001\001\000\022\005\u0154\011\043\014\065\015" +
    "\040\022\030\026\024\027\052\036\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\143\001\001\000\002\001\001\000\014" +
    "\016\u0164\017\115\022\075\031\074\033\073\001\001\000" +
    "\002\001\001\000\014\016\u0163\017\115\022\075\031\074" +
    "\033\073\001\001\000\002\001\001\000\014\016\u015f\017" +
    "\115\022\075\031\074\033\073\001\001\000\004\020\143" +
    "\001\001\000\002\001\001\000\014\016\u0162\017\115\022" +
    "\075\031\074\033\073\001\001\000\004\020\143\001\001" +
    "\000\004\020\143\001\001\000\004\020\143\001\001\000" +
    "\002\001\001\000\014\016\u0167\017\115\022\075\031\074" +
    "\033\073\001\001\000\004\020\143\001\001\000\014\016" +
    "\u0169\017\115\022\075\031\074\033\073\001\001\000\004" +
    "\020\143\001\001\000\002\001\001\000\004\032\u016e\001" +
    "\001\000\004\032\u016d\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0171\022\030\027\u0170\001\001\000" +
    "\002\001\001\000\004\022\u0172\001\001\000\002\001\001" +
    "\000\014\016\u0174\017\115\022\075\031\074\033\073\001" +
    "\001\000\004\020\143\001\001\000\010\014\u0171\022\030" +
    "\027\u0176\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\u0179\011\043\014\065\015\040\022\030\026\024" +
    "\027\052\036\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0185" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u0183\022\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0189\001\001\000\004\032\u0188\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\u018e\011\043" +
    "\014\065\015\040\022\030\026\024\027\052\036\050\001" +
    "\001\000\002\001\001\000\004\043\u0190\001\001\000\026" +
    "\007\330\010\312\012\327\014\316\022\212\030\326\040" +
    "\322\041\320\042\314\044\323\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expressionchain ::= 
            {
              ExprChain RESULT =null;
		 RESULT = new ExprChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expressionchain ::= COMMA expression expressionchain 
            {
              ExprChain RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(e, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // paramlist ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // paramlist ::= LPAREN expression expressionchain RPAREN 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bracelist ::= LBRACE RBRACE 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracelist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // bracelist ::= LBRACE expression expressionchain RBRACE 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracelist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= CREATE type LBRACKET RBRACKET bracelist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayLiteral(t, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // literal ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // literal ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // literal ::= MINUS expression 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e, mleft, mright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= DELEGATE arglist COLON type POINTER LBRACE statementlist RBRACE 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArgList p = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodLiteral(p, l, FileCatalogBuilder.generateLiteralId(), t, dleft, dright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= CREATE identifier idchain paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain d = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectCreate(i, d, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // literal ::= NIL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nil(nleft, nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // literal ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // literal ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // literal ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // literal ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= DECREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= DECREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= THIS idchain DECREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= identifier idchain DECREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostDecrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= INCREMENT THIS idchain 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= INCREMENT identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= THIS idchain INCREMENT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= identifier idchain INCREMENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PostIncrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= typeof 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Typeof t = (Typeof)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= expression DIFFERS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Differs(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s, e.line, e.column)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // catchlist ::= 
            {
              CatchList RESULT =null;
		 RESULT = new CatchList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // catchlist ::= CATCH identifier idchain identifier COLON statementlist catchlist 
            {
              CatchList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CatchList l = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new Catch(i, c, i2, s, i.line, i.column), 0); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // trycatch ::= TRY COLON statementlist catchlist FINALLY COLON statementlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, s2, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // trycatch ::= TRY COLON statementlist catchlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // semicolon_statement ::= THROW expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Throw(e, e.line, e.column);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // semicolon_statement ::= SUPER paramlist 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Super(p, sleft, sright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // semicolon_statement ::= EXEC methodcall 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCallStatement(m, m.line, m.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // semicolon_statement ::= DECREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // semicolon_statement ::= DECREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // semicolon_statement ::= THIS idchain DECREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // semicolon_statement ::= identifier idchain DECREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // semicolon_statement ::= INCREMENT THIS idchain 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // semicolon_statement ::= INCREMENT identifier idchain 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // semicolon_statement ::= THIS idchain INCREMENT 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // semicolon_statement ::= identifier idchain INCREMENT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // semicolon_statement ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // semicolon_statement ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continue(cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // semicolon_statement ::= EXIT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // semicolon_statement ::= ASSERT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // semicolon_statement ::= RETURN expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // semicolon_statement ::= identifier idchain LBRACKET expression RBRACKET EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayAssignment(i, c, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // semicolon_statement ::= identifier idchain LBRACE expression RBRACE EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HashmapAssignment(i, c, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // semicolon_statement ::= identifier idchain EQUAL expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assignment(e, i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // semicolon_statement ::= type identifier EQUAL expression 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecAssignment(e, i, t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // semicolon_statement ::= PRINT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement v = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_statement ::= trycatch 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TryCatch t = (TryCatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_statement ::= semicolon_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_statement ::= FOREACH type identifier IN identifier idchain COLON statementlist END 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Foreach(t, i1, i2, c, s, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_statement ::= FOR LPAREN semicolon_statement SEMICOLON expression SEMICOLON semicolon_statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3, s1.line, s1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // methodcall ::= expression paramlist 
            {
              MethodCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typeof ::= identifier idchain TYPEOF type 
            {
              Typeof RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Typeof(i, c, t, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeof",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= CONST SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= CONST identifier idchain 
            {
              Type RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, true, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= CONST STRING 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= CONST BOOLEAN 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BooleanType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CONST FLOAT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FloatType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= CONST INT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= CONST VAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= VAR 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarType(false, vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidType(vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, false, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, false, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2, false, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringType(false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatType(false, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(false, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argchain ::= 
            {
              ArgChain RESULT =null;
		 RESULT = new ArgChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argchain ::= COMMA parameter argchain 
            {
              ArgChain RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arglist ::= LPAREN RPAREN 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arglist ::= LPAREN parameter argchain RPAREN 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArgList(p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // classvardec ::= STATIC type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // classvardec ::= STATIC type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, true, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classvardec ::= type identifier EQUAL literal SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(l, i, t, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classvardec ::= type identifier SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, false,t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methoddef ::= STATIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // methoddef ::= SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constructor ::= CONSTRUCTOR arglist COLON statementlist END 
            {
              Constructor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdef ::= STATIC CLASS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdef ::= STATIC CLASS identifier EXTENDS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdef ::= CLASS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdef ::= CLASS identifier EXTENDS identifier COLON definitions END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // prolist ::= PROTECTED deflist END 
            {
              ProtectedList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtectedList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prolist",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // prilist ::= PRIVATE deflist END 
            {
              PrivateList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrivateList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prilist",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // publist ::= PUBLIC deflist END 
            {
              PublicList RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PublicList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("publist",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definitions ::= 
            {
              DefinitionList RESULT =null;
		 RESULT = new DefinitionList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // definitions ::= definitions prolist 
            {
              DefinitionList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProtectedList p = (ProtectedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(p); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definitions ::= definitions prilist 
            {
              DefinitionList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrivateList p = (PrivateList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(p); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definitions ::= definitions publist 
            {
              DefinitionList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PublicList p = (PublicList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(p); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definitions ::= definitions def 
            {
              DefinitionList RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefinitionList d1 = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefWrapper d2 = (DefWrapper)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d1.add(d2); RESULT = d1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definitions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def ::= constructor 
            {
              DefWrapper RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def ::= classvardec 
            {
              DefWrapper RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper((Def)c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def ::= methoddef 
            {
              DefWrapper RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def ::= classdef 
            {
              DefWrapper RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefWrapper(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // deflist ::= deflist classvardec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add((Def)c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= deflist constructor 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END definitions 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END definitions 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c, i.line, i.column)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist definitions 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefinitionList d = (DefinitionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

