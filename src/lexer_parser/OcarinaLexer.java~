/* The following code was generated by JFlex 1.6.1 */

package lexer_parser;
import java_cup.runtime.*;
import java.math.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>OcarinaLexer.flex</tt>
 */
public class OcarinaLexer extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\13\2\0\1\16\23\0\1\55\1\17\1\12\1\0"+
    "\1\73\1\53\1\14\1\65\1\66\1\15\1\47\1\72\1\50\1\7"+
    "\1\57\1\2\7\6\2\1\1\70\1\67\1\60\1\51\1\52\1\11"+
    "\1\71\6\5\21\10\1\4\2\10\1\61\1\0\1\62\1\56\1\10"+
    "\1\0\1\22\1\37\1\27\1\26\1\24\1\31\1\42\1\40\1\33"+
    "\1\10\1\45\1\30\1\36\1\25\1\34\1\41\1\44\1\23\1\20"+
    "\1\21\1\32\1\35\1\43\1\3\1\46\1\10\1\63\1\54\1\64"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\1"+
    "\1\7\1\1\22\4\1\10\1\11\1\12\1\13\2\1"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\1\3\1\33\1\0\1\3\1\6\1\0\1\34\1\0"+
    "\1\34\25\4\1\35\13\4\1\36\1\37\1\40\12\4"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\40"+
    "\1\50\1\51\1\52\1\53\1\0\6\4\1\54\4\4"+
    "\1\46\5\4\1\55\3\4\1\56\1\50\13\4\1\57"+
    "\3\4\1\60\1\61\12\4\1\0\3\4\1\62\1\63"+
    "\1\4\1\64\6\4\1\65\1\66\1\67\1\4\1\47"+
    "\20\4\1\70\10\4\1\71\1\4\1\0\1\4\1\72"+
    "\1\4\1\73\1\74\7\4\1\75\1\4\1\76\1\4"+
    "\1\77\1\100\2\4\1\101\3\4\1\102\1\103\1\4"+
    "\1\104\1\105\2\4\1\106\3\4\1\107\1\0\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\4\1\43\2\4"+
    "\1\116\2\4\1\117\3\4\1\120\4\4\1\121\1\6"+
    "\1\122\1\123\1\51\3\4\1\124\1\125\1\126\1\127"+
    "\1\130\1\4\1\6\1\4\1\131\1\132\2\4\1\133"+
    "\1\4\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\74\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\74\0\74\0\u0834\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\u012c\0\u0870\0\u08ac\0\u08e8\0\u012c\0\74"+
    "\0\u0924\0\u0960\0\u021c\0\74\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\360\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\360\0\360"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\u08e8\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\360\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\360\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\360\0\u1770\0\u17ac\0\u17e8\0\360\0\360\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\360\0\360\0\u1ba8"+
    "\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88"+
    "\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\360\0\360\0\u1ef0"+
    "\0\360\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\360"+
    "\0\360\0\360\0\u2094\0\360\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\360\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\360\0\u2670\0\u26ac"+
    "\0\u26e8\0\360\0\u2724\0\360\0\360\0\u2760\0\u279c\0\u27d8"+
    "\0\u2814\0\u2850\0\u288c\0\u28c8\0\360\0\u2904\0\360\0\u2940"+
    "\0\360\0\u297c\0\u29b8\0\u29f4\0\360\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\360\0\360\0\u2ae4\0\360\0\360\0\u2b20\0\u2b5c\0\360"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\360\0\u2c4c\0\360\0\360\0\360"+
    "\0\360\0\360\0\360\0\u2c88\0\360\0\u2cc4\0\u2d00\0\360"+
    "\0\u2d3c\0\u2d78\0\360\0\u2db4\0\u2df0\0\u2e2c\0\360\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\360\0\u2f58\0\360\0\360\0\360"+
    "\0\u2f94\0\u2fd0\0\u300c\0\360\0\360\0\360\0\360\0\360"+
    "\0\u3048\0\u3084\0\u30c0\0\360\0\360\0\u30fc\0\u3138\0\360"+
    "\0\u3174\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\3\1\6\1\5\1\2"+
    "\1\7\1\10\1\11\1\12\1\10\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\5\1\32\1\33\1\34"+
    "\1\5\1\35\3\5\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\75\0\2\3\3\0\1\3\1\63\65\0\1\64\1\65"+
    "\2\66\1\0\1\65\1\63\65\0\6\5\1\0\2\5"+
    "\6\0\27\5\26\0\2\67\3\0\1\67\65\0\13\7"+
    "\1\70\60\7\13\0\1\10\2\0\1\10\55\0\14\71"+
    "\1\72\57\71\17\73\1\74\54\73\1\0\6\5\1\0"+
    "\2\5\6\0\1\5\1\75\1\76\1\5\1\77\5\5"+
    "\1\100\14\5\26\0\6\5\1\0\2\5\6\0\3\5"+
    "\1\101\14\5\1\102\5\5\1\103\26\0\6\5\1\0"+
    "\2\5\6\0\1\104\4\5\1\105\21\5\26\0\6\5"+
    "\1\0\2\5\6\0\2\5\1\106\1\5\1\107\22\5"+
    "\26\0\2\5\1\110\3\5\1\0\2\5\6\0\5\5"+
    "\1\111\2\5\1\112\13\5\1\113\2\5\26\0\6\5"+
    "\1\0\2\5\6\0\2\5\1\114\7\5\1\115\1\116"+
    "\1\117\12\5\26\0\6\5\1\0\2\5\6\0\4\5"+
    "\1\120\6\5\1\121\1\122\12\5\26\0\6\5\1\0"+
    "\2\5\6\0\2\5\1\123\1\124\4\5\1\125\3\5"+
    "\1\126\12\5\26\0\6\5\1\0\2\5\6\0\4\5"+
    "\1\127\22\5\26\0\6\5\1\0\2\5\6\0\2\5"+
    "\1\130\7\5\1\131\1\132\1\133\12\5\26\0\6\5"+
    "\1\0\2\5\6\0\1\134\4\5\1\135\21\5\26\0"+
    "\6\5\1\0\2\5\6\0\5\5\1\136\3\5\1\137"+
    "\15\5\26\0\6\5\1\0\2\5\6\0\3\5\1\140"+
    "\23\5\26\0\6\5\1\0\2\5\6\0\2\5\1\141"+
    "\11\5\1\142\12\5\26\0\6\5\1\0\2\5\6\0"+
    "\3\5\1\143\1\144\7\5\1\145\12\5\26\0\6\5"+
    "\1\0\2\5\6\0\2\5\1\146\24\5\26\0\6\5"+
    "\1\0\2\5\6\0\3\5\1\147\6\5\1\150\14\5"+
    "\26\0\6\5\1\0\2\5\6\0\13\5\1\151\4\5"+
    "\1\152\6\5\74\0\1\153\74\0\1\154\74\0\1\155"+
    "\1\156\72\0\1\157\75\0\1\160\1\0\1\161\72\0"+
    "\1\162\1\163\67\0\1\164\73\0\1\165\23\0\2\64"+
    "\3\0\1\64\1\63\65\0\1\64\1\65\3\0\1\65"+
    "\1\63\65\0\2\166\2\0\2\166\13\0\1\166\1\0"+
    "\1\166\1\0\2\166\1\0\1\166\5\0\1\166\34\0"+
    "\14\71\1\74\57\71\14\0\1\167\60\0\6\5\1\0"+
    "\2\5\6\0\2\5\1\170\1\171\23\5\26\0\6\5"+
    "\1\0\2\5\6\0\22\5\1\172\4\5\26\0\6\5"+
    "\1\0\2\5\6\0\10\5\1\173\16\5\26\0\6\5"+
    "\1\0\2\5\6\0\21\5\1\174\5\5\26\0\6\5"+
    "\1\0\2\5\6\0\12\5\1\175\13\5\1\176\26\0"+
    "\6\5\1\0\2\5\6\0\3\5\1\177\7\5\1\200"+
    "\13\5\26\0\6\5\1\0\2\5\6\0\21\5\1\201"+
    "\5\5\26\0\6\5\1\0\2\5\6\0\1\202\26\5"+
    "\26\0\6\5\1\0\2\5\6\0\6\5\1\203\20\5"+
    "\26\0\6\5\1\0\2\5\6\0\1\5\1\204\25\5"+
    "\26\0\6\5\1\0\2\5\6\0\1\5\1\205\25\5"+
    "\26\0\6\5\1\0\2\5\6\0\1\5\1\206\2\5"+
    "\1\207\6\5\1\210\13\5\26\0\6\5\1\0\2\5"+
    "\6\0\6\5\1\211\20\5\26\0\6\5\1\0\2\5"+
    "\6\0\1\212\26\5\26\0\6\5\1\0\2\5\6\0"+
    "\12\5\1\213\14\5\26\0\6\5\1\0\2\5\6\0"+
    "\5\5\1\214\21\5\26\0\6\5\1\0\2\5\6\0"+
    "\10\5\1\116\16\5\26\0\6\5\1\0\2\5\6\0"+
    "\10\5\1\215\16\5\26\0\6\5\1\0\2\5\6\0"+
    "\3\5\1\216\23\5\26\0\6\5\1\0\2\5\6\0"+
    "\7\5\1\217\7\5\1\220\7\5\26\0\6\5\1\0"+
    "\2\5\6\0\11\5\1\221\15\5\26\0\6\5\1\0"+
    "\2\5\6\0\1\5\1\222\25\5\26\0\6\5\1\0"+
    "\2\5\6\0\4\5\1\223\22\5\26\0\6\5\1\0"+
    "\2\5\6\0\2\5\1\224\24\5\26\0\6\5\1\0"+
    "\2\5\6\0\5\5\1\225\21\5\26\0\6\5\1\0"+
    "\2\5\6\0\5\5\1\226\21\5\26\0\6\5\1\0"+
    "\2\5\6\0\10\5\1\227\16\5\26\0\6\5\1\0"+
    "\2\5\6\0\5\5\1\230\21\5\26\0\6\5\1\0"+
    "\2\5\6\0\5\5\1\231\21\5\26\0\6\5\1\0"+
    "\2\5\6\0\3\5\1\232\23\5\26\0\6\5\1\0"+
    "\2\5\6\0\13\5\1\233\13\5\26\0\6\5\1\0"+
    "\2\5\6\0\1\5\1\234\6\5\1\235\16\5\26\0"+
    "\6\5\1\0\2\5\6\0\1\5\1\236\25\5\26\0"+
    "\6\5\1\0\2\5\6\0\3\5\1\237\23\5\26\0"+
    "\6\5\1\0\2\5\6\0\13\5\1\240\13\5\26\0"+
    "\6\5\1\0\2\5\6\0\4\5\1\241\22\5\26\0"+
    "\6\5\1\0\2\5\6\0\22\5\1\242\4\5\26\0"+
    "\6\5\1\0\2\5\6\0\14\5\1\243\12\5\26\0"+
    "\6\5\1\0\2\5\6\0\1\244\26\5\26\0\6\5"+
    "\1\0\2\5\6\0\13\5\1\245\1\246\12\5\26\0"+
    "\6\5\1\0\2\5\6\0\17\5\1\247\7\5\26\0"+
    "\6\5\1\0\2\5\6\0\1\5\1\250\25\5\26\0"+
    "\6\5\1\0\2\5\6\0\13\5\1\251\13\5\25\0"+
    "\15\252\1\0\56\252\1\0\6\5\1\0\2\5\6\0"+
    "\1\5\1\253\1\5\1\254\23\5\26\0\6\5\1\0"+
    "\2\5\6\0\13\5\1\255\13\5\26\0\6\5\1\0"+
    "\2\5\6\0\4\5\1\256\22\5\26\0\6\5\1\0"+
    "\2\5\6\0\11\5\1\257\15\5\26\0\6\5\1\0"+
    "\2\5\6\0\4\5\1\260\22\5\26\0\6\5\1\0"+
    "\2\5\6\0\4\5\1\261\22\5\26\0\6\5\1\0"+
    "\2\5\6\0\14\5\1\262\12\5\26\0\6\5\1\0"+
    "\2\5\6\0\1\257\26\5\26\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\263\22\5\26\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\264\22\5\26\0\6\5\1\0\2\5"+
    "\6\0\20\5\1\265\6\5\26\0\6\5\1\0\2\5"+
    "\6\0\12\5\1\266\14\5\26\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\267\22\5\26\0\6\5\1\0\2\5"+
    "\6\0\7\5\1\270\17\5\26\0\6\5\1\0\2\5"+
    "\6\0\1\5\1\271\25\5\26\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\272\22\5\26\0\6\5\1\0\2\5"+
    "\6\0\2\5\1\273\24\5\26\0\6\5\1\0\2\5"+
    "\6\0\6\5\1\274\20\5\26\0\6\5\1\0\2\5"+
    "\6\0\13\5\1\275\13\5\26\0\6\5\1\0\2\5"+
    "\6\0\12\5\1\276\14\5\26\0\6\5\1\0\2\5"+
    "\6\0\11\5\1\277\15\5\26\0\6\5\1\0\2\5"+
    "\6\0\7\5\1\300\17\5\26\0\6\5\1\0\2\5"+
    "\6\0\2\5\1\301\24\5\26\0\6\5\1\0\2\5"+
    "\6\0\1\302\26\5\26\0\6\5\1\0\2\5\6\0"+
    "\1\303\1\304\25\5\26\0\6\5\1\0\2\5\6\0"+
    "\22\5\1\305\4\5\26\0\6\5\1\0\2\5\6\0"+
    "\1\306\26\5\26\0\6\5\1\0\2\5\6\0\7\5"+
    "\1\307\17\5\26\0\6\5\1\0\2\5\6\0\2\5"+
    "\1\310\24\5\26\0\6\5\1\0\2\5\6\0\4\5"+
    "\1\311\22\5\26\0\6\5\1\0\2\5\6\0\5\5"+
    "\1\312\21\5\26\0\6\5\1\0\2\5\6\0\13\5"+
    "\1\313\13\5\26\0\6\5\1\0\2\5\6\0\4\5"+
    "\1\314\22\5\26\0\6\5\1\0\2\5\6\0\6\5"+
    "\1\315\20\5\26\0\6\5\1\0\2\5\6\0\2\5"+
    "\1\316\24\5\26\0\6\5\1\0\2\5\6\0\13\5"+
    "\1\317\13\5\26\0\6\5\1\0\2\5\6\0\10\5"+
    "\1\320\16\5\26\0\6\5\1\0\2\5\6\0\20\5"+
    "\1\321\6\5\26\0\6\5\1\0\2\5\6\0\5\5"+
    "\1\322\7\5\1\323\11\5\26\0\6\5\1\0\2\5"+
    "\6\0\1\5\1\324\25\5\26\0\6\5\1\0\2\5"+
    "\6\0\10\5\1\325\16\5\26\0\6\5\1\0\2\5"+
    "\6\0\20\5\1\326\6\5\26\0\6\5\1\0\2\5"+
    "\6\0\10\5\1\327\16\5\25\0\14\252\1\330\57\252"+
    "\1\0\6\5\1\0\2\5\6\0\13\5\1\331\13\5"+
    "\26\0\6\5\1\0\2\5\6\0\1\5\1\332\25\5"+
    "\26\0\6\5\1\0\2\5\6\0\5\5\1\333\21\5"+
    "\26\0\6\5\1\0\2\5\6\0\3\5\1\334\23\5"+
    "\26\0\6\5\1\0\2\5\6\0\23\5\1\335\3\5"+
    "\26\0\6\5\1\0\2\5\6\0\14\5\1\336\12\5"+
    "\26\0\6\5\1\0\2\5\6\0\3\5\1\337\23\5"+
    "\26\0\6\5\1\0\2\5\6\0\4\5\1\340\22\5"+
    "\26\0\6\5\1\0\2\5\6\0\3\5\1\341\23\5"+
    "\26\0\6\5\1\0\2\5\6\0\5\5\1\342\21\5"+
    "\26\0\6\5\1\0\2\5\6\0\10\5\1\343\16\5"+
    "\26\0\6\5\1\0\2\5\6\0\16\5\1\344\10\5"+
    "\26\0\6\5\1\0\2\5\6\0\22\5\1\345\4\5"+
    "\26\0\6\5\1\0\2\5\6\0\4\5\1\346\22\5"+
    "\26\0\6\5\1\0\2\5\6\0\20\5\1\347\6\5"+
    "\26\0\6\5\1\0\2\5\6\0\1\5\1\350\25\5"+
    "\26\0\6\5\1\0\2\5\6\0\1\351\26\5\26\0"+
    "\6\5\1\0\2\5\6\0\1\5\1\352\25\5\26\0"+
    "\6\5\1\0\2\5\6\0\13\5\1\353\13\5\26\0"+
    "\6\5\1\0\2\5\6\0\1\5\1\354\25\5\26\0"+
    "\6\5\1\0\2\5\6\0\4\5\1\355\22\5\26\0"+
    "\6\5\1\0\2\5\6\0\1\5\1\356\25\5\26\0"+
    "\6\5\1\0\2\5\6\0\10\5\1\357\16\5\26\0"+
    "\6\5\1\0\2\5\6\0\2\5\1\360\24\5\26\0"+
    "\6\5\1\0\2\5\6\0\22\5\1\361\4\5\26\0"+
    "\6\5\1\0\2\5\6\0\10\5\1\362\16\5\26\0"+
    "\6\5\1\0\2\5\6\0\1\363\26\5\26\0\6\5"+
    "\1\0\2\5\6\0\25\5\1\364\1\5\26\0\6\5"+
    "\1\0\2\5\6\0\5\5\1\365\21\5\26\0\6\5"+
    "\1\0\2\5\6\0\4\5\1\366\22\5\26\0\6\5"+
    "\1\0\2\5\6\0\16\5\1\367\10\5\26\0\6\5"+
    "\1\0\2\5\6\0\1\5\1\370\25\5\26\0\6\5"+
    "\1\0\2\5\6\0\2\5\1\371\24\5\26\0\6\5"+
    "\1\0\2\5\6\0\4\5\1\372\22\5\26\0\6\5"+
    "\1\0\2\5\6\0\13\5\1\373\13\5\26\0\6\5"+
    "\1\0\2\5\6\0\4\5\1\374\22\5\25\0\14\252"+
    "\1\375\57\252\1\0\6\5\1\0\2\5\6\0\7\5"+
    "\1\376\17\5\26\0\6\5\1\0\2\5\6\0\22\5"+
    "\1\377\4\5\26\0\6\5\1\0\2\5\6\0\11\5"+
    "\1\u0100\15\5\26\0\6\5\1\0\2\5\6\0\1\5"+
    "\1\u0101\25\5\26\0\6\5\1\0\2\5\6\0\3\5"+
    "\1\u0102\23\5\26\0\6\5\1\0\2\5\6\0\5\5"+
    "\1\u0103\21\5\26\0\6\5\1\0\2\5\6\0\6\5"+
    "\1\u0104\20\5\26\0\6\5\1\0\2\5\6\0\1\u0105"+
    "\26\5\26\0\6\5\1\0\2\5\6\0\2\5\1\u0106"+
    "\24\5\26\0\6\5\1\0\2\5\6\0\3\5\1\u0107"+
    "\23\5\26\0\6\5\1\0\2\5\6\0\4\5\1\u0108"+
    "\22\5\26\0\6\5\1\0\2\5\6\0\3\5\1\u0109"+
    "\23\5\26\0\6\5\1\0\2\5\6\0\5\5\1\u010a"+
    "\21\5\26\0\6\5\1\0\2\5\6\0\20\5\1\u010b"+
    "\6\5\26\0\6\5\1\0\2\5\6\0\13\5\1\u010c"+
    "\13\5\26\0\6\5\1\0\2\5\6\0\10\5\1\u010d"+
    "\16\5\26\0\6\5\1\0\2\5\6\0\7\5\1\u010e"+
    "\17\5\26\0\6\5\1\0\2\5\6\0\1\u010f\26\5"+
    "\26\0\6\5\1\0\2\5\6\0\2\5\1\u0110\24\5"+
    "\26\0\6\5\1\0\2\5\6\0\2\5\1\u0111\24\5"+
    "\26\0\6\5\1\0\2\5\6\0\1\5\1\u0112\25\5"+
    "\26\0\6\5\1\0\2\5\6\0\7\5\1\u0113\17\5"+
    "\26\0\6\5\1\0\2\5\6\0\7\5\1\u0114\17\5"+
    "\25\0\14\252\1\u0115\57\252\1\0\6\5\1\0\2\5"+
    "\6\0\1\u0116\26\5\26\0\6\5\1\0\2\5\6\0"+
    "\10\5\1\u0117\16\5\26\0\6\5\1\0\2\5\6\0"+
    "\1\u0118\26\5\26\0\6\5\1\0\2\5\6\0\12\5"+
    "\1\u0119\14\5\26\0\6\5\1\0\2\5\6\0\12\5"+
    "\1\u011a\14\5\26\0\6\5\1\0\2\5\6\0\14\5"+
    "\1\u011b\12\5\26\0\6\5\1\0\2\5\6\0\26\5"+
    "\1\u011c\26\0\6\5\1\0\2\5\6\0\20\5\1\u011d"+
    "\6\5\26\0\6\5\1\0\2\5\6\0\5\5\1\u011e"+
    "\21\5\26\0\6\5\1\0\2\5\6\0\21\5\1\u011f"+
    "\5\5\26\0\6\5\1\0\2\5\6\0\4\5\1\u0120"+
    "\22\5\26\0\6\5\1\0\2\5\6\0\1\5\1\u0121"+
    "\25\5\41\0\1\u0122\60\0\6\5\1\0\2\5\6\0"+
    "\7\5\1\u0123\17\5\26\0\6\5\1\0\2\5\6\0"+
    "\4\5\1\u0124\22\5\26\0\6\5\1\0\2\5\6\0"+
    "\5\5\1\u0125\21\5\26\0\6\5\1\0\2\5\6\0"+
    "\4\5\1\u0126\22\5\41\0\1\70\60\0\6\5\1\0"+
    "\2\5\6\0\1\5\1\u0127\25\5\26\0\6\5\1\0"+
    "\2\5\6\0\6\5\1\u0128\20\5\26\0\6\5\1\0"+
    "\2\5\6\0\14\5\1\u0129\12\5\26\0\6\5\1\0"+
    "\2\5\6\0\3\5\1\u012a\23\5\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\32\1\2\11\1\1\13\11"+
    "\1\0\2\1\1\0\1\1\1\11\1\0\1\1\1\0"+
    "\1\11\56\1\13\11\1\1\1\0\62\1\1\0\55\1"+
    "\1\0\44\1\1\0\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol symbol(int type) {
    	return new Symbol(type, yyline, yycolumn);
    }

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OcarinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Return an error message*/
            }
          case 93: break;
          case 2: 
            { return symbol(INTLITERAL, new BigInteger(yytext()));
            }
          case 94: break;
          case 3: 
            { return symbol(FLOATLITERAL, new BigDecimal(yytext()));
            }
          case 95: break;
          case 4: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 96: break;
          case 5: 
            { return symbol(DOT);
            }
          case 97: break;
          case 6: 
            { /*Do nothing*/
            }
          case 98: break;
          case 7: 
            { return symbol(MULT);
            }
          case 99: break;
          case 8: 
            { return symbol(PLUS);
            }
          case 100: break;
          case 9: 
            { return symbol(MINUS);
            }
          case 101: break;
          case 10: 
            { return symbol(EQUAL);
            }
          case 102: break;
          case 11: 
            { return symbol(GTHAN);
            }
          case 103: break;
          case 12: 
            { return symbol(BANG);
            }
          case 104: break;
          case 13: 
            { return symbol(POWER);
            }
          case 105: break;
          case 14: 
            { return symbol(DIV);
            }
          case 106: break;
          case 15: 
            { return symbol(LTHAN);
            }
          case 107: break;
          case 16: 
            { return symbol(LBRACKET);
            }
          case 108: break;
          case 17: 
            { return symbol(RBRACKET);
            }
          case 109: break;
          case 18: 
            { return symbol(LBRACE);
            }
          case 110: break;
          case 19: 
            { return symbol(RBRACE);
            }
          case 111: break;
          case 20: 
            { return symbol(LPAREN);
            }
          case 112: break;
          case 21: 
            { return symbol(RPAREN);
            }
          case 113: break;
          case 22: 
            { return symbol(SEMICOLON);
            }
          case 114: break;
          case 23: 
            { return symbol(COLON);
            }
          case 115: break;
          case 24: 
            { return symbol(AT);
            }
          case 116: break;
          case 25: 
            { return symbol(COMMA);
            }
          case 117: break;
          case 26: 
            { return symbol(MOD);
            }
          case 118: break;
          case 27: 
            { return symbol(INTLITERAL, new BigInteger(yytext(), 8));
            }
          case 119: break;
          case 28: 
            { return symbol(STRINGLITERAL, yytext());
            }
          case 120: break;
          case 29: 
            { return symbol(DO);
            }
          case 121: break;
          case 30: 
            { return symbol(IN);
            }
          case 122: break;
          case 31: 
            { return symbol(IF);
            }
          case 123: break;
          case 32: 
            { return symbol(OR);
            }
          case 124: break;
          case 33: 
            { return symbol(INCREMENT);
            }
          case 125: break;
          case 34: 
            { return symbol(DECREMENT);
            }
          case 126: break;
          case 35: 
            { return symbol(EQUALS);
            }
          case 127: break;
          case 36: 
            { return symbol(POINTER);
            }
          case 128: break;
          case 37: 
            { return symbol(GTHANE);
            }
          case 129: break;
          case 38: 
            { return symbol(AND);
            }
          case 130: break;
          case 39: 
            { return symbol(NAND);
            }
          case 131: break;
          case 40: 
            { return symbol(NOR);
            }
          case 132: break;
          case 41: 
            { return symbol(DIFFERS);
            }
          case 133: break;
          case 42: 
            { return symbol(LTHANE);
            }
          case 134: break;
          case 43: 
            { return symbol(INTLITERAL, new BigInteger(yytext().substring(2), 16));
            }
          case 135: break;
          case 44: 
            { return symbol(TRY);
            }
          case 136: break;
          case 45: 
            { return symbol(END);
            }
          case 137: break;
          case 46: 
            { return symbol(NIL);
            }
          case 138: break;
          case 47: 
            { return symbol(FOR);
            }
          case 139: break;
          case 48: 
            { return symbol(INT);
            }
          case 140: break;
          case 49: 
            { return symbol(VAR);
            }
          case 141: break;
          case 50: 
            { return symbol(SAGE);
            }
          case 142: break;
          case 51: 
            { return symbol(THIS);
            }
          case 143: break;
          case 52: 
            { return symbol(TRUE);
            }
          case 144: break;
          case 53: 
            { return symbol(EXEC);
            }
          case 145: break;
          case 54: 
            { return symbol(EXIT);
            }
          case 146: break;
          case 55: 
            { return symbol(ELSE);
            }
          case 147: break;
          case 56: 
            { return symbol(VOID);
            }
          case 148: break;
          case 57: 
            { return symbol(WITH);
            }
          case 149: break;
          case 58: 
            { return symbol(START);
            }
          case 150: break;
          case 59: 
            { return symbol(SUPER);
            }
          case 151: break;
          case 60: 
            { return symbol(THROW);
            }
          case 152: break;
          case 61: 
            { return symbol(DEBUG);
            }
          case 153: break;
          case 62: 
            { return symbol(CATCH);
            }
          case 154: break;
          case 63: 
            { return symbol(CLASS);
            }
          case 155: break;
          case 64: 
            { return symbol(CONST);
            }
          case 156: break;
          case 65: 
            { return symbol(FALSE);
            }
          case 157: break;
          case 66: 
            { return symbol(USING);
            }
          case 158: break;
          case 67: 
            { return symbol(UNTIL);
            }
          case 159: break;
          case 68: 
            { return symbol(BREAK);
            }
          case 160: break;
          case 69: 
            { return symbol(BEGIN);
            }
          case 161: break;
          case 70: 
            { return symbol(PRINT);
            }
          case 162: break;
          case 71: 
            { return symbol(WHILE);
            }
          case 163: break;
          case 72: 
            { return symbol(STATIC);
            }
          case 164: break;
          case 73: 
            { return symbol(STRING);
            }
          case 165: break;
          case 74: 
            { return symbol(TYPEOF);
            }
          case 166: break;
          case 75: 
            { return symbol(ASSERT);
            }
          case 167: break;
          case 76: 
            { return symbol(RATHER);
            }
          case 168: break;
          case 77: 
            { return symbol(RETURN);
            }
          case 169: break;
          case 78: 
            { return symbol(CREATE);
            }
          case 170: break;
          case 79: 
            { return symbol(LENGTH);
            }
          case 171: break;
          case 80: 
            { return symbol(UNLESS);
            }
          case 172: break;
          case 81: 
            { return symbol(PUBLIC);
            }
          case 173: break;
          case 82: 
            { return symbol(EXTENDS);
            }
          case 174: break;
          case 83: 
            { return symbol(FLOAT);
            }
          case 175: break;
          case 84: 
            { return symbol(FINALLY);
            }
          case 176: break;
          case 85: 
            { return symbol(FOREACH);
            }
          case 177: break;
          case 86: 
            { return symbol(BOOLEAN);
            }
          case 178: break;
          case 87: 
            { return symbol(HASHMAP);
            }
          case 179: break;
          case 88: 
            { return symbol(PRIVATE);
            }
          case 180: break;
          case 89: 
            { return symbol(CONTINUE);
            }
          case 181: break;
          case 90: 
            { return symbol(SUBROUTINE);
            }
          case 182: break;
          case 91: 
            { return symbol(PROTECTED);
            }
          case 183: break;
          case 92: 
            { return symbol(CONSTRUCTOR);
            }
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
