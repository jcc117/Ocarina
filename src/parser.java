
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 09 22:36:54 EDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.math.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 09 22:36:54 EDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\007\000\002\003\002\000\002\004\006" +
    "\000\002\004\007\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\002\000\002\011\010\000\002\011\011\000\002\011" +
    "\011\000\002\011\011\000\002\007\012\000\002\007\014" +
    "\000\002\007\014\000\002\007\012\000\002\007\013\000" +
    "\002\007\011\000\002\007\014\000\002\007\012\000\002" +
    "\007\013\000\002\007\015\000\002\007\015\000\002\007" +
    "\013\000\002\007\014\000\002\007\012\000\002\007\015" +
    "\000\002\007\013\000\002\030\004\000\002\030\002\000" +
    "\002\027\007\000\002\010\012\000\002\010\012\000\002" +
    "\010\011\000\002\010\012\000\002\012\004\000\002\012" +
    "\002\000\002\014\005\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\013\005\000\002\015\006\000" +
    "\002\015\004\000\002\035\005\000\002\035\002\000\002" +
    "\023\004\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\010" +
    "\000\002\016\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\005\000\002\016" +
    "\007\000\002\033\006\000\002\031\007\000\002\031\007" +
    "\000\002\032\005\000\002\032\002\000\002\017\003\000" +
    "\002\017\004\000\002\026\005\000\002\026\011\000\002" +
    "\026\010\000\002\026\007\000\002\026\007\000\002\026" +
    "\007\000\002\026\014\000\002\026\010\000\002\026\007" +
    "\000\002\026\007\000\002\026\006\000\002\026\011\000" +
    "\002\026\011\000\002\026\005\000\002\026\007\000\002" +
    "\026\007\000\002\026\004\000\002\026\004\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\026\003\000\002\026\004\000\002\026\006\000" +
    "\002\026\006\000\002\026\006\000\002\026\003\000\002" +
    "\036\007\000\002\036\012\000\002\037\011\000\002\037" +
    "\002\000\002\024\007\000\002\024\002\000\002\025\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\006\000\002\020\006\000\002\020\004\000\002" +
    "\020\003\000\002\020\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\020\004\000\002\020\005\000" +
    "\002\020\007\000\002\020\003\000\002\020\007\000\002" +
    "\020\010\000\002\020\003\000\002\020\004\000\002\020" +
    "\003\000\002\020\007\000\002\021\006\000\002\021\004" +
    "\000\002\034\005\000\002\034\002\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ee\000\004\006\004\001\002\000\004\130\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\125\011\001\002\000\112\010\uff6a\011\uff6a\012" +
    "\uff6a\014\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\066\uff6a\067\uff6a\076\uff6a\100\uff6a\101\uff6a\102" +
    "\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\110\uff6a" +
    "\111\uff6a\112\uff6a\113\uff6a\114\uff6a\116\uff6a\117\uff6a\120" +
    "\uff6a\121\uff6a\122\uff6a\123\uff6a\124\uff6a\125\uff6a\126\uff6a" +
    "\130\uff6a\001\002\000\030\002\ufffd\004\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\017\ufffd\020\ufffd\062\ufffd" +
    "\074\ufffd\001\002\000\030\002\ufff5\004\016\007\015\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\017\ufff5\020\ufff5\062\013" +
    "\074\ufff5\001\002\000\004\004\u01ed\001\002\000\004\002" +
    "\001\001\002\000\004\130\010\001\002\000\074\005\ufff9" +
    "\016\127\021\040\022\036\023\047\024\037\025\043\026" +
    "\041\027\042\030\051\031\123\033\120\035\135\036\134" +
    "\037\114\040\143\041\121\042\126\053\124\055\115\057" +
    "\122\061\142\063\132\064\112\065\140\070\131\073\117" +
    "\075\137\130\010\001\002\000\022\002\uffff\010\022\011" +
    "\027\012\024\013\031\017\026\020\021\074\025\001\002" +
    "\000\024\002\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\017\ufff6\020\ufff6\074\ufff6\001\002\000\024\021\040" +
    "\022\036\023\047\024\037\025\043\026\041\027\042\030" +
    "\051\130\010\001\002\000\012\013\u01ba\017\u01b8\020\u01b9" +
    "\074\u01b7\001\002\000\024\002\ufff7\005\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\017\ufff7\020\ufff7\074\ufff7\001\002" +
    "\000\012\013\u0190\017\u018e\020\u018f\074\u018d\001\002\000" +
    "\004\130\010\001\002\000\004\013\u017a\001\002\000\012" +
    "\013\u0153\017\u0151\020\u0152\074\u0150\001\002\000\024\002" +
    "\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\017\ufff8" +
    "\020\ufff8\074\ufff8\001\002\000\004\130\010\001\002\000" +
    "\006\014\033\126\034\001\002\000\004\130\010\001\002" +
    "\000\046\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074\uffd8\130\uffd8\001" +
    "\002\000\046\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\015\uffdf\017\uffdf\020\uffdf\021\040\022\036\023\047\024" +
    "\037\025\043\026\041\027\042\030\051\074\uffdf\130\010" +
    "\001\002\000\074\010\uffcc\011\uffcc\012\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\076\uffcc\100\uffcc" +
    "\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\110\uffcc\111" +
    "\uffcc\112\uffcc\113\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc" +
    "\123\uffcc\124\uffcc\125\uffcc\126\uffcc\130\uffcc\001\002\000" +
    "\074\010\uffca\011\uffca\012\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\076\uffca\100\uffca\101\uffca\102" +
    "\uffca\103\uffca\104\uffca\105\uffca\110\uffca\111\uffca\112\uffca" +
    "\113\uffca\116\uffca\117\uffca\120\uffca\121\uffca\123\uffca\124" +
    "\uffca\125\uffca\126\uffca\130\uffca\001\002\000\074\010\uffc6" +
    "\011\uffc6\012\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\076\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6" +
    "\104\uffc6\105\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\116" +
    "\uffc6\117\uffc6\120\uffc6\121\uffc6\123\uffc6\124\uffc6\125\uffc6" +
    "\126\uffc6\130\uffc6\001\002\000\074\010\uffc9\011\uffc9\012" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\076\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\116\uffc9\117\uffc9" +
    "\120\uffc9\121\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9\130" +
    "\uffc9\001\002\000\074\010\uffc5\011\uffc5\012\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\076\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\110\uffc5" +
    "\111\uffc5\112\uffc5\113\uffc5\116\uffc5\117\uffc5\120\uffc5\121" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\130\uffc5\001\002" +
    "\000\004\120\u0145\001\002\000\074\010\uffb9\011\uffb9\012" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\116\uffb9\117\uffb9" +
    "\120\uffb9\121\uffb9\123\uffb9\124\067\125\uffb9\126\uffb9\130" +
    "\uffb9\001\002\000\046\005\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\074\uffd9" +
    "\130\uffd9\001\002\000\014\010\u013c\011\u013d\012\u013a\116" +
    "\064\130\010\001\002\000\074\010\uffcb\011\uffcb\012\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\076" +
    "\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb" +
    "\110\uffcb\111\uffcb\112\uffcb\113\uffcb\116\uffcb\117\uffcb\120" +
    "\uffcb\121\uffcb\123\uffcb\124\uffcb\125\uffcb\126\uffcb\130\uffcb" +
    "\001\002\000\024\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\015\072\017\ufff5\020\ufff5\074\ufff5\001\002\000\020" +
    "\020\055\022\060\023\056\024\057\026\053\027\052\130" +
    "\010\001\002\000\074\010\uffc4\011\uffc4\012\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\076\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\116\uffc4\117\uffc4\120\uffc4\121" +
    "\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\130\uffc4\001\002" +
    "\000\074\010\uffc0\011\uffc0\012\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\076\uffc0\100\uffc0\101\uffc0" +
    "\102\uffc0\103\uffc0\104\uffc0\105\uffc0\110\uffc0\111\uffc0\112" +
    "\uffc0\113\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0\123\uffc0" +
    "\124\uffc0\125\uffc0\126\uffc0\130\uffc0\001\002\000\074\010" +
    "\uffb9\011\uffb9\012\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9" +
    "\116\uffb9\117\uffb9\120\uffb9\121\uffb9\123\uffb9\124\067\125" +
    "\uffb9\126\uffb9\130\uffb9\001\002\000\004\120\061\001\002" +
    "\000\074\010\uffc2\011\uffc2\012\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\076\uffc2\100\uffc2\101\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\105\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\113\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\123\uffc2" +
    "\124\uffc2\125\uffc2\126\uffc2\130\uffc2\001\002\000\074\010" +
    "\uffc1\011\uffc1\012\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\076\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\104\uffc1\105\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1" +
    "\116\uffc1\117\uffc1\120\uffc1\121\uffc1\123\uffc1\124\uffc1\125" +
    "\uffc1\126\uffc1\130\uffc1\001\002\000\074\010\uffc3\011\uffc3" +
    "\012\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\076\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\116\uffc3\117" +
    "\uffc3\120\uffc3\121\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3" +
    "\130\uffc3\001\002\000\024\021\040\022\036\023\047\024" +
    "\037\025\043\026\041\027\042\030\051\130\010\001\002" +
    "\000\006\116\064\121\063\001\002\000\074\010\uffbe\011" +
    "\uffbe\012\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\076\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104" +
    "\uffbe\105\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\116\uffbe" +
    "\117\uffbe\120\uffbe\121\uffbe\123\uffbe\124\uffbe\125\uffbe\126" +
    "\uffbe\130\uffbe\001\002\000\004\117\065\001\002\000\074" +
    "\010\uffcd\011\uffcd\012\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\076\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\105\uffcd\110\uffcd\111\uffcd\112\uffcd\113" +
    "\uffcd\116\uffcd\117\uffcd\120\uffcd\121\uffcd\123\uffcd\124\uffcd" +
    "\125\uffcd\126\uffcd\130\uffcd\001\002\000\074\010\uffbf\011" +
    "\uffbf\012\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\076\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104" +
    "\uffbf\105\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\116\uffbf" +
    "\117\uffbf\120\uffbf\121\uffbf\123\uffbf\124\uffbf\125\uffbf\126" +
    "\uffbf\130\uffbf\001\002\000\004\130\010\001\002\000\104" +
    "\010\uffb9\011\uffb9\012\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\066\uffb9\067\uffb9\076\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107" +
    "\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\116\uffb9\117\uffb9" +
    "\120\uffb9\121\uffb9\123\uffb9\124\067\125\uffb9\126\uffb9\130" +
    "\uffb9\001\002\000\104\010\uffba\011\uffba\012\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\066\uffba\067" +
    "\uffba\076\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba" +
    "\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113" +
    "\uffba\116\uffba\117\uffba\120\uffba\121\uffba\123\uffba\124\uffba" +
    "\125\uffba\126\uffba\130\uffba\001\002\000\004\122\077\001" +
    "\002\000\024\005\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\074\uffe0\001\002\000\022\005" +
    "\075\010\022\011\027\012\024\013\031\017\026\020\021" +
    "\074\025\001\002\000\024\002\uffeb\005\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\017\uffeb\020\uffeb\074\uffeb\001\002" +
    "\000\004\126\111\001\002\000\026\021\040\022\036\023" +
    "\047\024\037\025\043\026\041\027\042\030\051\123\101" +
    "\130\010\001\002\000\006\116\064\130\010\001\002\000" +
    "\004\126\uffd1\001\002\000\006\076\103\123\uffcf\001\002" +
    "\000\024\021\040\022\036\023\047\024\037\025\043\026" +
    "\041\027\042\030\051\130\010\001\002\000\004\123\105" +
    "\001\002\000\004\126\uffd2\001\002\000\006\076\103\123" +
    "\uffcf\001\002\000\004\123\uffd0\001\002\000\006\076\uffce" +
    "\123\uffce\001\002\000\074\005\ufff9\016\127\021\040\022" +
    "\036\023\047\024\037\025\043\026\041\027\042\030\051" +
    "\031\123\033\120\035\135\036\134\037\114\040\143\041" +
    "\121\042\126\053\124\055\115\057\122\061\142\063\132" +
    "\064\112\065\140\070\131\073\117\075\137\130\010\001" +
    "\002\000\004\125\u0139\001\002\000\134\005\uffb8\016\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\061\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\070\uffb8\071\uffb8\072\uffb8\073" +
    "\uffb8\075\uffb8\101\uffb8\115\uffb8\121\uffb8\122\uffb8\123\uffb8" +
    "\127\uffb8\130\uffb8\131\uffb8\132\uffb8\001\002\000\004\122" +
    "\u0130\001\002\000\004\122\u012c\001\002\000\020\106\uffb9" +
    "\107\uffb9\114\u011a\116\u011b\120\u0118\124\067\130\uffb9\001" +
    "\002\000\006\053\u0113\130\010\001\002\000\074\005\ufff9" +
    "\016\127\021\040\022\036\023\047\024\037\025\043\026" +
    "\041\027\042\030\051\031\123\033\120\035\135\036\134" +
    "\037\114\040\143\041\121\042\126\053\124\055\115\057" +
    "\122\061\142\063\132\064\112\065\140\070\131\073\117" +
    "\075\137\130\010\001\002\000\036\025\163\051\153\052" +
    "\165\053\156\054\155\056\161\065\140\101\166\115\167" +
    "\122\154\127\160\130\010\131\164\132\157\001\002\000" +
    "\004\122\u0108\001\002\000\036\025\163\051\153\052\165" +
    "\053\156\054\155\056\161\065\140\101\166\115\167\122" +
    "\154\127\160\130\010\131\164\132\157\001\002\000\010" +
    "\106\uffb9\107\uffb9\124\067\001\002\000\106\005\ufff9\016" +
    "\127\021\040\022\036\023\047\024\037\025\043\026\041" +
    "\027\042\030\051\031\123\032\ufff9\033\120\034\ufff9\035" +
    "\135\036\134\037\114\040\143\041\121\042\126\053\124" +
    "\055\115\057\122\061\142\063\132\064\112\065\140\070" +
    "\131\071\ufff9\072\ufff9\073\117\075\137\121\ufff9\130\010" +
    "\001\002\000\036\025\163\051\153\052\165\053\156\054" +
    "\155\056\161\065\140\101\166\115\167\122\154\127\160" +
    "\130\010\131\164\132\157\001\002\000\004\122\357\001" +
    "\002\000\134\005\uffa0\016\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\061\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\073\uffa0\075\uffa0\101\uffa0\115" +
    "\uffa0\121\uffa0\122\uffa0\123\uffa0\127\uffa0\130\uffa0\131\uffa0" +
    "\132\uffa0\001\002\000\004\126\340\001\002\000\004\125" +
    "\337\001\002\000\134\005\uff9b\016\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\061\uff9b\063\uff9b\064\uff9b" +
    "\065\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\075\uff9b\101" +
    "\uff9b\115\uff9b\121\uff9b\122\uff9b\123\uff9b\127\uff9b\130\uff9b" +
    "\131\uff9b\132\uff9b\001\002\000\036\025\163\051\153\052" +
    "\165\053\156\054\155\056\161\065\140\101\166\115\167" +
    "\122\154\127\160\130\010\131\164\132\157\001\002\000" +
    "\036\025\163\051\153\052\165\053\156\054\155\056\161" +
    "\065\140\101\166\115\167\122\154\127\160\130\010\131" +
    "\164\132\157\001\002\000\004\005\326\001\002\000\070" +
    "\016\127\021\040\022\036\023\047\024\037\025\043\026" +
    "\041\027\042\030\051\031\123\033\120\035\135\036\134" +
    "\037\114\040\143\041\121\042\126\053\124\055\115\057" +
    "\122\061\142\063\132\064\112\065\140\070\131\073\117" +
    "\130\010\001\002\000\006\053\316\130\010\001\002\000" +
    "\004\125\314\001\002\000\004\122\310\001\002\000\074" +
    "\005\ufff9\016\127\021\040\022\036\023\047\024\037\025" +
    "\043\026\041\027\042\030\051\031\123\033\120\035\135" +
    "\036\134\037\114\040\143\041\121\042\126\053\124\055" +
    "\115\057\122\061\142\063\132\064\112\065\140\070\131" +
    "\073\117\075\137\130\010\001\002\000\006\116\064\130" +
    "\010\001\002\000\006\114\147\125\146\001\002\000\134" +
    "\005\uffd3\016\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\061\uffd3\063\uffd3\064\uffd3\065\uffd3\070\uffd3\071" +
    "\uffd3\072\uffd3\073\uffd3\075\uffd3\101\uffd3\115\uffd3\121\uffd3" +
    "\122\uffd3\123\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\001" +
    "\002\000\036\025\163\051\153\052\165\053\156\054\155" +
    "\056\161\065\140\101\166\115\167\122\154\127\160\130" +
    "\010\131\164\132\157\001\002\000\064\043\uff70\044\uff70" +
    "\045\uff70\046\uff70\047\uff70\050\uff70\076\uff70\100\uff70\101" +
    "\uff70\102\uff70\103\uff70\104\uff70\105\uff70\110\uff70\111\uff70" +
    "\112\uff70\113\uff70\116\uff70\117\uff70\120\uff70\121\uff70\123" +
    "\uff70\124\uff70\125\uff70\126\uff70\001\002\000\064\043\uff80" +
    "\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\076\uff80\100" +
    "\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\110\uff80" +
    "\111\uff80\112\uff80\113\uff80\116\uff80\117\uff80\120\uff80\121" +
    "\uff80\123\uff80\124\uff80\125\uff80\126\uff80\001\002\000\066" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\067" +
    "\uffb9\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\105\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\116\uffb9\117" +
    "\uffb9\120\uffb9\121\uffb9\123\uffb9\124\067\125\uffb9\126\uffb9" +
    "\001\002\000\064\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047" +
    "\uff7c\050\uff7c\076\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c" +
    "\104\uff7c\105\uff7c\110\uff7c\111\uff7c\112\uff7c\113\uff7c\116" +
    "\uff7c\117\uff7c\120\uff7c\121\uff7c\123\uff7c\124\uff7c\125\uff7c" +
    "\126\uff7c\001\002\000\040\025\163\051\153\052\165\053" +
    "\156\054\155\056\161\065\140\101\166\115\167\122\154" +
    "\123\265\127\160\130\010\131\164\132\157\001\002\000" +
    "\064\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a" +
    "\076\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105" +
    "\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a\116\uff7a\117\uff7a" +
    "\120\uff7a\121\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a\001" +
    "\002\000\064\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75" +
    "\050\uff75\076\uff75\100\uff75\101\uff75\102\uff75\103\uff75\104" +
    "\uff75\105\uff75\110\uff75\111\uff75\112\uff75\113\uff75\116\uff75" +
    "\117\uff75\120\uff75\121\uff75\123\uff75\124\uff75\125\uff75\126" +
    "\uff75\001\002\000\064\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\050\uff7d\076\uff7d\100\uff7d\101\uff7d\102\uff7d\103" +
    "\uff7d\104\uff7d\105\uff7d\110\uff7d\111\uff7d\112\uff7d\113\uff7d" +
    "\116\uff7d\117\uff7d\120\uff7d\121\uff7d\123\uff7d\124\uff7d\125" +
    "\uff7d\126\uff7d\001\002\000\064\043\uff72\044\uff72\045\uff72" +
    "\046\uff72\047\uff72\050\uff72\076\uff72\100\uff72\101\uff72\102" +
    "\uff72\103\uff72\104\uff72\105\uff72\110\uff72\111\uff72\112\uff72" +
    "\113\uff72\116\uff72\117\uff72\120\uff72\121\uff72\123\uff72\124" +
    "\uff72\125\uff72\126\uff72\001\002\000\024\021\040\022\036" +
    "\023\047\024\037\025\043\026\041\027\042\030\051\130" +
    "\010\001\002\000\052\043\177\044\201\045\213\046\202" +
    "\047\206\050\203\100\200\101\215\102\207\103\211\104" +
    "\220\105\176\110\212\111\217\112\214\113\210\116\205" +
    "\120\204\124\216\125\254\001\002\000\004\120\247\001" +
    "\002\000\064\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e" +
    "\050\uff7e\076\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104" +
    "\uff7e\105\uff7e\110\uff7e\111\uff7e\112\uff7e\113\uff7e\116\uff7e" +
    "\117\uff7e\120\uff7e\121\uff7e\123\uff7e\124\uff7e\125\uff7e\126" +
    "\uff7e\001\002\000\064\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\076\uff7b\100\uff7b\101\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\105\uff7b\110\uff7b\111\uff7b\112\uff7b\113\uff7b" +
    "\116\uff7b\117\uff7b\120\uff7b\121\uff7b\123\uff7b\124\uff7b\125" +
    "\uff7b\126\uff7b\001\002\000\036\025\163\051\153\052\165" +
    "\053\156\054\155\056\161\065\140\101\166\115\167\122" +
    "\154\127\160\130\010\131\164\132\157\001\002\000\036" +
    "\025\163\051\153\052\165\053\156\054\155\056\161\065" +
    "\140\101\166\115\167\122\154\127\160\130\010\131\164" +
    "\132\157\001\002\000\004\077\171\001\002\000\004\120" +
    "\172\001\002\000\074\016\127\021\040\022\036\023\047" +
    "\024\037\025\043\026\041\027\042\030\051\031\123\033" +
    "\120\035\135\036\134\037\114\040\143\041\121\042\126" +
    "\053\124\055\115\057\122\061\142\063\132\064\112\065" +
    "\140\070\131\073\117\075\137\121\ufff9\130\010\001\002" +
    "\000\004\121\174\001\002\000\064\043\uff6f\044\uff6f\045" +
    "\uff6f\046\uff6f\047\uff6f\050\uff6f\076\uff6f\100\uff6f\101\uff6f" +
    "\102\uff6f\103\uff6f\104\uff6f\105\uff6f\110\uff6f\111\uff6f\112" +
    "\uff6f\113\uff6f\116\uff6f\117\uff6f\120\uff6f\121\uff6f\123\uff6f" +
    "\124\uff6f\125\uff6f\126\uff6f\001\002\000\064\043\177\044" +
    "\201\045\213\046\202\047\206\050\203\076\uff78\100\200" +
    "\101\215\102\207\103\211\104\220\105\176\110\212\111" +
    "\217\112\214\113\210\116\205\117\uff78\120\204\121\uff78" +
    "\123\uff78\124\216\125\uff78\126\uff78\001\002\000\036\025" +
    "\163\051\153\052\165\053\156\054\155\056\161\065\140" +
    "\101\166\115\167\122\154\127\160\130\010\131\164\132" +
    "\157\001\002\000\036\025\163\051\153\052\165\053\156" +
    "\054\155\056\161\065\140\101\166\115\167\122\154\127" +
    "\160\130\010\131\164\132\157\001\002\000\036\025\163" +
    "\051\153\052\165\053\156\054\155\056\161\065\140\101" +
    "\166\115\167\122\154\127\160\130\010\131\164\132\157" +
    "\001\002\000\036\025\163\051\153\052\165\053\156\054" +
    "\155\056\161\065\140\101\166\115\167\122\154\127\160" +
    "\130\010\131\164\132\157\001\002\000\036\025\163\051" +
    "\153\052\165\053\156\054\155\056\161\065\140\101\166" +
    "\115\167\122\154\127\160\130\010\131\164\132\157\001" +
    "\002\000\036\025\163\051\153\052\165\053\156\054\155" +
    "\056\161\065\140\101\166\115\167\122\154\127\160\130" +
    "\010\131\164\132\157\001\002\000\036\025\163\051\153" +
    "\052\165\053\156\054\155\056\161\065\140\101\166\115" +
    "\167\122\154\127\160\130\010\131\164\132\157\001\002" +
    "\000\036\025\163\051\153\052\165\053\156\054\155\056" +
    "\161\065\140\101\166\115\167\122\154\127\160\130\010" +
    "\131\164\132\157\001\002\000\036\025\163\051\153\052" +
    "\165\053\156\054\155\056\161\065\140\101\166\115\167" +
    "\122\154\127\160\130\010\131\164\132\157\001\002\000" +
    "\036\025\163\051\153\052\165\053\156\054\155\056\161" +
    "\065\140\101\166\115\167\122\154\127\160\130\010\131" +
    "\164\132\157\001\002\000\036\025\163\051\153\052\165" +
    "\053\156\054\155\056\161\065\140\101\166\115\167\122" +
    "\154\127\160\130\010\131\164\132\157\001\002\000\036" +
    "\025\163\051\153\052\165\053\156\054\155\056\161\065" +
    "\140\101\166\115\167\122\154\127\160\130\010\131\164" +
    "\132\157\001\002\000\036\025\163\051\153\052\165\053" +
    "\156\054\155\056\161\065\140\101\166\115\167\122\154" +
    "\127\160\130\010\131\164\132\157\001\002\000\036\025" +
    "\163\051\153\052\165\053\156\054\155\056\161\065\140" +
    "\101\166\115\167\122\154\127\160\130\010\131\164\132" +
    "\157\001\002\000\036\025\163\051\153\052\165\053\156" +
    "\054\155\056\161\065\140\101\166\115\167\122\154\127" +
    "\160\130\010\131\164\132\157\001\002\000\036\025\163" +
    "\051\153\052\165\053\156\054\155\056\161\065\140\101" +
    "\166\115\167\122\154\127\160\130\010\131\164\132\157" +
    "\001\002\000\004\060\223\001\002\000\036\025\163\051" +
    "\153\052\165\053\156\054\155\056\161\065\140\101\166" +
    "\115\167\122\154\127\160\130\010\131\164\132\157\001" +
    "\002\000\036\025\163\051\153\052\165\053\156\054\155" +
    "\056\161\065\140\101\166\115\167\122\154\127\160\130" +
    "\010\131\164\132\157\001\002\000\064\043\177\044\201" +
    "\045\213\046\202\047\206\050\203\076\uff8a\100\200\101" +
    "\215\102\uff8a\103\uff8a\104\uff8a\105\uff8a\110\212\111\217" +
    "\112\214\113\210\116\uff8a\117\uff8a\120\uff8a\121\uff8a\123" +
    "\uff8a\124\uff8a\125\uff8a\126\uff8a\001\002\000\064\043\uff86" +
    "\044\uff86\045\uff86\046\uff86\047\206\050\203\076\uff86\100" +
    "\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86\110\uff86" +
    "\111\uff86\112\uff86\113\uff86\116\uff86\117\uff86\120\uff86\121" +
    "\uff86\123\uff86\124\uff86\125\uff86\126\uff86\001\002\000\064" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\076" +
    "\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f" +
    "\110\uff7f\111\uff7f\112\uff7f\113\uff7f\116\uff7f\117\uff7f\120" +
    "\uff7f\121\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f\001\002" +
    "\000\064\043\177\044\201\045\213\046\202\047\206\050" +
    "\203\076\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c" +
    "\105\uff8c\110\212\111\217\112\214\113\210\116\uff8c\117" +
    "\uff8c\120\uff8c\121\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c" +
    "\001\002\000\064\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\206\050\203\076\uff84\100\uff84\101\uff84\102\uff84\103\uff84" +
    "\104\uff84\105\uff84\110\uff84\111\uff84\112\uff84\113\uff84\116" +
    "\uff84\117\uff84\120\uff84\121\uff84\123\uff84\124\uff84\125\uff84" +
    "\126\uff84\001\002\000\064\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\206\050\203\076\uff91\100\uff91\101\uff91\102\uff91" +
    "\103\uff91\104\uff91\105\uff91\110\212\111\217\112\214\113" +
    "\210\116\uff91\117\uff91\120\uff91\121\uff91\123\uff91\124\uff91" +
    "\125\uff91\126\uff91\001\002\000\064\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\206\050\203\076\uff87\100\uff87\101\uff87" +
    "\102\uff87\103\uff87\104\uff87\105\uff87\110\uff87\111\uff87\112" +
    "\uff87\113\uff87\116\uff87\117\uff87\120\uff87\121\uff87\123\uff87" +
    "\124\uff87\125\uff87\126\uff87\001\002\000\064\043\177\044" +
    "\201\045\213\046\202\047\206\050\203\076\uff89\100\200" +
    "\101\215\102\uff89\103\uff89\104\uff89\105\uff89\110\212\111" +
    "\217\112\214\113\210\116\uff89\117\uff89\120\uff89\121\uff89" +
    "\123\uff89\124\uff89\125\uff89\126\uff89\001\002\000\064\043" +
    "\uff85\044\uff85\045\uff85\046\uff85\047\206\050\203\076\uff85" +
    "\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\110" +
    "\uff85\111\uff85\112\uff85\113\uff85\116\uff85\117\uff85\120\uff85" +
    "\121\uff85\123\uff85\124\uff85\125\uff85\126\uff85\001\002\000" +
    "\064\043\177\044\201\045\213\046\202\047\206\050\203" +
    "\076\uff8b\100\200\101\215\102\uff8b\103\uff8b\104\uff8b\105" +
    "\uff8b\110\212\111\217\112\214\113\210\116\uff8b\117\uff8b" +
    "\120\uff8b\121\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\001" +
    "\002\000\064\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f" +
    "\050\uff8f\076\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104" +
    "\uff8f\105\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\116\uff8f" +
    "\117\uff8f\120\uff8f\121\uff8f\123\uff8f\124\uff8f\125\uff8f\126" +
    "\uff8f\001\002\000\052\043\177\044\201\045\213\046\202" +
    "\047\206\050\203\100\200\101\215\102\207\103\211\104" +
    "\220\105\176\110\212\111\217\112\214\113\210\116\205" +
    "\117\235\120\204\124\216\001\002\000\064\043\uff82\044" +
    "\uff82\045\uff82\046\uff82\047\uff82\050\uff82\076\uff82\100\uff82" +
    "\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\110\uff82\111" +
    "\uff82\112\uff82\113\uff82\116\uff82\117\uff82\120\uff82\121\uff82" +
    "\123\uff82\124\uff82\125\uff82\126\uff82\001\002\000\052\043" +
    "\177\044\201\045\213\046\202\047\206\050\203\100\200" +
    "\101\215\102\207\103\211\104\220\105\176\110\212\111" +
    "\217\112\214\113\210\116\205\120\204\121\237\124\216" +
    "\001\002\000\064\043\uff83\044\uff83\045\uff83\046\uff83\047" +
    "\uff83\050\uff83\076\uff83\100\uff83\101\uff83\102\uff83\103\uff83" +
    "\104\uff83\105\uff83\110\uff83\111\uff83\112\uff83\113\uff83\116" +
    "\uff83\117\uff83\120\uff83\121\uff83\123\uff83\124\uff83\125\uff83" +
    "\126\uff83\001\002\000\064\043\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\076\uff8e\100\uff8e\101\uff8e\102\uff8e" +
    "\103\uff8e\104\uff8e\105\uff8e\110\uff8e\111\uff8e\112\uff8e\113" +
    "\uff8e\116\uff8e\117\uff8e\120\uff8e\121\uff8e\123\uff8e\124\uff8e" +
    "\125\uff8e\126\uff8e\001\002\000\064\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\047\206\050\203\076\uff90\100\uff90\101\uff90" +
    "\102\uff90\103\uff90\104\uff90\105\uff90\110\212\111\217\112" +
    "\214\113\210\116\uff90\117\uff90\120\uff90\121\uff90\123\uff90" +
    "\124\uff90\125\uff90\126\uff90\001\002\000\064\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\206\050\203\076\uff92\100\uff92" +
    "\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92\110\212\111" +
    "\217\112\214\113\210\116\uff92\117\uff92\120\uff92\121\uff92" +
    "\123\uff92\124\uff92\125\uff92\126\uff92\001\002\000\064\043" +
    "\177\044\201\045\213\046\202\047\206\050\203\076\uff8d" +
    "\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\110" +
    "\212\111\217\112\214\113\210\116\uff8d\117\uff8d\120\uff8d" +
    "\121\uff8d\123\uff8d\124\uff8d\125\uff8d\126\uff8d\001\002\000" +
    "\064\043\uff93\044\uff93\045\uff93\046\uff93\047\206\050\203" +
    "\076\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105" +
    "\uff93\110\212\111\217\112\214\113\210\116\uff93\117\uff93" +
    "\120\uff93\121\uff93\123\uff93\124\uff93\125\uff93\126\uff93\001" +
    "\002\000\064\043\177\044\201\045\213\046\202\047\206" +
    "\050\203\076\uff88\100\200\101\215\102\uff88\103\uff88\104" +
    "\uff88\105\uff88\110\212\111\217\112\214\113\210\116\uff88" +
    "\117\uff88\120\uff88\121\uff88\123\uff88\124\uff88\125\uff88\126" +
    "\uff88\001\002\000\064\043\177\044\201\045\213\046\202" +
    "\047\206\050\203\076\uff71\100\uff71\101\uff71\102\uff71\103" +
    "\uff71\104\uff71\105\uff71\110\212\111\217\112\214\113\210" +
    "\116\uff71\117\uff71\120\uff71\121\uff71\123\uff71\124\uff71\125" +
    "\uff71\126\uff71\001\002\000\024\021\040\022\036\023\047" +
    "\024\037\025\043\026\041\027\042\030\051\130\010\001" +
    "\002\000\006\076\251\116\064\001\002\000\024\021\040" +
    "\022\036\023\047\024\037\025\043\026\041\027\042\030" +
    "\051\130\010\001\002\000\006\116\064\121\253\001\002" +
    "\000\064\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050" +
    "\uff73\076\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73" +
    "\105\uff73\110\uff73\111\uff73\112\uff73\113\uff73\116\uff73\117" +
    "\uff73\120\uff73\121\uff73\123\uff73\124\uff73\125\uff73\126\uff73" +
    "\001\002\000\134\005\uffad\016\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\061\uffad\063\uffad\064\uffad\065" +
    "\uffad\070\uffad\071\uffad\072\uffad\073\uffad\075\uffad\101\uffad" +
    "\115\uffad\121\uffad\122\uffad\123\uffad\127\uffad\130\uffad\131" +
    "\uffad\132\uffad\001\002\000\010\116\uffb9\122\264\124\067" +
    "\001\002\000\004\116\257\001\002\000\040\025\163\051" +
    "\153\052\165\053\156\054\155\056\161\065\140\101\166" +
    "\115\167\117\260\122\154\127\160\130\010\131\164\132" +
    "\157\001\002\000\006\116\uffcd\122\264\001\002\000\052" +
    "\043\177\044\201\045\213\046\202\047\206\050\203\100" +
    "\200\101\215\102\207\103\211\104\220\105\176\110\212" +
    "\111\217\112\214\113\210\116\205\117\262\120\204\124" +
    "\216\001\002\000\064\043\uff74\044\uff74\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\076\uff74\100\uff74\101\uff74\102\uff74\103" +
    "\uff74\104\uff74\105\uff74\110\uff74\111\uff74\112\uff74\113\uff74" +
    "\116\uff74\117\uff74\120\uff74\121\uff74\123\uff74\124\uff74\125" +
    "\uff74\126\uff74\001\002\000\064\043\uff76\044\uff76\045\uff76" +
    "\046\uff76\047\uff76\050\uff76\076\uff76\100\uff76\101\uff76\102" +
    "\uff76\103\uff76\104\uff76\105\uff76\110\uff76\111\uff76\112\uff76" +
    "\113\uff76\116\uff76\117\uff76\120\uff76\121\uff76\123\uff76\124" +
    "\uff76\125\uff76\126\uff76\001\002\000\040\025\163\051\153" +
    "\052\165\053\156\054\155\056\161\065\140\101\166\115" +
    "\167\122\154\123\265\127\160\130\010\131\164\132\157" +
    "\001\002\000\066\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047" +
    "\uff6d\050\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d" +
    "\103\uff6d\104\uff6d\105\uff6d\110\uff6d\111\uff6d\112\uff6d\113" +
    "\uff6d\116\uff6d\117\uff6d\120\uff6d\121\uff6d\123\uff6d\124\uff6d" +
    "\125\uff6d\126\uff6d\001\002\000\054\043\177\044\201\045" +
    "\213\046\202\047\206\050\203\076\267\100\200\101\215" +
    "\102\207\103\211\104\220\105\176\110\212\111\217\112" +
    "\214\113\210\116\205\120\204\123\uff6b\124\216\001\002" +
    "\000\036\025\163\051\153\052\165\053\156\054\155\056" +
    "\161\065\140\101\166\115\167\122\154\127\160\130\010" +
    "\131\164\132\157\001\002\000\004\123\271\001\002\000" +
    "\066\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e" +
    "\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104" +
    "\uff6e\105\uff6e\110\uff6e\111\uff6e\112\uff6e\113\uff6e\116\uff6e" +
    "\117\uff6e\120\uff6e\121\uff6e\123\uff6e\124\uff6e\125\uff6e\126" +
    "\uff6e\001\002\000\054\043\177\044\201\045\213\046\202" +
    "\047\206\050\203\076\267\100\200\101\215\102\207\103" +
    "\211\104\220\105\176\110\212\111\217\112\214\113\210" +
    "\116\205\120\204\123\uff6b\124\216\001\002\000\004\123" +
    "\uff6c\001\002\000\074\010\uffc7\011\uffc7\012\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\076\uffc7\100" +
    "\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\113\uffc7\116\uffc7\117\uffc7\120\uffc7\121" +
    "\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7\130\uffc7\001\002" +
    "\000\064\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050" +
    "\uff77\076\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77" +
    "\105\uff77\110\uff77\111\uff77\112\uff77\113\uff77\116\uff77\117" +
    "\uff77\120\uff77\121\uff77\123\uff77\124\uff77\125\uff77\126\uff77" +
    "\001\002\000\054\043\177\044\201\045\213\046\202\047" +
    "\206\050\203\076\267\100\200\101\215\102\207\103\211" +
    "\104\220\105\176\110\212\111\217\112\214\113\210\116" +
    "\205\120\204\123\277\124\216\001\002\000\064\043\uff79" +
    "\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\076\uff79\100" +
    "\uff79\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79\110\uff79" +
    "\111\uff79\112\uff79\113\uff79\116\uff79\117\uff79\120\uff79\121" +
    "\uff79\123\uff79\124\uff79\125\uff79\126\uff79\001\002\000\066" +
    "\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\067" +
    "\301\076\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104\uff81" +
    "\105\uff81\110\uff81\111\uff81\112\uff81\113\uff81\116\uff81\117" +
    "\uff81\120\uff81\121\uff81\123\uff81\124\uff81\125\uff81\126\uff81" +
    "\001\002\000\024\021\040\022\036\023\047\024\037\025" +
    "\043\026\041\027\042\030\051\130\010\001\002\000\064" +
    "\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\076" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd" +
    "\110\uffbd\111\uffbd\112\uffbd\113\uffbd\116\064\117\uffbd\120" +
    "\uffbd\121\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\001\002" +
    "\000\004\005\304\001\002\000\004\036\305\001\002\000" +
    "\036\025\163\051\153\052\165\053\156\054\155\056\161" +
    "\065\140\101\166\115\167\122\154\127\160\130\010\131" +
    "\164\132\157\001\002\000\052\043\177\044\201\045\213" +
    "\046\202\047\206\050\203\100\200\101\215\102\207\103" +
    "\211\104\220\105\176\110\212\111\217\112\214\113\210" +
    "\116\205\120\204\124\216\125\307\001\002\000\134\005" +
    "\uffaf\016\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\075\uffaf\101\uffaf\115\uffaf\121\uffaf\122" +
    "\uffaf\123\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf\001\002" +
    "\000\036\025\163\051\153\052\165\053\156\054\155\056" +
    "\161\065\140\101\166\115\167\122\154\127\160\130\010" +
    "\131\164\132\157\001\002\000\052\043\177\044\201\045" +
    "\213\046\202\047\206\050\203\100\200\101\215\102\207" +
    "\103\211\104\220\105\176\110\212\111\217\112\214\113" +
    "\210\116\205\120\204\123\312\124\216\001\002\000\004" +
    "\125\313\001\002\000\134\005\uffae\016\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\061\uffae\063\uffae\064" +
    "\uffae\065\uffae\070\uffae\071\uffae\072\uffae\073\uffae\075\uffae" +
    "\101\uffae\115\uffae\121\uffae\122\uffae\123\uffae\127\uffae\130" +
    "\uffae\131\uffae\132\uffae\001\002\000\134\005\uff9f\016\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\070\uff9f\071\uff9f\072\uff9f\073" +
    "\uff9f\075\uff9f\101\uff9f\115\uff9f\121\uff9f\122\uff9f\123\uff9f" +
    "\127\uff9f\130\uff9f\131\uff9f\132\uff9f\001\002\000\006\066" +
    "\uffb9\124\067\001\002\000\006\066\uffb9\124\067\001\002" +
    "\000\004\066\320\001\002\000\004\122\264\001\002\000" +
    "\064\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\076\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\116\uffbb\117\uffbb" +
    "\120\uffbb\121\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb\001" +
    "\002\000\004\066\323\001\002\000\004\122\264\001\002" +
    "\000\064\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\076\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\105\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\116\uffbc\117" +
    "\uffbc\120\uffbc\121\uffbc\123\uffbc\124\uffbc\125\uffbc\126\uffbc" +
    "\001\002\000\134\005\uffb7\016\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\061\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\075\uffb7\101\uffb7" +
    "\115\uffb7\121\uffb7\122\uffb7\123\uffb7\127\uffb7\130\uffb7\131" +
    "\uffb7\132\uffb7\001\002\000\024\005\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\015\uffde\017\uffde\020\uffde\074\uffde\001" +
    "\002\000\052\043\177\044\201\045\213\046\202\047\206" +
    "\050\203\100\200\101\215\102\207\103\211\104\220\105" +
    "\176\110\212\111\217\112\214\113\210\116\205\120\204" +
    "\124\216\126\330\001\002\000\074\005\ufff9\016\127\021" +
    "\040\022\036\023\047\024\037\025\043\026\041\027\042" +
    "\030\051\031\123\033\120\035\135\036\134\037\114\040" +
    "\143\041\121\042\126\053\124\055\115\057\122\061\142" +
    "\063\132\064\112\065\140\070\131\073\117\075\137\130" +
    "\010\001\002\000\004\005\332\001\002\000\134\005\uffb3" +
    "\016\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\061\uffb3\063\uffb3\064\uffb3\065\uffb3\070\uffb3\071\uffb3\072" +
    "\uffb3\073\uffb3\075\uffb3\101\uffb3\115\uffb3\121\uffb3\122\uffb3" +
    "\123\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\001\002\000" +
    "\052\043\177\044\201\045\213\046\202\047\206\050\203" +
    "\100\200\101\215\102\207\103\211\104\220\105\176\110" +
    "\212\111\217\112\214\113\210\116\205\120\204\124\216" +
    "\126\334\001\002\000\074\005\ufff9\016\127\021\040\022" +
    "\036\023\047\024\037\025\043\026\041\027\042\030\051" +
    "\031\123\033\120\035\135\036\134\037\114\040\143\041" +
    "\121\042\126\053\124\055\115\057\122\061\142\063\132" +
    "\064\112\065\140\070\131\073\117\075\137\130\010\001" +
    "\002\000\004\005\336\001\002\000\134\005\uffb2\016\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\061\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\075\uffb2\101\uffb2\115\uffb2\121\uffb2\122\uffb2\123\uffb2" +
    "\127\uffb2\130\uffb2\131\uffb2\132\uffb2\001\002\000\134\005" +
    "\uffa5\016\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\075\uffa5\101\uffa5\115\uffa5\121\uffa5\122" +
    "\uffa5\123\uffa5\127\uffa5\130\uffa5\131\uffa5\132\uffa5\001\002" +
    "\000\100\005\ufff9\016\127\021\040\022\036\023\047\024" +
    "\037\025\043\026\041\027\042\030\051\031\123\033\120" +
    "\035\135\036\134\037\114\040\143\041\121\042\126\053" +
    "\124\055\115\057\122\061\142\063\132\064\112\065\140" +
    "\070\131\071\ufff9\072\ufff9\073\117\075\137\130\010\001" +
    "\002\000\010\005\uff97\071\342\072\uff97\001\002\000\004" +
    "\130\010\001\002\000\006\005\345\072\344\001\002\000" +
    "\004\126\346\001\002\000\134\005\uff9a\016\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\061\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\075" +
    "\uff9a\101\uff9a\115\uff9a\121\uff9a\122\uff9a\123\uff9a\127\uff9a" +
    "\130\uff9a\131\uff9a\132\uff9a\001\002\000\074\005\ufff9\016" +
    "\127\021\040\022\036\023\047\024\037\025\043\026\041" +
    "\027\042\030\051\031\123\033\120\035\135\036\134\037" +
    "\114\040\143\041\121\042\126\053\124\055\115\057\122" +
    "\061\142\063\132\064\112\065\140\070\131\073\117\075" +
    "\137\130\010\001\002\000\004\005\350\001\002\000\134" +
    "\005\uff99\016\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\061\uff99\063\uff99\064\uff99\065\uff99\070\uff99\071" +
    "\uff99\072\uff99\073\uff99\075\uff99\101\uff99\115\uff99\121\uff99" +
    "\122\uff99\123\uff99\127\uff99\130\uff99\131\uff99\132\uff99\001" +
    "\002\000\006\124\067\130\uffb9\001\002\000\004\130\010" +
    "\001\002\000\004\126\354\001\002\000\100\005\ufff9\016" +
    "\127\021\040\022\036\023\047\024\037\025\043\026\041" +
    "\027\042\030\051\031\123\033\120\035\135\036\134\037" +
    "\114\040\143\041\121\042\126\053\124\055\115\057\122" +
    "\061\142\063\132\064\112\065\140\070\131\071\ufff9\072" +
    "\ufff9\073\117\075\137\130\010\001\002\000\010\005\uff97" +
    "\071\342\072\uff97\001\002\000\006\005\uff98\072\uff98\001" +
    "\002\000\004\123\360\001\002\000\004\125\361\001\002" +
    "\000\134\005\uff9e\016\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\061\uff9e\063\uff9e\064\uff9e\065\uff9e\070" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\075\uff9e\101\uff9e\115\uff9e" +
    "\121\uff9e\122\uff9e\123\uff9e\127\uff9e\130\uff9e\131\uff9e\132" +
    "\uff9e\001\002\000\052\043\177\044\201\045\213\046\202" +
    "\047\206\050\203\100\200\101\215\102\207\103\211\104" +
    "\220\105\176\110\212\111\217\112\214\113\210\116\205" +
    "\120\204\124\216\125\363\001\002\000\134\005\uffa9\016" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\061" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\075\uffa9\101\uffa9\115\uffa9\121\uffa9\122\uffa9\123" +
    "\uffa9\127\uffa9\130\uffa9\131\uffa9\132\uffa9\001\002\000\016" +
    "\005\ufffa\032\ufffa\034\ufffa\071\ufffa\072\ufffa\121\ufffa\001" +
    "\002\000\006\106\367\107\366\001\002\000\004\125\371" +
    "\001\002\000\004\125\370\001\002\000\134\005\uffa3\016" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\061" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\073\uffa3\075\uffa3\101\uffa3\115\uffa3\121\uffa3\122\uffa3\123" +
    "\uffa3\127\uffa3\130\uffa3\131\uffa3\132\uffa3\001\002\000\134" +
    "\005\uffa1\016\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\057\uffa1\061\uffa1\063\uffa1\064\uffa1\065\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\075\uffa1\101\uffa1\115\uffa1\121\uffa1" +
    "\122\uffa1\123\uffa1\127\uffa1\130\uffa1\131\uffa1\132\uffa1\001" +
    "\002\000\052\043\177\044\201\045\213\046\202\047\206" +
    "\050\203\100\200\101\215\102\207\103\211\104\220\105" +
    "\176\110\212\111\217\112\214\113\210\116\205\120\204" +
    "\124\216\126\373\001\002\000\100\005\ufff9\016\127\021" +
    "\040\022\036\023\047\024\037\025\043\026\041\027\042" +
    "\030\051\031\123\032\ufff9\033\120\034\ufff9\035\135\036" +
    "\134\037\114\040\143\041\121\042\126\053\124\055\115" +
    "\057\122\061\142\063\132\064\112\065\140\070\131\073" +
    "\117\075\137\130\010\001\002\000\010\005\uff95\032\uff95" +
    "\034\uff95\001\002\000\010\005\u0101\032\377\034\376\001" +
    "\002\000\036\025\163\051\153\052\165\053\156\054\155" +
    "\056\161\065\140\101\166\115\167\122\154\127\160\130" +
    "\010\131\164\132\157\001\002\000\004\126\u0103\001\002" +
    "\000\004\005\u0102\001\002\000\134\005\uffb4\016\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\061\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\075\uffb4\101\uffb4\115\uffb4\121\uffb4\122\uffb4\123\uffb4\127" +
    "\uffb4\130\uffb4\131\uffb4\132\uffb4\001\002\000\134\005\uffb5" +
    "\016\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\061\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\075\uffb5\101\uffb5\115\uffb5\121\uffb5\122\uffb5" +
    "\123\uffb5\127\uffb5\130\uffb5\131\uffb5\132\uffb5\001\002\000" +
    "\074\005\ufff9\016\127\021\040\022\036\023\047\024\037" +
    "\025\043\026\041\027\042\030\051\031\123\033\120\035" +
    "\135\036\134\037\114\040\143\041\121\042\126\053\124" +
    "\055\115\057\122\061\142\063\132\064\112\065\140\070" +
    "\131\073\117\075\137\130\010\001\002\000\004\005\uff94" +
    "\001\002\000\052\043\177\044\201\045\213\046\202\047" +
    "\206\050\203\100\200\101\215\102\207\103\211\104\220" +
    "\105\176\110\212\111\217\112\214\113\210\116\205\120" +
    "\204\124\216\126\u0106\001\002\000\100\005\ufff9\016\127" +
    "\021\040\022\036\023\047\024\037\025\043\026\041\027" +
    "\042\030\051\031\123\032\ufff9\033\120\034\ufff9\035\135" +
    "\036\134\037\114\040\143\041\121\042\126\053\124\055" +
    "\115\057\122\061\142\063\132\064\112\065\140\070\131" +
    "\073\117\075\137\130\010\001\002\000\010\005\uff96\032" +
    "\uff96\034\uff96\001\002\000\036\025\163\051\153\052\165" +
    "\053\156\054\155\056\161\065\140\101\166\115\167\122" +
    "\154\127\160\130\010\131\164\132\157\001\002\000\052" +
    "\043\177\044\201\045\213\046\202\047\206\050\203\100" +
    "\200\101\215\102\207\103\211\104\220\105\176\110\212" +
    "\111\217\112\214\113\210\116\205\120\204\123\u010a\124" +
    "\216\001\002\000\004\125\u010b\001\002\000\134\005\uffa7" +
    "\016\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\061\uffa7\063\uffa7\064\uffa7\065\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\075\uffa7\101\uffa7\115\uffa7\121\uffa7\122\uffa7" +
    "\123\uffa7\127\uffa7\130\uffa7\131\uffa7\132\uffa7\001\002\000" +
    "\052\043\177\044\201\045\213\046\202\047\206\050\203" +
    "\100\200\101\215\102\207\103\211\104\220\105\176\110" +
    "\212\111\217\112\214\113\210\116\205\120\204\124\216" +
    "\126\u010d\001\002\000\074\005\ufff9\016\127\021\040\022" +
    "\036\023\047\024\037\025\043\026\041\027\042\030\051" +
    "\031\123\033\120\035\135\036\134\037\114\040\143\041" +
    "\121\042\126\053\124\055\115\057\122\061\142\063\132" +
    "\064\112\065\140\070\131\073\117\075\137\130\010\001" +
    "\002\000\004\005\u010f\001\002\000\134\005\uffb1\016\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\061\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\070\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\075\uffb1\101\uffb1\115\uffb1\121\uffb1\122\uffb1\123\uffb1" +
    "\127\uffb1\130\uffb1\131\uffb1\132\uffb1\001\002\000\004\005" +
    "\u0111\001\002\000\134\005\uffb6\016\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\061\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\075\uffb6\101" +
    "\uffb6\115\uffb6\121\uffb6\122\uffb6\123\uffb6\127\uffb6\130\uffb6" +
    "\131\uffb6\132\uffb6\001\002\000\006\124\067\125\uffb9\001" +
    "\002\000\006\124\067\125\uffb9\001\002\000\004\125\u0115" +
    "\001\002\000\134\005\uff9c\016\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\061\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\075\uff9c\101\uff9c" +
    "\115\uff9c\121\uff9c\122\uff9c\123\uff9c\127\uff9c\130\uff9c\131" +
    "\uff9c\132\uff9c\001\002\000\004\125\u0117\001\002\000\134" +
    "\005\uff9d\016\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\075\uff9d\101\uff9d\115\uff9d\121\uff9d" +
    "\122\uff9d\123\uff9d\127\uff9d\130\uff9d\131\uff9d\132\uff9d\001" +
    "\002\000\036\025\163\051\153\052\165\053\156\054\155" +
    "\056\161\065\140\101\166\115\167\122\154\127\160\130" +
    "\010\131\164\132\157\001\002\000\012\106\u0124\107\u0123" +
    "\116\uffc7\130\uffc7\001\002\000\036\025\163\051\153\052" +
    "\165\053\156\054\155\056\161\065\140\101\166\115\167" +
    "\122\154\127\160\130\010\131\164\132\157\001\002\000" +
    "\036\025\163\051\153\052\165\053\156\054\155\056\161" +
    "\065\140\101\166\115\167\122\154\127\160\130\010\131" +
    "\164\132\157\001\002\000\052\043\177\044\201\045\213" +
    "\046\202\047\206\050\203\100\200\101\215\102\207\103" +
    "\211\104\220\105\176\110\212\111\217\112\214\113\210" +
    "\116\205\117\u011d\120\204\124\216\001\002\000\004\114" +
    "\u011e\001\002\000\036\025\163\051\153\052\165\053\156" +
    "\054\155\056\161\065\140\101\166\115\167\122\154\127" +
    "\160\130\010\131\164\132\157\001\002\000\052\043\177" +
    "\044\201\045\213\046\202\047\206\050\203\100\200\101" +
    "\215\102\207\103\211\104\220\105\176\110\212\111\217" +
    "\112\214\113\210\116\205\120\204\124\216\125\u0120\001" +
    "\002\000\134\005\uffaa\016\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\075\uffaa\101\uffaa\115" +
    "\uffaa\121\uffaa\122\uffaa\123\uffaa\127\uffaa\130\uffaa\131\uffaa" +
    "\132\uffaa\001\002\000\052\043\177\044\201\045\213\046" +
    "\202\047\206\050\203\100\200\101\215\102\207\103\211" +
    "\104\220\105\176\110\212\111\217\112\214\113\210\116" +
    "\205\120\204\124\216\125\u0122\001\002\000\134\005\uffac" +
    "\016\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\061\uffac\063\uffac\064\uffac\065\uffac\070\uffac\071\uffac\072" +
    "\uffac\073\uffac\075\uffac\101\uffac\115\uffac\121\uffac\122\uffac" +
    "\123\uffac\127\uffac\130\uffac\131\uffac\132\uffac\001\002\000" +
    "\004\125\u0126\001\002\000\004\125\u0125\001\002\000\134" +
    "\005\uffa4\016\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\061\uffa4\063\uffa4\064\uffa4\065\uffa4\070\uffa4\071" +
    "\uffa4\072\uffa4\073\uffa4\075\uffa4\101\uffa4\115\uffa4\121\uffa4" +
    "\122\uffa4\123\uffa4\127\uffa4\130\uffa4\131\uffa4\132\uffa4\001" +
    "\002\000\134\005\uffa2\016\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\061\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\073\uffa2\075\uffa2\101\uffa2\115" +
    "\uffa2\121\uffa2\122\uffa2\123\uffa2\127\uffa2\130\uffa2\131\uffa2" +
    "\132\uffa2\001\002\000\052\043\177\044\201\045\213\046" +
    "\202\047\206\050\203\100\200\101\215\102\207\103\211" +
    "\104\220\105\176\110\212\111\217\112\214\113\210\116" +
    "\205\120\204\121\u0128\124\216\001\002\000\004\114\u0129" +
    "\001\002\000\036\025\163\051\153\052\165\053\156\054" +
    "\155\056\161\065\140\101\166\115\167\122\154\127\160" +
    "\130\010\131\164\132\157\001\002\000\052\043\177\044" +
    "\201\045\213\046\202\047\206\050\203\100\200\101\215" +
    "\102\207\103\211\104\220\105\176\110\212\111\217\112" +
    "\214\113\210\116\205\120\204\124\216\125\u012b\001\002" +
    "\000\134\005\uffab\016\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\061\uffab\063\uffab\064\uffab\065\uffab\070" +
    "\uffab\071\uffab\072\uffab\073\uffab\075\uffab\101\uffab\115\uffab" +
    "\121\uffab\122\uffab\123\uffab\127\uffab\130\uffab\131\uffab\132" +
    "\uffab\001\002\000\036\025\163\051\153\052\165\053\156" +
    "\054\155\056\161\065\140\101\166\115\167\122\154\127" +
    "\160\130\010\131\164\132\157\001\002\000\052\043\177" +
    "\044\201\045\213\046\202\047\206\050\203\100\200\101" +
    "\215\102\207\103\211\104\220\105\176\110\212\111\217" +
    "\112\214\113\210\116\205\120\204\123\u012e\124\216\001" +
    "\002\000\004\125\u012f\001\002\000\134\005\uffa8\016\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\061\uffa8" +
    "\063\uffa8\064\uffa8\065\uffa8\070\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\075\uffa8\101\uffa8\115\uffa8\121\uffa8\122\uffa8\123\uffa8" +
    "\127\uffa8\130\uffa8\131\uffa8\132\uffa8\001\002\000\072\016" +
    "\127\021\040\022\036\023\047\024\037\025\043\026\041" +
    "\027\042\030\051\031\123\033\120\035\135\036\134\037" +
    "\114\040\143\041\121\042\126\053\124\055\115\057\122" +
    "\061\142\063\132\064\112\065\140\070\131\073\117\075" +
    "\137\130\010\001\002\000\036\025\163\051\153\052\165" +
    "\053\156\054\155\056\161\065\140\101\166\115\167\122" +
    "\154\127\160\130\010\131\164\132\157\001\002\000\052" +
    "\043\177\044\201\045\213\046\202\047\206\050\203\100" +
    "\200\101\215\102\207\103\211\104\220\105\176\110\212" +
    "\111\217\112\214\113\210\116\205\120\204\124\216\125" +
    "\u0133\001\002\000\072\016\127\021\040\022\036\023\047" +
    "\024\037\025\043\026\041\027\042\030\051\031\123\033" +
    "\120\035\135\036\134\037\114\040\143\041\121\042\126" +
    "\053\124\055\115\057\122\061\142\063\132\064\112\065" +
    "\140\070\131\073\117\075\137\130\010\001\002\000\004" +
    "\123\u0135\001\002\000\004\126\u0136\001\002\000\074\005" +
    "\ufff9\016\127\021\040\022\036\023\047\024\037\025\043" +
    "\026\041\027\042\030\051\031\123\033\120\035\135\036" +
    "\134\037\114\040\143\041\121\042\126\053\124\055\115" +
    "\057\122\061\142\063\132\064\112\065\140\070\131\073" +
    "\117\075\137\130\010\001\002\000\004\005\u0138\001\002" +
    "\000\134\005\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\061\uffb0\063\uffb0\064\uffb0\065\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\075\uffb0\101\uffb0\115\uffb0" +
    "\121\uffb0\122\uffb0\123\uffb0\127\uffb0\130\uffb0\131\uffb0\132" +
    "\uffb0\001\002\000\134\005\uffa6\016\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\061\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\075\uffa6\101" +
    "\uffa6\115\uffa6\121\uffa6\122\uffa6\123\uffa6\127\uffa6\130\uffa6" +
    "\131\uffa6\132\uffa6\001\002\000\004\130\010\001\002\000" +
    "\004\125\u0142\001\002\000\004\130\010\001\002\000\004" +
    "\130\010\001\002\000\004\125\u013f\001\002\000\046\005" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\074\uffd6\130\uffd6\001\002\000\004" +
    "\125\u0141\001\002\000\046\005\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\074" +
    "\uffd4\130\uffd4\001\002\000\046\005\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\074\uffd7\130\uffd7\001\002\000\004\125\u0144\001\002\000" +
    "\046\005\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\074\uffd5\130\uffd5\001\002" +
    "\000\024\021\040\022\036\023\047\024\037\025\043\026" +
    "\041\027\042\030\051\130\010\001\002\000\006\076\u0147" +
    "\116\064\001\002\000\024\021\040\022\036\023\047\024" +
    "\037\025\043\026\041\027\042\030\051\130\010\001\002" +
    "\000\006\116\064\121\u0149\001\002\000\074\010\uffc8\011" +
    "\uffc8\012\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\076\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104" +
    "\uffc8\105\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\121\uffc8\123\uffc8\124\uffc8\125\uffc8\126" +
    "\uffc8\130\uffc8\001\002\000\004\126\u014b\001\002\000\046" +
    "\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002\000" +
    "\046\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\040\022\036\023\047\024\037\025" +
    "\043\026\041\027\042\030\051\074\uffdf\130\010\001\002" +
    "\000\024\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015" +
    "\072\017\ufff5\020\ufff5\074\ufff5\001\002\000\022\005\u014f" +
    "\010\022\011\027\012\024\013\031\017\026\020\021\074" +
    "\025\001\002\000\024\002\uffec\005\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\017\uffec\020\uffec\074\uffec\001\002\000" +
    "\004\130\010\001\002\000\004\013\u0167\001\002\000\024" +
    "\021\040\022\036\023\047\024\037\025\043\026\041\027" +
    "\042\030\051\130\010\001\002\000\004\130\010\001\002" +
    "\000\006\014\u0155\126\u0156\001\002\000\004\130\010\001" +
    "\002\000\046\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074\uffd8\130\uffd8" +
    "\001\002\000\046\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\015\uffdf\017\uffdf\020\uffdf\021\040\022\036\023\047" +
    "\024\037\025\043\026\041\027\042\030\051\074\uffdf\130" +
    "\010\001\002\000\024\005\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\015\072\017\ufff5\020\ufff5\074\ufff5\001\002\000" +
    "\022\005\u015a\010\022\011\027\012\024\013\031\017\026" +
    "\020\021\074\025\001\002\000\024\002\uffed\005\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\017\uffed\020\uffed\074\uffed" +
    "\001\002\000\004\126\u015c\001\002\000\046\005\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002\000\046\005\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\021\040\022\036\023\047\024\037\025\043\026\041" +
    "\027\042\030\051\074\uffdf\130\010\001\002\000\024\005" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\072\017\ufff5" +
    "\020\ufff5\074\ufff5\001\002\000\022\005\u0160\010\022\011" +
    "\027\012\024\013\031\017\026\020\021\074\025\001\002" +
    "\000\024\002\uffee\005\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\017\uffee\020\uffee\074\uffee\001\002\000\006\116\064" +
    "\130\010\001\002\000\004\122\077\001\002\000\004\126" +
    "\u0164\001\002\000\074\005\ufff9\016\127\021\040\022\036" +
    "\023\047\024\037\025\043\026\041\027\042\030\051\031" +
    "\123\033\120\035\135\036\134\037\114\040\143\041\121" +
    "\042\126\053\124\055\115\057\122\061\142\063\132\064" +
    "\112\065\140\070\131\073\117\075\137\130\010\001\002" +
    "\000\004\005\u0166\001\002\000\024\002\uffdc\005\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\017\uffdc\020\uffdc\074\uffdc" +
    "\001\002\000\004\130\010\001\002\000\006\014\u0169\126" +
    "\u016a\001\002\000\004\130\010\001\002\000\046\005\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002\000\046\005" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf" +
    "\020\uffdf\021\040\022\036\023\047\024\037\025\043\026" +
    "\041\027\042\030\051\074\uffdf\130\010\001\002\000\024" +
    "\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\072\017" +
    "\ufff5\020\ufff5\074\ufff5\001\002\000\022\005\u016e\010\022" +
    "\011\027\012\024\013\031\017\026\020\021\074\025\001" +
    "\002\000\024\002\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\017\uffe5\020\uffe5\074\uffe5\001\002\000\004\126" +
    "\u0170\001\002\000\046\005\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074\uffd8" +
    "\130\uffd8\001\002\000\046\005\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\040\022\036" +
    "\023\047\024\037\025\043\026\041\027\042\030\051\074" +
    "\uffdf\130\010\001\002\000\024\005\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\072\017\ufff5\020\ufff5\074\ufff5\001" +
    "\002\000\022\005\u0174\010\022\011\027\012\024\013\031" +
    "\017\026\020\021\074\025\001\002\000\024\002\uffe6\005" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\017\uffe6\020\uffe6" +
    "\074\uffe6\001\002\000\004\122\u0176\001\002\000\004\127" +
    "\u0177\001\002\000\004\123\u0178\001\002\000\004\125\u0179" +
    "\001\002\000\024\002\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\017\ufff2\020\ufff2\074\ufff2\001\002\000\004" +
    "\130\010\001\002\000\006\014\u017c\126\u017d\001\002\000" +
    "\004\130\010\001\002\000\046\005\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\074\uffd8\130\uffd8\001\002\000\046\005\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\040" +
    "\022\036\023\047\024\037\025\043\026\041\027\042\030" +
    "\051\074\uffdf\130\010\001\002\000\024\005\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\072\017\ufff5\020\ufff5\074" +
    "\ufff5\001\002\000\022\005\u0181\010\022\011\027\012\024" +
    "\013\031\017\026\020\021\074\025\001\002\000\024\002" +
    "\uffe3\005\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\017\uffe3" +
    "\020\uffe3\074\uffe3\001\002\000\004\126\u0183\001\002\000" +
    "\046\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002" +
    "\000\046\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015" +
    "\uffdf\017\uffdf\020\uffdf\021\040\022\036\023\047\024\037" +
    "\025\043\026\041\027\042\030\051\074\uffdf\130\010\001" +
    "\002\000\024\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\015\072\017\ufff5\020\ufff5\074\ufff5\001\002\000\022\005" +
    "\u0187\010\022\011\027\012\024\013\031\017\026\020\021" +
    "\074\025\001\002\000\024\002\uffe4\005\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\017\uffe4\020\uffe4\074\uffe4\001\002" +
    "\000\004\122\u0189\001\002\000\004\127\u018a\001\002\000" +
    "\004\123\u018b\001\002\000\004\125\u018c\001\002\000\024" +
    "\002\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\017" +
    "\ufff4\020\ufff4\074\ufff4\001\002\000\004\130\010\001\002" +
    "\000\004\013\u01a4\001\002\000\024\021\040\022\036\023" +
    "\047\024\037\025\043\026\041\027\042\030\051\130\010" +
    "\001\002\000\004\130\010\001\002\000\006\014\u0192\126" +
    "\u0193\001\002\000\004\130\010\001\002\000\046\005\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002\000\046\005" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf" +
    "\020\uffdf\021\040\022\036\023\047\024\037\025\043\026" +
    "\041\027\042\030\051\074\uffdf\130\010\001\002\000\024" +
    "\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\072\017" +
    "\ufff5\020\ufff5\074\ufff5\001\002\000\022\005\u0197\010\022" +
    "\011\027\012\024\013\031\017\026\020\021\074\025\001" +
    "\002\000\024\002\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\017\uffe9\020\uffe9\074\uffe9\001\002\000\004\126" +
    "\u0199\001\002\000\046\005\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074\uffd8" +
    "\130\uffd8\001\002\000\046\005\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\040\022\036" +
    "\023\047\024\037\025\043\026\041\027\042\030\051\074" +
    "\uffdf\130\010\001\002\000\024\005\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\072\017\ufff5\020\ufff5\074\ufff5\001" +
    "\002\000\022\005\u019d\010\022\011\027\012\024\013\031" +
    "\017\026\020\021\074\025\001\002\000\024\002\uffea\005" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\017\uffea\020\uffea" +
    "\074\uffea\001\002\000\006\116\064\130\010\001\002\000" +
    "\004\122\077\001\002\000\004\126\u01a1\001\002\000\074" +
    "\005\ufff9\016\127\021\040\022\036\023\047\024\037\025" +
    "\043\026\041\027\042\030\051\031\123\033\120\035\135" +
    "\036\134\037\114\040\143\041\121\042\126\053\124\055" +
    "\115\057\122\061\142\063\132\064\112\065\140\070\131" +
    "\073\117\075\137\130\010\001\002\000\004\005\u01a3\001" +
    "\002\000\024\002\uffda\005\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\017\uffda\020\uffda\074\uffda\001\002\000\004\130" +
    "\010\001\002\000\006\014\u01a6\126\u01a7\001\002\000\004" +
    "\130\010\001\002\000\046\005\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074" +
    "\uffd8\130\uffd8\001\002\000\046\005\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\040\022" +
    "\036\023\047\024\037\025\043\026\041\027\042\030\051" +
    "\074\uffdf\130\010\001\002\000\024\005\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\015\072\017\ufff5\020\ufff5\074\ufff5" +
    "\001\002\000\022\005\u01ab\010\022\011\027\012\024\013" +
    "\031\017\026\020\021\074\025\001\002\000\024\002\uffe1" +
    "\005\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\017\uffe1\020" +
    "\uffe1\074\uffe1\001\002\000\004\126\u01ad\001\002\000\046" +
    "\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002\000" +
    "\046\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\040\022\036\023\047\024\037\025" +
    "\043\026\041\027\042\030\051\074\uffdf\130\010\001\002" +
    "\000\024\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015" +
    "\072\017\ufff5\020\ufff5\074\ufff5\001\002\000\022\005\u01b1" +
    "\010\022\011\027\012\024\013\031\017\026\020\021\074" +
    "\025\001\002\000\024\002\uffe2\005\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\017\uffe2\020\uffe2\074\uffe2\001\002\000" +
    "\004\122\u01b3\001\002\000\004\127\u01b4\001\002\000\004" +
    "\123\u01b5\001\002\000\004\125\u01b6\001\002\000\024\002" +
    "\ufff1\005\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\017\ufff1" +
    "\020\ufff1\074\ufff1\001\002\000\004\130\010\001\002\000" +
    "\004\013\u01ce\001\002\000\024\021\040\022\036\023\047" +
    "\024\037\025\043\026\041\027\042\030\051\130\010\001" +
    "\002\000\004\130\010\001\002\000\006\014\u01bc\126\u01bd" +
    "\001\002\000\004\130\010\001\002\000\046\005\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002\000\046\005\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\021\040\022\036\023\047\024\037\025\043\026\041" +
    "\027\042\030\051\074\uffdf\130\010\001\002\000\024\005" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\072\017\ufff5" +
    "\020\ufff5\074\ufff5\001\002\000\022\005\u01c1\010\022\011" +
    "\027\012\024\013\031\017\026\020\021\074\025\001\002" +
    "\000\024\002\ufff0\005\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\017\ufff0\020\ufff0\074\ufff0\001\002\000\004\126\u01c3" +
    "\001\002\000\046\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074\uffd8\130" +
    "\uffd8\001\002\000\046\005\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\040\022\036\023" +
    "\047\024\037\025\043\026\041\027\042\030\051\074\uffdf" +
    "\130\010\001\002\000\024\005\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\015\072\017\ufff5\020\ufff5\074\ufff5\001\002" +
    "\000\022\005\u01c7\010\022\011\027\012\024\013\031\017" +
    "\026\020\021\074\025\001\002\000\024\002\uffef\005\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\017\uffef\020\uffef\074" +
    "\uffef\001\002\000\006\116\064\130\010\001\002\000\004" +
    "\122\077\001\002\000\004\126\u01cb\001\002\000\074\005" +
    "\ufff9\016\127\021\040\022\036\023\047\024\037\025\043" +
    "\026\041\027\042\030\051\031\123\033\120\035\135\036" +
    "\134\037\114\040\143\041\121\042\126\053\124\055\115" +
    "\057\122\061\142\063\132\064\112\065\140\070\131\073" +
    "\117\075\137\130\010\001\002\000\004\005\u01cd\001\002" +
    "\000\024\002\uffdd\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\017\uffdd\020\uffdd\074\uffdd\001\002\000\004\130\010" +
    "\001\002\000\006\014\u01d0\126\u01d1\001\002\000\004\130" +
    "\010\001\002\000\046\005\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\074\uffd8" +
    "\130\uffd8\001\002\000\046\005\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\040\022\036" +
    "\023\047\024\037\025\043\026\041\027\042\030\051\074" +
    "\uffdf\130\010\001\002\000\024\005\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\072\017\ufff5\020\ufff5\074\ufff5\001" +
    "\002\000\022\005\u01d5\010\022\011\027\012\024\013\031" +
    "\017\026\020\021\074\025\001\002\000\024\002\uffe8\005" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\017\uffe8\020\uffe8" +
    "\074\uffe8\001\002\000\004\126\u01d7\001\002\000\046\005" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\074\uffd8\130\uffd8\001\002\000\046" +
    "\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017" +
    "\uffdf\020\uffdf\021\040\022\036\023\047\024\037\025\043" +
    "\026\041\027\042\030\051\074\uffdf\130\010\001\002\000" +
    "\024\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\072" +
    "\017\ufff5\020\ufff5\074\ufff5\001\002\000\022\005\u01db\010" +
    "\022\011\027\012\024\013\031\017\026\020\021\074\025" +
    "\001\002\000\024\002\uffe7\005\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\017\uffe7\020\uffe7\074\uffe7\001\002\000\004" +
    "\122\u01dd\001\002\000\004\127\u01de\001\002\000\004\123" +
    "\u01df\001\002\000\004\125\u01e0\001\002\000\024\002\ufff3" +
    "\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\017\ufff3\020" +
    "\ufff3\074\ufff3\001\002\000\006\116\064\130\010\001\002" +
    "\000\004\122\077\001\002\000\004\126\u01e4\001\002\000" +
    "\074\005\ufff9\016\127\021\040\022\036\023\047\024\037" +
    "\025\043\026\041\027\042\030\051\031\123\033\120\035" +
    "\135\036\134\037\114\040\143\041\121\042\126\053\124" +
    "\055\115\057\122\061\142\063\132\064\112\065\140\070" +
    "\131\073\117\075\137\130\010\001\002\000\004\005\u01e6" +
    "\001\002\000\024\002\uffdb\005\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\017\uffdb\020\uffdb\074\uffdb\001\002\000\004" +
    "\005\u01e8\001\002\000\022\002\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\017\ufff5\020\ufff5\074\ufff5\001\002\000\022" +
    "\002\ufffc\010\022\011\027\012\024\013\031\017\026\020" +
    "\021\074\025\001\002\000\006\124\067\125\uffb9\001\002" +
    "\000\004\125\u01ec\001\002\000\030\002\ufffe\004\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020\ufffe" +
    "\062\ufffe\074\ufffe\001\002\000\074\005\ufff9\016\127\021" +
    "\040\022\036\023\047\024\037\025\043\026\041\027\042" +
    "\030\051\031\123\033\120\035\135\036\134\037\114\040" +
    "\143\041\121\042\126\053\124\055\115\057\122\061\142" +
    "\063\132\064\112\065\140\070\131\073\117\075\137\130" +
    "\010\001\002\000\004\005\u01ef\001\002\000\022\002\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\017\ufff5\020\ufff5\074" +
    "\ufff5\001\002\000\022\002\ufffb\010\022\011\027\012\024" +
    "\013\031\017\026\020\021\074\025\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ee\000\004\002\004\001\001\000\004\022\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\006\004" +
    "\013\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u01e9\001\001\000\022\005\u01e6\013\127\016" +
    "\143\017\124\022\115\026\112\031\140\036\132\001\001" +
    "\000\010\007\027\010\022\011\017\001\001\000\002\001" +
    "\001\000\006\016\u01e0\022\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0187\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\031\001\001\000\002\001\001\000\004\022" +
    "\u0149\001\001\000\004\012\034\001\001\000\012\014\044" +
    "\016\045\022\043\030\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\273\001\001\000" +
    "\002\001\001\000\004\022\u013a\001\001\000\002\001\001" +
    "\000\006\006\073\027\072\001\001\000\004\022\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\061\022\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\067\001\001" +
    "\000\004\032\070\001\001\000\002\001\001\000\004\015" +
    "\075\001\001\000\002\001\001\000\010\007\027\010\022" +
    "\011\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\077\022\043\023\101\001\001\000\004\022\107" +
    "\001\001\000\002\001\001\000\004\035\103\001\001\000" +
    "\010\016\077\022\043\023\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\135\013\127\016\143" +
    "\017\124\022\115\026\112\031\140\036\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0118\001\001\000\004\022\u0111\001" +
    "\001\000\022\005\u010f\013\127\016\143\017\124\022\115" +
    "\026\112\031\140\036\132\001\001\000\014\020\u010b\021" +
    "\167\022\151\031\150\033\147\001\001\000\002\001\001" +
    "\000\014\020\371\021\167\022\151\031\150\033\147\001" +
    "\001\000\004\032\364\001\001\000\022\005\363\013\127" +
    "\016\143\017\124\022\115\026\112\031\140\036\132\001" +
    "\001\000\014\020\361\021\167\022\151\031\150\033\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\332" +
    "\021\167\022\151\031\150\033\147\001\001\000\014\020" +
    "\326\021\167\022\151\031\150\033\147\001\001\000\002" +
    "\001\001\000\016\013\127\016\143\022\115\026\324\031" +
    "\140\036\132\001\001\000\004\022\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\302\013\127\016" +
    "\143\017\124\022\115\026\112\031\140\036\132\001\001" +
    "\000\004\022\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\161\021\167\022\151\031\150\033\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\277\001\001\000\002\001\001\000\014\020\275\021\167" +
    "\022\151\031\150\033\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\255\022\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\245" +
    "\021\167\022\151\031\150\033\147\001\001\000\014\020" +
    "\174\021\167\022\151\031\150\033\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\172\013\127\016" +
    "\143\017\124\022\115\026\112\031\140\036\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\244\021\167\022\151\031\150\033\147\001\001" +
    "\000\014\020\243\021\167\022\151\031\150\033\147\001" +
    "\001\000\014\020\242\021\167\022\151\031\150\033\147" +
    "\001\001\000\014\020\241\021\167\022\151\031\150\033" +
    "\147\001\001\000\014\020\240\021\167\022\151\031\150" +
    "\033\147\001\001\000\014\020\237\021\167\022\151\031" +
    "\150\033\147\001\001\000\014\020\235\021\167\022\151" +
    "\031\150\033\147\001\001\000\014\020\233\021\167\022" +
    "\151\031\150\033\147\001\001\000\014\020\232\021\167" +
    "\022\151\031\150\033\147\001\001\000\014\020\231\021" +
    "\167\022\151\031\150\033\147\001\001\000\014\020\230" +
    "\021\167\022\151\031\150\033\147\001\001\000\014\020" +
    "\227\021\167\022\151\031\150\033\147\001\001\000\014" +
    "\020\226\021\167\022\151\031\150\033\147\001\001\000" +
    "\014\020\225\021\167\022\151\031\150\033\147\001\001" +
    "\000\014\020\224\021\167\022\151\031\150\033\147\001" +
    "\001\000\014\020\223\021\167\022\151\031\150\033\147" +
    "\001\001\000\002\001\001\000\014\020\221\021\167\022" +
    "\151\031\150\033\147\001\001\000\014\020\220\021\167" +
    "\022\151\031\150\033\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\247\022\043\001\001" +
    "\000\002\001\001\000\006\016\251\022\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\274\032\273\001\001\000\002\001\001\000\014\020" +
    "\260\021\167\022\151\031\150\033\147\001\001\000\004" +
    "\021\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\265\021\167\022\151\031\150" +
    "\033\147\001\001\000\002\001\001\000\004\034\267\001" +
    "\001\000\014\020\271\021\167\022\151\031\150\033\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\301\022\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\305\021\167\022\151\031\150\033\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\310\021\167\022" +
    "\151\031\150\033\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\321\001\001\000\004\032\316\001\001\000\002\001\001" +
    "\000\004\021\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\330\013\127\016\143\017\124\022\115\026\112\031\140" +
    "\036\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\334\013\127\016\143\017\124" +
    "\022\115\026\112\031\140\036\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\340" +
    "\013\127\016\143\017\124\022\115\026\112\031\140\036" +
    "\132\001\001\000\004\037\342\001\001\000\004\022\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\346\013\127\016\143\017\124\022\115" +
    "\026\112\031\140\036\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\351\001\001\000\004\022\352" +
    "\001\001\000\002\001\001\000\022\005\354\013\127\016" +
    "\143\017\124\022\115\026\112\031\140\036\132\001\001" +
    "\000\004\037\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\373\013\127\016" +
    "\143\017\124\022\115\026\112\031\140\036\132\001\001" +
    "\000\004\024\374\001\001\000\004\025\377\001\001\000" +
    "\014\020\u0104\021\167\022\151\031\150\033\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\u0103\013\127\016\143\017\124" +
    "\022\115\026\112\031\140\036\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\u0106\013\127\016\143" +
    "\017\124\022\115\026\112\031\140\036\132\001\001\000" +
    "\002\001\001\000\014\020\u0108\021\167\022\151\031\150" +
    "\033\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\u010d\013\127" +
    "\016\143\017\124\022\115\026\112\031\140\036\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u0115\001\001\000\004\032" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\u0126\021\167\022" +
    "\151\031\150\033\147\001\001\000\002\001\001\000\014" +
    "\020\u0120\021\167\022\151\031\150\033\147\001\001\000" +
    "\014\020\u011b\021\167\022\151\031\150\033\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\u011e\021" +
    "\167\022\151\031\150\033\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\u0129\021\167\022\151\031\150\033\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\u012c\021\167\022" +
    "\151\031\150\033\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\127\016\143\017" +
    "\u0130\022\115\026\112\031\140\036\132\001\001\000\014" +
    "\020\u0131\021\167\022\151\031\150\033\147\001\001\000" +
    "\002\001\001\000\020\013\127\016\143\017\u0133\022\115" +
    "\026\112\031\140\036\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\u0136\013\127\016\143\017\124" +
    "\022\115\026\112\031\140\036\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0142" +
    "\001\001\000\002\001\001\000\004\022\u013f\001\001\000" +
    "\004\022\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\u0145\022\043" +
    "\001\001\000\002\001\001\000\006\016\u0147\022\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u014b\001\001\000\012\014\044\016\045\022" +
    "\043\030\u014c\001\001\000\006\006\u014d\027\072\001\001" +
    "\000\010\007\027\010\022\011\017\001\001\000\002\001" +
    "\001\000\004\022\u0174\001\001\000\002\001\001\000\006" +
    "\016\u0160\022\043\001\001\000\004\022\u0153\001\001\000" +
    "\002\001\001\000\004\022\u015a\001\001\000\004\012\u0156" +
    "\001\001\000\012\014\044\016\045\022\043\030\u0157\001" +
    "\001\000\006\006\u0158\027\072\001\001\000\010\007\027" +
    "\010\022\011\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u015c\001\001\000\012\014\044\016\045" +
    "\022\043\030\u015d\001\001\000\006\006\u015e\027\072\001" +
    "\001\000\010\007\027\010\022\011\017\001\001\000\002" +
    "\001\001\000\004\022\u0161\001\001\000\004\015\u0162\001" +
    "\001\000\002\001\001\000\022\005\u0164\013\127\016\143" +
    "\017\124\022\115\026\112\031\140\036\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0167\001\001" +
    "\000\002\001\001\000\004\022\u016e\001\001\000\004\012" +
    "\u016a\001\001\000\012\014\044\016\045\022\043\030\u016b" +
    "\001\001\000\006\006\u016c\027\072\001\001\000\010\007" +
    "\027\010\022\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0170\001\001\000\012\014\044\016" +
    "\045\022\043\030\u0171\001\001\000\006\006\u0172\027\072" +
    "\001\001\000\010\007\027\010\022\011\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u017a\001\001\000\002\001\001\000\004\022\u0181\001\001" +
    "\000\004\012\u017d\001\001\000\012\014\044\016\045\022" +
    "\043\030\u017e\001\001\000\006\006\u017f\027\072\001\001" +
    "\000\010\007\027\010\022\011\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0183\001\001\000\012" +
    "\014\044\016\045\022\043\030\u0184\001\001\000\006\006" +
    "\u0185\027\072\001\001\000\010\007\027\010\022\011\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u01b1\001\001\000\002\001\001\000\006\016" +
    "\u019d\022\043\001\001\000\004\022\u0190\001\001\000\002" +
    "\001\001\000\004\022\u0197\001\001\000\004\012\u0193\001" +
    "\001\000\012\014\044\016\045\022\043\030\u0194\001\001" +
    "\000\006\006\u0195\027\072\001\001\000\010\007\027\010" +
    "\022\011\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0199\001\001\000\012\014\044\016\045\022" +
    "\043\030\u019a\001\001\000\006\006\u019b\027\072\001\001" +
    "\000\010\007\027\010\022\011\017\001\001\000\002\001" +
    "\001\000\004\022\u019e\001\001\000\004\015\u019f\001\001" +
    "\000\002\001\001\000\022\005\u01a1\013\127\016\143\017" +
    "\124\022\115\026\112\031\140\036\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u01a4\001\001\000" +
    "\002\001\001\000\004\022\u01ab\001\001\000\004\012\u01a7" +
    "\001\001\000\012\014\044\016\045\022\043\030\u01a8\001" +
    "\001\000\006\006\u01a9\027\072\001\001\000\010\007\027" +
    "\010\022\011\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u01ad\001\001\000\012\014\044\016\045" +
    "\022\043\030\u01ae\001\001\000\006\006\u01af\027\072\001" +
    "\001\000\010\007\027\010\022\011\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u01db" +
    "\001\001\000\002\001\001\000\006\016\u01c7\022\043\001" +
    "\001\000\004\022\u01ba\001\001\000\002\001\001\000\004" +
    "\022\u01c1\001\001\000\004\012\u01bd\001\001\000\012\014" +
    "\044\016\045\022\043\030\u01be\001\001\000\006\006\u01bf" +
    "\027\072\001\001\000\010\007\027\010\022\011\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u01c3" +
    "\001\001\000\012\014\044\016\045\022\043\030\u01c4\001" +
    "\001\000\006\006\u01c5\027\072\001\001\000\010\007\027" +
    "\010\022\011\017\001\001\000\002\001\001\000\004\022" +
    "\u01c8\001\001\000\004\015\u01c9\001\001\000\002\001\001" +
    "\000\022\005\u01cb\013\127\016\143\017\124\022\115\026" +
    "\112\031\140\036\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u01ce\001\001\000\002\001\001\000" +
    "\004\022\u01d5\001\001\000\004\012\u01d1\001\001\000\012" +
    "\014\044\016\045\022\043\030\u01d2\001\001\000\006\006" +
    "\u01d3\027\072\001\001\000\010\007\027\010\022\011\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u01d7\001\001\000\012\014\044\016\045\022\043\030\u01d8" +
    "\001\001\000\006\006\u01d9\027\072\001\001\000\010\007" +
    "\027\010\022\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u01e1\001\001\000\004" +
    "\015\u01e2\001\001\000\002\001\001\000\022\005\u01e4\013" +
    "\127\016\143\017\124\022\115\026\112\031\140\036\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u01e8\001\001\000\010\007\027\010\022" +
    "\011\017\001\001\000\004\032\u01ea\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\u01ed\013\127\016\143" +
    "\017\124\022\115\026\112\031\140\036\132\001\001\000" +
    "\002\001\001\000\004\006\u01ef\001\001\000\010\007\027" +
    "\010\022\011\017\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 @Override
				public void syntax_error(Symbol token){
					System.err.format("Parser error at line %d, column %d\n", token.left, token.right);
				}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expressionchain ::= 
            {
              ExprChain RESULT =null;
		 RESULT = new ExprChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expressionchain ::= COMMA expression expressionchain 
            {
              ExprChain RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(e, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionchain",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // paramlist ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		 RESULT = new ParamList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // paramlist ::= LPAREN expression expressionchain RPAREN 
            {
              ParamList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprChain c = (ExprChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParamList(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression ::= paramlist POINTER LBRACE statementlist RBRACE 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodLiteral(p, l, p1left, p1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression ::= typeof 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Typeof t = (Typeof)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinus(e, mleft, mright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression ::= STRINGLITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Expression RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapCreate(t1, t2, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression ::= CREATE type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayCreate(t, e, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= CREATE type LBRACKET RBRACKET paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayLiteral(t, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression ::= CREATE identifier paramlist 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectCreate(i, l, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression ::= BANG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParentExpr(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= NIL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nil(nleft, nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= FLOATLITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigDecimal f = (BigDecimal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= INTLITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger i = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= expression DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= methodcall 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= identifier idchain 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ObjectVarAccess(i, i2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression LBRACE expression RBRACE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapExpr(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= expression LTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression GTHAN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression LTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= expression GTHANE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualTo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression DIFFERS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Differs(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equals(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression NOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nor(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression NAND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nand(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2, e1.line, e1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // else ::= ELSE COLON statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ratherlist ::= 
            {
              RatherList RESULT =null;
		RESULT = new RatherList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ratherlist ::= ratherlist RATHER expression COLON statementlist 
            {
              RatherList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Rather(e, s, e.line, e.column)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ratherlist",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // catchlist ::= 
            {
              CatchList RESULT =null;
		 RESULT = new CatchList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // catchlist ::= CATCH identifier idchain identifier COLON statementlist catchlist 
            {
              CatchList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CatchList l = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new Catch(i, c, i2, s, i.line, i.column), 0); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("catchlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // trycatch ::= TRY COLON statementlist catchlist FINALLY COLON statementlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, s2, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // trycatch ::= TRY COLON statementlist catchlist END 
            {
              TryCatch RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CatchList c = (CatchList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TryCatch(s1, c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trycatch",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // simple_statement ::= trycatch 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TryCatch t = (TryCatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // simple_statement ::= THROW THIS idchain SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Throw(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // simple_statement ::= THROW identifier idchain SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Throw(i, c, i.line, i.column);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // simple_statement ::= SUPER LPAREN RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Super(sleft, sright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // simple_statement ::= methodcall SEMICOLON 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCallStatement(m, m.line, m.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // simple_statement ::= vardec 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // simple_statement ::= THIS idchain DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // simple_statement ::= identifier idchain DECREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decrement(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // simple_statement ::= THIS idchain INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(new This(tleft, tright), c, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_statement ::= identifier idchain INCREMENT SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Increment(i, c, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_statement ::= EXIT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Exit(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_statement ::= ASSERT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assert(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_statement ::= identifier LBRACKET expression RBRACKET EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_statement ::= identifier LBRACE expression RBRACE EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapAssignment(i, e1, e2, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_statement ::= identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(e, i, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_statement ::= type identifier EQUAL expression SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecAssignment(e, i, t, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_statement ::= DO statementlist END WHILE expression SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_statement ::= FOR LPAREN statement expression SEMICOLON statement RPAREN COLON statementlist END 
            {
              Statement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(e, s1, s2, s3, s1.line, s1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_statement ::= UNTIL expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Until(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_statement ::= WHILE expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_statement ::= UNLESS expression COLON statementlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Unless(e, s, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_statement ::= IF expression COLON statementlist ratherlist END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s, l, null, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_statement ::= IF expression COLON statementlist ratherlist else END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RatherList l = (RatherList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, s1, l, s2, e.line, e.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_statement ::= BEGIN statementlist END 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= AT simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.breakPoint = true; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= simple_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // idchain ::= 
            {
              IdChain RESULT =null;
		 RESULT = new IdChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // idchain ::= DOT identifier idchain 
            {
              IdChain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(i, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idchain",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // methodcall ::= EXEC THIS idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(new This(tleft, tright), i2, l, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // methodcall ::= EXEC identifier idchain WITH paramlist 
            {
              MethodCall RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain i2 = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList l = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall(i1, i2, l, i1.line, i1.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // typeof ::= identifier idchain TYPEOF type 
            {
              Typeof RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Typeof(i, c, t, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeof",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= CONST SUBROUTINE LBRACE type RBRACE 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodType(t, true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= CONST identifier idchain 
            {
              Type RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, true, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= CONST STRING 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= CONST BOOLEAN 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BooleanType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= CONST FLOAT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FloatType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= CONST INT 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= CONST VAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarType(true, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= VAR 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarType(false, vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidType(vleft, vright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= identifier idchain 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i, c, false, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= HASHMAP LBRACE type COMMA type RBRACE 
            {
              Type RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashmapType(t1, t2, false, hleft, hright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringType(false, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatType(false, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(false, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= type LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayType(t, false, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameter ::= type identifier 
            {
              Param RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(t, i, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // argchain ::= 
            {
              ArgChain RESULT =null;
		 RESULT = new ArgChain(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // argchain ::= COMMA parameter argchain 
            {
              ArgChain RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p, 0); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argchain",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arglist ::= LPAREN RPAREN 
            {
              ArgList RESULT =null;
		 RESULT = new ArgList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arglist ::= LPAREN parameter argchain RPAREN 
            {
              ArgList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgChain c = (ArgChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArgList(p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // classvardec ::= type PUBLIC identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 3, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // classvardec ::= type PROTECTED identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 2, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // classvardec ::= type PRIVATE identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 0, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // classvardec ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i, 1, t.line, t.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classvardec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vardeclist ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vardeclist ::= vardeclist classvardec 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(v); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // methoddef ::= PROTECTED SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 2, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // methoddef ::= SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 1, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // methoddef ::= PRIVATE SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 0, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // methoddef ::= PUBLIC SUBROUTINE type identifier arglist COLON statementlist END 
            {
              MethodDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDef(r, i, a, l, 3, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constructor ::= CONSTRUCTOR arglist COLON statementlist END 
            {
              Constructor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constructor(a, s, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constructorlist ::= 
            {
              ConstructorList RESULT =null;
		 RESULT = new ConstructorList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constructorlist ::= constructorlist constructor 
            {
              ConstructorList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstructorList l = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructorlist",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // classdef ::= PROTECTED SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2, c, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classdef ::= PROTECTED SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2, c, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classdef ::= SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 1, c, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdef ::= SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 1, c, true, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdef ::= PRIVATE SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0, c, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdef ::= PRIVATE SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0, c, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdef ::= PUBLIC SINGLETON CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3, c, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classdef ::= PUBLIC SINGLETON CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3, c, true, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classdef ::= PROTECTED CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 2, c, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classdef ::= PROTECTED CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 2, c, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classdef ::= CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 1, c, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // classdef ::= CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 1, c, false, c1left, c1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // classdef ::= PRIVATE CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 0, c, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classdef ::= PRIVATE CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 0, c, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classdef ::= PUBLIC CLASS identifier EXTENDS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExtendsClassDef(i1, i2, d, v, 3, c, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classdef ::= PUBLIC CLASS identifier COLON vardeclist constructorlist deflist END 
            {
              ClassDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstructorList c = (ConstructorList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleClassDef(i, d, v, 3, c, false, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exceptiondef ::= PROTECTED EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, pleft, pright), 2, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exceptiondef ::= PRIVATE EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, pleft, pright), 0, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exceptiondef ::= PUBLIC EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, pleft, pright), 3, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exceptiondef ::= EXCEPTION identifier LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              ExceptionDef RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExceptionDef(i, new StringLiteral(s, eleft, eright), 1, eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exceptiondef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // deflist ::= 
            {
              DefList RESULT =null;
		 RESULT = new DefList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deflist ::= deflist exceptiondef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExceptionDef e = (ExceptionDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(e); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deflist ::= deflist methoddef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(m); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // deflist ::= deflist classdef 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.add(c); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deflist",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementlist ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementlist ::= statement statementlist 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= DEBUG START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, true, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= START statementlist END deflist 
            {
              Program RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(s, d, false, s1left, s1right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usinglist ::= 
            {
              UsingList RESULT =null;
		 RESULT = new UsingList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usinglist ::= usinglist USING identifier idchain SEMICOLON 
            {
              UsingList RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdChain c = (IdChain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 u.add(new Using(i, c, i.line, i.column)); RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usinglist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sage ::= SAGE identifier SEMICOLON usinglist deflist 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefList d = (DefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, d, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sage start_val = (Sage)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sage ::= SAGE identifier SEMICOLON usinglist program 
            {
              Sage RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UsingList u = (UsingList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sage(i, p, u, i.line, i.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sage",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

