package symboltable;

import ast.*;

public interface Visitor{
	public SageSym visit(Sage s);
	public Sym visit(Using u);
	public Sym visit(UsingList u);
	public Sym visit(Program p);
	public Sym visit(StatementList l);
	public Sym visit(DefList d);
	public ClassSym visit(SimpleClassDef s);
	public ClassSym visit(ExtendsClassDef e);
	public MethodSym visit(Constructor c);
	public MethodSym visit(MethodDef m);
	public VarSym visit(VarDecl v);
	public Sym visit(ArgList a);
	public Sym visit(Param p);
	public TypeSym visit(ArrayType t);
	public TypeSym visit(IntType t);
	public TypeSym visit(FloatType t);
	public TypeSym visit(BooleanType t);
	public TypeSym visit(StringType t);
	public TypeSym visit(HashmapType t);
	public TypeSym visit(VoidType t);
	public TypeSym visit(VarType v);
	public MethodScope visit(Block b);
	public MethodScope visit(If i);
	public MethodScope visit(While w);
	public MethodScope visit(For f);
	public MethodScope visit(Foreach f);
	public MethodScope visit(DoWhile d);
	public Sym visit(Print p);
	public VarSym visit(VarDecAssignment v);
	public void visit(Assignment a);
	public void visit(HashmapAssignment h);
	public void visit(ArrayAssignment a);
	public void visit(Return r);
	public void visit(Assert a);
	public void visit(Exit e);
	public void visit(Break b);	
	public void visit(Continue c);
	public void visit(Increment i);
	public void visit(Decrement d);
	public void visit(RatherList l);
	public MethodScope visit(Rather r);
	public TypeSym visit(And a);
	public TypeSym visit(Or o);
	public TypeSym visit(Nand n);
	public TypeSym visit(Nor n);
	public TypeSym visit(Equals e);
	public TypeSym visit(Plus p);
	public TypeSym visit(Minus m);
	public TypeSym visit(Multiply m);
	public TypeSym visit(Power p);
	public TypeSym visit(Divide d);
	public TypeSym visit(Modulo m);
	public TypeSym visit(GreaterThanEqualTo g);
	public TypeSym visit(LessThanEqualTo l);
	public TypeSym visit(GreaterThan g);
	public TypeSym visit(LessThan l);
	public TypeSym visit(HashmapExpr h);
	public TypeSym visit(ArrayExpr a);
	public TypeSym visit(ObjectVarAccess o);
	public TypeSym visit(MethodCall m);
	public TypeSym visit(ArrayLength l);
	public TypeSym visit(IntLiteral i);
	public TypeSym visit(FloatLiteral f);
	public TypeSym visit(True t);
	public TypeSym visit(False f);
	public TypeSym visit(Nil n);
	public TypeSym visit(ParentExpr p);
	public TypeSym visit(Not n);
	public TypeSym visit(IdentifierExpr i);
	public TypeSym visit(ObjectCreate o);
	public TypeSym visit(This t);
	public TypeSym visit(ArrayCreate a);
	public TypeSym visit(HashmapCreate h);
	public TypeSym visit(StringLiteral s);
	public TypeSym visit(ParamList p);
	public TypeSym visit(Identifier i);	
	public TypeSym visit(IdentifierType i);
	public Sym visit(Statement s);
	public TypeSym visit(Type t);
	public TypeSym visit(Expression e);
	public TypeSym visit(ArrayLiteral a);
	public void visit(IdChain i);
	public void visit(MethodCallStatement m);
	public TypeSym visit(UnaryMinus u);
	public TypeSym visit(Super s);
	public MethodScope visit(Until u);
	public MethodScope visit(Unless u);
	public TypeSym visit(Typeof t);
	public TypeSym visit(Differs d);
	public TypeSym visit(MethodType m);
	public MethodSym visit(MethodLiteral m);
	public TypeSym visit(ArgChain a);
	public void visit(ExprChain e);
	public void visit(Throw t);
	public MethodScope visit(TryCatch t);
	public MethodScope visit(Catch c);
	public void visit(CatchList c);
	public TypeSym visit(PostIncrement p);
	public TypeSym visit(PreIncrement p);
	public TypeSym visit(PostDecrement p);
	public TypeSym visit(PreDecrement p);
}