sage shadow;
using fire;
using fire.wind.water.air?;

public class Example:
	
	const int x;
	hashmap{string, int} w;
	
	wut x;
	
	constructor(int x, int y):
	
	end
	
	constructor():
		exec daisy with (banana, orange, kiwi);
		exec peach with ();
		exec rose with (garden);
		
		const subroutine{const subroutine{boolean}} run;
		run = () => {return () => {return true;}; };
	end
	
	constructor(int z):
		#testing conditionals
		if true and false or !(true nand false) nor (x equals y) and (y differs z):
			print("some stuff");
			boolean h = true equals true and false differs true;
		end
		#This isn't allowed but for grammars sake i'll test it
		return 8%7^4;
		return exec y with (z);
		return 5 - -5.5;
		
		unless ((x >= 7) and (y > 0)) or (z < 9) nand (9 <= 0):
			return x;
		end
		
		until true:
			exec loop with ();
		end

		o = create Object();
		Object o = create Object(7, 10, false, "hello", x{"string"});
	end
	
	private class InnerClass:
		protected singleton class WayInnerClass extends InnerClass:
		end
		
		private subroutine int y(int z, hashmap{string, int} y, bool e_?):
			throw e;
			try:
				throw e;
				throw e.e.e.e.e.e.e;
			catch e.e.e.e e:
				return this;
			catch r.r.r d:
			
			finally:
				i = 1;
			end
			
			try:
				print(y);
			catch t.t.t t:
			end
		end
	end
	
	private exception e ("hello");
	public exception e ("hello");
	protected exception e ("hello");
	exception e ("hello");

end
