/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;
import java.math.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>OcarinaLexer.flex</tt>
 */
class OcarinaLexer extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\13\2\0\1\16\23\0\1\56\1\17\1\12\1\0"+
    "\1\74\1\0\1\14\1\46\1\47\1\15\1\54\1\73\1\55\1\7"+
    "\1\60\1\2\7\6\2\1\1\71\1\70\1\63\1\62\1\61\1\11"+
    "\1\72\1\5\1\52\3\5\1\50\2\10\1\45\11\10\1\51\4\10"+
    "\1\4\2\10\1\64\1\0\1\65\1\57\1\10\1\0\1\22\1\32"+
    "\1\27\1\26\1\24\1\36\1\42\1\37\1\34\1\10\1\53\1\30"+
    "\1\40\1\25\1\33\1\41\1\44\1\23\1\20\1\21\1\31\1\35"+
    "\1\43\1\3\2\10\1\66\1\0\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\1"+
    "\1\7\1\1\23\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\0\1\3"+
    "\1\33\1\0\1\3\1\6\2\0\1\34\21\4\1\35"+
    "\11\4\1\36\1\4\1\37\13\4\1\40\1\41\1\42"+
    "\1\43\1\44\1\0\10\4\1\45\5\4\1\46\3\4"+
    "\1\47\1\50\13\4\1\51\1\52\3\4\1\53\7\4"+
    "\1\0\2\4\1\54\2\4\1\55\1\56\4\4\1\57"+
    "\1\60\1\61\1\4\1\62\14\4\1\63\13\4\1\64"+
    "\1\4\1\0\1\65\2\4\1\66\5\4\1\67\1\4"+
    "\1\70\3\4\1\71\1\72\1\4\1\73\1\74\1\4"+
    "\1\75\1\76\2\4\1\77\6\4\1\100\1\0\1\101"+
    "\1\4\1\102\1\103\1\104\1\4\1\105\1\106\2\4"+
    "\1\107\1\110\4\4\1\111\4\4\1\6\1\4\1\112"+
    "\2\4\1\113\1\114\1\4\1\115\1\0\3\4\1\6"+
    "\2\4\1\116\1\4\1\117\5\4\1\120\1\0\2\4"+
    "\1\121\1\4\1\122\1\0\1\4\1\123\1\124\1\0"+
    "\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\75\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\75\0\75"+
    "\0\u06e9\0\u0726\0\75\0\75\0\75\0\u0763\0\75\0\u07a0"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0131\0\u07dd\0\u081a\0\u0857\0\u0131\0\75\0\u0894"+
    "\0\u0225\0\75\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\364\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\364\0\u0f03\0\364"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\75\0\75\0\75\0\75\0\u0857"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\364\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\364"+
    "\0\u1535\0\u1572\0\u15af\0\364\0\364\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\364\0\364\0\u188b\0\u18c8\0\u1905\0\364\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\364\0\u1ba4\0\u1be1\0\364\0\364\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\364\0\364\0\364\0\u1d12\0\364\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\364\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\364\0\u22ca"+
    "\0\u2307\0\364\0\u2344\0\u2381\0\364\0\u23be\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\364\0\u24ef\0\364\0\u252c\0\u2569\0\u25a6"+
    "\0\364\0\364\0\u25e3\0\364\0\364\0\u2620\0\364\0\364"+
    "\0\u265d\0\u269a\0\364\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb"+
    "\0\u2808\0\364\0\u2845\0\364\0\u2882\0\364\0\364\0\364"+
    "\0\u28bf\0\364\0\364\0\u28fc\0\u2939\0\364\0\364\0\u2976"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\364\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\364\0\u2bd8\0\u2c15\0\364\0\364\0\u2c52"+
    "\0\364\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd"+
    "\0\364\0\u2e3a\0\75\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b"+
    "\0\364\0\u2fa8\0\u2fe5\0\u3022\0\364\0\u305f\0\75\0\u309c"+
    "\0\u30d9\0\364\0\75\0\u3116\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\3\1\6\1\5\1\2"+
    "\1\7\1\10\1\11\1\12\1\10\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\5\1\34"+
    "\1\35\1\36\2\5\1\37\1\40\4\5\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\76\0"+
    "\2\3\3\0\1\3\1\62\66\0\1\63\1\64\2\65"+
    "\1\0\1\64\1\62\66\0\6\5\1\0\2\5\6\0"+
    "\26\5\2\0\4\5\22\0\2\66\3\0\1\66\66\0"+
    "\13\7\1\67\61\7\13\0\1\10\2\0\1\10\72\0"+
    "\1\70\60\0\17\71\1\72\55\71\1\0\6\5\1\0"+
    "\2\5\6\0\1\5\1\73\1\74\6\5\1\75\14\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\3\5"+
    "\1\76\13\5\1\77\6\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\100\4\5\1\101\20\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\2\5\1\102"+
    "\1\5\1\103\21\5\2\0\4\5\22\0\2\5\1\104"+
    "\3\5\1\0\2\5\6\0\5\5\1\105\2\5\1\106"+
    "\13\5\1\107\1\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\2\5\1\110\10\5\1\111\1\112\11\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\4\5"+
    "\1\113\6\5\1\114\12\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\3\5\1\115\4\5\1\116\2\5"+
    "\1\117\12\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\120\21\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\121\4\5\1\122\20\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\3\5\1\123"+
    "\1\124\6\5\1\125\12\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\3\5\1\126\22\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\5\5\1\127\10\5"+
    "\1\130\7\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\2\5\1\131\10\5\1\132\12\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\2\5\1\133\5\5"+
    "\1\134\2\5\1\135\12\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\2\5\1\136\23\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\3\5\1\137\5\5"+
    "\1\140\14\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\141\21\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\14\5\1\142\2\5\1\143\6\5"+
    "\2\0\4\5\75\0\1\144\75\0\1\145\101\0\1\146"+
    "\74\0\1\147\13\0\2\63\3\0\1\63\1\62\66\0"+
    "\1\63\1\64\3\0\1\64\1\62\66\0\2\150\2\0"+
    "\2\150\13\0\1\150\1\0\1\150\1\0\2\150\2\0"+
    "\1\150\3\0\1\150\11\0\1\150\1\0\1\150\36\0"+
    "\1\151\61\0\6\5\1\0\2\5\6\0\2\5\1\152"+
    "\1\153\22\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\22\5\1\154\3\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\12\5\1\155\6\5\1\156\4\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\11\5"+
    "\1\157\14\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\14\5\1\160\11\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\161\25\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\6\5\1\162\17\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\1\5\1\163"+
    "\24\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\1\5\1\164\24\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\1\5\1\165\2\5\1\166\7\5\1\167"+
    "\11\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\6\5\1\170\17\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\1\171\25\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\11\5\1\172\14\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\5\5\1\173\20\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\3\5"+
    "\1\174\22\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\10\5\1\175\15\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\12\5\1\176\13\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\4\5\1\177\21\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\2\5"+
    "\1\200\23\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\5\5\1\201\20\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\5\5\1\202\20\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\14\5\1\203\11\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\1\5"+
    "\1\204\6\5\1\205\15\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\4\5\1\206\21\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\22\5\1\207\3\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\13\5"+
    "\1\210\12\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\1\5\1\211\24\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\3\5\1\212\22\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\14\5\1\213\11\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\10\5"+
    "\1\214\15\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\13\5\1\215\12\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\3\5\1\216\22\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\1\217\25\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\13\5\1\220"+
    "\1\221\11\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\12\5\1\222\13\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\5\1\223\24\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\1\5\1\224\24\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\14\5"+
    "\1\225\11\5\2\0\4\5\21\0\15\226\1\0\57\226"+
    "\1\0\6\5\1\0\2\5\6\0\3\5\1\227\22\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\14\5"+
    "\1\230\11\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\231\21\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\3\5\1\232\22\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\4\5\1\233\21\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\4\5"+
    "\1\234\21\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\1\235\25\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\4\5\1\236\21\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\17\5\1\237\6\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\11\5\1\240"+
    "\14\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\4\5\1\241\21\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\7\5\1\242\16\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\1\5\1\243\24\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\4\5\1\244"+
    "\21\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\2\5\1\245\23\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\6\5\1\246\17\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\11\5\1\247\14\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\2\5\1\250"+
    "\23\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\1\251\25\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\1\252\1\253\24\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\22\5\1\254\3\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\5\5\1\255\20\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\14\5"+
    "\1\256\11\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\257\21\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\2\5\1\260\23\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\14\5\1\261\11\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\10\5"+
    "\1\262\15\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\6\5\1\263\17\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\264\25\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\2\5\1\265\23\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\17\5\1\266"+
    "\6\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\1\5\1\267\24\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\5\5\1\270\7\5\1\271\10\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\10\5\1\272"+
    "\15\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\25\5\1\273\2\0\1\274\1\275\1\276\1\5\22\0"+
    "\6\5\1\0\2\5\6\0\17\5\1\277\6\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\10\5\1\300"+
    "\15\5\2\0\4\5\21\0\14\226\1\301\60\226\1\0"+
    "\6\5\1\0\2\5\6\0\1\5\1\302\24\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\5\5\1\303"+
    "\20\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\13\5\1\304\12\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\3\5\1\305\22\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\3\5\1\306\22\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\4\5\1\307"+
    "\21\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\3\5\1\310\22\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\5\5\1\311\20\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\10\5\1\312\15\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\22\5\1\313"+
    "\3\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\1\5\1\314\24\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\1\315\25\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\5\1\316\24\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\14\5\1\317\11\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\1\5"+
    "\1\320\24\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\22\5\1\321\3\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\10\5\1\322\15\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\1\323\25\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\26\5\2\0"+
    "\3\5\1\324\22\0\6\5\1\0\2\5\6\0\5\5"+
    "\1\325\20\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\326\21\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\4\5\1\327\21\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\1\5\1\330\24\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\20\5"+
    "\1\331\5\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\332\21\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\5\1\333\24\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\2\5\1\334\23\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\14\5"+
    "\1\335\11\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\5\5\1\336\20\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\10\5\1\337\15\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\1\5\1\340\24\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\13\5"+
    "\1\341\12\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\342\21\5\2\0\4\5\21\0\14\226"+
    "\1\343\60\226\1\0\6\5\1\0\2\5\6\0\22\5"+
    "\1\344\3\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\11\5\1\345\14\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\5\1\346\24\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\3\5\1\347\22\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\5\5"+
    "\1\350\20\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\6\5\1\351\17\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\352\25\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\4\5\1\353\21\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\3\5\1\354"+
    "\22\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\5\5\1\355\20\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\17\5\1\356\6\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\1\357\25\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\2\5\1\360\23\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\2\5"+
    "\1\361\23\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\7\5\1\362\16\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\1\5\1\363\24\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\7\5\1\364\16\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\1\5"+
    "\1\365\24\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\13\5\1\366\12\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\3\5\1\367\22\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\13\5\1\370\12\5"+
    "\2\0\4\5\21\0\14\226\1\371\60\226\1\0\6\5"+
    "\1\0\2\5\6\0\1\5\1\372\24\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\1\373\25\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\11\5\1\374"+
    "\14\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\11\5\1\375\14\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\5\5\1\376\20\5\2\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\21\5\1\377\4\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\1\5\1\u0100"+
    "\24\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\4\5\1\u0101\21\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\26\5\1\u0102\1\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\2\5\1\u0103\23\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\14\5\1\u0104\11\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\10\5"+
    "\1\u0105\15\5\2\0\4\5\35\0\1\u0106\61\0\6\5"+
    "\1\0\2\5\6\0\14\5\1\u0107\11\5\2\0\4\5"+
    "\22\0\6\5\1\0\2\5\6\0\7\5\1\u0108\16\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\4\5"+
    "\1\u0109\21\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\u010a\21\5\2\0\4\5\70\0\1\u010b"+
    "\26\0\6\5\1\0\2\5\6\0\1\5\1\u010c\24\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\5\5"+
    "\1\u010d\20\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\4\5\1\u010e\21\5\2\0\4\5\35\0\1\67"+
    "\61\0\6\5\1\0\2\5\6\0\5\5\1\u010f\20\5"+
    "\2\0\4\5\22\0\6\5\1\0\2\5\6\0\1\5"+
    "\1\u0110\24\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\6\5\1\u0111\17\5\2\0\4\5\22\0\6\5"+
    "\1\0\2\5\6\0\26\5\1\u0112\1\0\4\5\22\0"+
    "\6\5\1\0\2\5\6\0\22\5\1\u0113\3\5\2\0"+
    "\4\5\22\0\6\5\1\0\2\5\6\0\2\5\1\u0114"+
    "\23\5\2\0\4\5\22\0\6\5\1\0\2\5\6\0"+
    "\4\5\1\u0115\21\5\2\0\4\5\22\0\6\5\1\0"+
    "\2\5\6\0\13\5\1\u0116\12\5\2\0\4\5\70\0"+
    "\1\u0117\26\0\6\5\1\0\2\5\6\0\26\5\1\u0118"+
    "\1\0\4\5\22\0\6\5\1\0\2\5\6\0\5\5"+
    "\1\u0119\20\5\2\0\4\5\22\0\6\5\1\0\2\5"+
    "\6\0\3\5\1\u011a\22\5\2\0\4\5\70\0\1\u011b"+
    "\26\0\6\5\1\0\2\5\6\0\26\5\1\u011c\1\0"+
    "\4\5\70\0\1\u011d\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12627];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\24\1\2\11\2\1\3\11"+
    "\1\1\1\11\1\1\11\11\1\0\2\1\1\0\1\1"+
    "\1\11\2\0\1\11\51\1\4\11\1\1\1\0\54\1"+
    "\1\0\52\1\1\0\41\1\1\0\36\1\1\0\10\1"+
    "\1\11\6\1\1\0\4\1\1\11\1\0\2\1\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol symbol(int type) {
    	return new Symbol(type, yyline, yycolumn);
    }

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OcarinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Return an error message*/
            }
          case 86: break;
          case 2: 
            { return symbol(INTLITERAL, new BigInteger(yytext()));
            }
          case 87: break;
          case 3: 
            { return symbol(FLOATLITERAL, new BigDecimal(yytext()));
            }
          case 88: break;
          case 4: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 89: break;
          case 5: 
            { return symbol(DOT);
            }
          case 90: break;
          case 6: 
            { /*Do nothing*/
            }
          case 91: break;
          case 7: 
            { return symbol(MULT);
            }
          case 92: break;
          case 8: 
            { return symbol(LPAREN);
            }
          case 93: break;
          case 9: 
            { return symbol(RPAREN);
            }
          case 94: break;
          case 10: 
            { return symbol(PLUS);
            }
          case 95: break;
          case 11: 
            { return symbol(MINUS);
            }
          case 96: break;
          case 12: 
            { return symbol(BANG);
            }
          case 97: break;
          case 13: 
            { return symbol(POWER);
            }
          case 98: break;
          case 14: 
            { return symbol(DIV);
            }
          case 99: break;
          case 15: 
            { return symbol(GTHAN);
            }
          case 100: break;
          case 16: 
            { return symbol(EQUAL);
            }
          case 101: break;
          case 17: 
            { return symbol(LTHAN);
            }
          case 102: break;
          case 18: 
            { return symbol(LBRACKET);
            }
          case 103: break;
          case 19: 
            { return symbol(RBRACKET);
            }
          case 104: break;
          case 20: 
            { return symbol(LBRACE);
            }
          case 105: break;
          case 21: 
            { return symbol(RBRACE);
            }
          case 106: break;
          case 22: 
            { return symbol(SEMICOLON);
            }
          case 107: break;
          case 23: 
            { return symbol(COLON);
            }
          case 108: break;
          case 24: 
            { return symbol(AT);
            }
          case 109: break;
          case 25: 
            { return symbol(COMMA);
            }
          case 110: break;
          case 26: 
            { return symbol(MOD);
            }
          case 111: break;
          case 27: 
            { return symbol(INTLITERAL, new BigInteger(yytext(), 8));
            }
          case 112: break;
          case 28: 
            { return symbol(STRINGLITERAL, yytext());
            }
          case 113: break;
          case 29: 
            { return symbol(DO);
            }
          case 114: break;
          case 30: 
            { return symbol(OR);
            }
          case 115: break;
          case 31: 
            { return symbol(IF);
            }
          case 116: break;
          case 32: 
            { return symbol(INCREMENT);
            }
          case 117: break;
          case 33: 
            { return symbol(DECREMENT);
            }
          case 118: break;
          case 34: 
            { return symbol(GTHANE);
            }
          case 119: break;
          case 35: 
            { return symbol(LTHANE);
            }
          case 120: break;
          case 36: 
            { return symbol(INTLITERAL, new BigInteger(yytext().substring(2), 16));
            }
          case 121: break;
          case 37: 
            { return symbol(AND);
            }
          case 122: break;
          case 38: 
            { return symbol(END);
            }
          case 123: break;
          case 39: 
            { return symbol(NOR);
            }
          case 124: break;
          case 40: 
            { return symbol(NIL);
            }
          case 125: break;
          case 41: 
            { return symbol(INT);
            }
          case 126: break;
          case 42: 
            { return symbol(VAR);
            }
          case 127: break;
          case 43: 
            { return symbol(FOR);
            }
          case 128: break;
          case 44: 
            { return symbol(SAGE);
            }
          case 129: break;
          case 45: 
            { return symbol(TRUE);
            }
          case 130: break;
          case 46: 
            { return symbol(THIS);
            }
          case 131: break;
          case 47: 
            { return symbol(EXEC);
            }
          case 132: break;
          case 48: 
            { return symbol(EXIT);
            }
          case 133: break;
          case 49: 
            { return symbol(ELSE);
            }
          case 134: break;
          case 50: 
            { return symbol(NAND);
            }
          case 135: break;
          case 51: 
            { return symbol(VOID);
            }
          case 136: break;
          case 52: 
            { return symbol(WITH);
            }
          case 137: break;
          case 53: 
            { return symbol(START);
            }
          case 138: break;
          case 54: 
            { return symbol(SUPER);
            }
          case 139: break;
          case 55: 
            { return symbol(DEBUG);
            }
          case 140: break;
          case 56: 
            { return symbol(CLASS);
            }
          case 141: break;
          case 57: 
            { return symbol(USING);
            }
          case 142: break;
          case 58: 
            { return symbol(UNTIL);
            }
          case 143: break;
          case 59: 
            { return symbol(BREAK);
            }
          case 144: break;
          case 60: 
            { return symbol(BEGIN);
            }
          case 145: break;
          case 61: 
            { return symbol(FALSE);
            }
          case 146: break;
          case 62: 
            { return symbol(FLOAT);
            }
          case 147: break;
          case 63: 
            { return symbol(PRINT);
            }
          case 148: break;
          case 64: 
            { return symbol(WHILE);
            }
          case 149: break;
          case 65: 
            { return symbol(STRING);
            }
          case 150: break;
          case 66: 
            { return symbol(ASSERT);
            }
          case 151: break;
          case 67: 
            { return symbol(RATHER);
            }
          case 152: break;
          case 68: 
            { return symbol(RETURN);
            }
          case 153: break;
          case 69: 
            { return symbol(EQUALS);
            }
          case 154: break;
          case 70: 
            { return symbol(CREATE);
            }
          case 155: break;
          case 71: 
            { return symbol(LENGTH);
            }
          case 156: break;
          case 72: 
            { return symbol(UNLESS);
            }
          case 157: break;
          case 73: 
            { return symbol(PUBLIC);
            }
          case 158: break;
          case 74: 
            { return symbol(EXTENDS);
            }
          case 159: break;
          case 75: 
            { return symbol(BOOLEAN);
            }
          case 160: break;
          case 76: 
            { return symbol(HASHMAP);
            }
          case 161: break;
          case 77: 
            { return symbol(PRIVATE);
            }
          case 162: break;
          case 78: 
            { return symbol(CONTINUE);
            }
          case 163: break;
          case 79: 
            { return symbol(GETINT);
            }
          case 164: break;
          case 80: 
            { return symbol(PROTECTED);
            }
          case 165: break;
          case 81: 
            { return symbol(SUBROUTINE);
            }
          case 166: break;
          case 82: 
            { return symbol(GETFLOAT);
            }
          case 167: break;
          case 83: 
            { return symbol(CONSTRUCTOR);
            }
          case 168: break;
          case 84: 
            { return symbol(GETSTRING);
            }
          case 169: break;
          case 85: 
            { return symbol(GETBOOLEAN);
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
