/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;
import java.math.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./OcarinaLexer.flex</tt>
 */
class OcarinaLexer extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\20\1\23\1\23\1\22\23\0\1\64\1\25\1\17"+
    "\1\0\1\102\1\0\1\21\1\55\1\56\1\65\1\6\1\101\1\11"+
    "\1\7\1\67\1\2\7\5\1\1\1\16\1\77\1\76\1\71\1\70"+
    "\1\63\1\0\1\100\1\13\1\61\3\4\1\57\2\0\1\54\11\0"+
    "\1\60\4\0\1\3\1\0\1\14\1\72\1\0\1\73\1\66\1\15"+
    "\1\0\1\10\1\40\1\34\1\33\1\31\1\46\1\51\1\47\1\42"+
    "\1\0\1\44\1\35\1\43\1\32\1\41\1\50\1\53\1\30\1\26"+
    "\1\27\1\37\1\45\1\52\1\36\1\62\1\12\1\74\1\0\1\75"+
    "\7\0\1\23\u1fa2\0\1\23\1\23\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\2\6"+
    "\25\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\0\1\31\2\2\1\31\4\0"+
    "\1\32\1\6\2\0\1\33\17\0\1\34\10\0\1\35"+
    "\1\0\1\36\12\0\1\37\1\40\3\0\1\41\12\0"+
    "\1\42\5\0\1\43\1\44\11\0\1\45\4\0\1\46"+
    "\12\0\1\47\2\0\1\50\1\0\1\51\1\52\2\0"+
    "\1\53\1\0\1\54\1\0\1\55\11\0\1\56\1\57"+
    "\16\0\1\60\1\0\1\61\6\0\1\62\1\0\1\63"+
    "\2\0\1\64\1\65\1\66\1\0\1\67\1\70\2\0"+
    "\1\71\6\0\1\72\1\0\1\73\1\6\1\74\1\0"+
    "\1\75\1\76\1\0\1\77\1\100\1\0\1\101\4\0"+
    "\1\102\4\0\1\103\1\0\1\104\1\0\1\105\1\106"+
    "\1\0\1\107\6\0\1\110\1\0\1\111\5\0\1\112"+
    "\4\0\1\113\1\114\3\0\1\115\2\0\1\116\3\0"+
    "\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\103"+
    "\0\103\0\u081d\0\103\0\103\0\103\0\103\0\103\0\u0860"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\u014f\0\u010c\0\u08a3\0\u08e6\0\u014f\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\103\0\103\0\u0a35\0\u02e1\0\103\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90"+
    "\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\103\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\103"+
    "\0\u107d\0\103\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\103\0\103\0\u135e\0\u13a1"+
    "\0\u13e4\0\103\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\103\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\103\0\103\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\103\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u1b38\0\103\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\103\0\u1e19\0\u1e5c"+
    "\0\103\0\u1e9f\0\103\0\103\0\u1ee2\0\u1f25\0\103\0\u1f68"+
    "\0\103\0\u1fab\0\103\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\103\0\103\0\u2249\0\u228c"+
    "\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\103\0\u25f3\0\103\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\103\0\u27c8\0\103"+
    "\0\u280b\0\u284e\0\103\0\103\0\103\0\u2891\0\103\0\103"+
    "\0\u28d4\0\u2917\0\103\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\103\0\u2aec\0\103\0\u25f3\0\103\0\u2b2f\0\103"+
    "\0\103\0\u2b72\0\103\0\103\0\u2bb5\0\103\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\103\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10"+
    "\0\u2e53\0\103\0\u2e96\0\103\0\103\0\u2ed9\0\103\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\103\0\u30ae\0\103"+
    "\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\103\0\u3240\0\u3283"+
    "\0\u32c6\0\u3309\0\103\0\103\0\u334c\0\u338f\0\u33d2\0\103"+
    "\0\u3415\0\u3458\0\103\0\u349b\0\u34de\0\u3521\0\u3564";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\3\1\5\1\6\1\7"+
    "\1\10\4\2\1\3\1\11\1\12\1\13\1\12\1\2"+
    "\1\12\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\2\1\25\1\26\1\27\1\30\1\31"+
    "\1\2\1\32\1\33\1\34\1\35\1\36\1\37\2\2"+
    "\1\40\1\41\4\2\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\104\0\2\3\2\0\1\3\1\0"+
    "\1\62\6\0\1\3\65\0\1\63\1\64\1\65\1\0"+
    "\1\64\1\0\1\62\6\0\1\63\17\0\1\65\45\0"+
    "\2\63\2\0\1\63\1\0\1\62\6\0\1\63\65\0"+
    "\2\66\2\0\1\66\10\0\1\66\75\0\1\67\14\0"+
    "\1\70\1\0\1\71\1\0\1\72\51\0\2\63\2\0"+
    "\1\63\1\0\1\62\6\0\1\63\44\0\1\73\17\0"+
    "\20\11\1\74\62\11\20\0\1\12\1\0\1\12\1\0"+
    "\1\12\77\0\1\75\70\0\1\76\15\0\1\77\65\0"+
    "\1\100\16\0\1\101\7\0\1\102\73\0\1\103\16\0"+
    "\1\104\43\0\1\105\20\0\1\106\103\0\1\107\2\0"+
    "\1\110\1\111\14\0\1\112\37\0\1\113\30\0\1\114"+
    "\1\115\71\0\1\116\7\0\1\117\71\0\1\120\4\0"+
    "\1\121\3\0\1\122\72\0\1\123\77\0\1\124\104\0"+
    "\1\125\1\126\7\0\1\127\71\0\1\130\104\0\1\131"+
    "\13\0\1\132\75\0\1\133\102\0\1\134\51\0\1\135"+
    "\24\0\1\136\3\0\1\137\51\0\1\140\122\0\1\141"+
    "\6\0\1\142\74\0\1\143\120\0\1\144\123\0\1\145"+
    "\102\0\1\146\13\0\1\63\1\64\2\0\1\64\1\0"+
    "\1\62\6\0\1\63\65\0\2\65\1\0\2\65\2\0"+
    "\1\65\2\0\1\65\2\0\1\65\12\0\1\65\1\0"+
    "\2\65\3\0\1\65\5\0\1\65\10\0\1\65\1\0"+
    "\1\65\33\0\1\147\116\0\1\150\104\0\1\151\105\0"+
    "\1\152\70\0\1\153\132\0\1\154\41\0\1\155\17\0"+
    "\1\156\6\0\1\157\103\0\1\160\101\0\1\161\105\0"+
    "\1\162\67\0\1\163\102\0\1\164\106\0\1\165\75\0"+
    "\1\166\103\0\1\167\12\0\1\170\77\0\1\171\75\0"+
    "\1\172\100\0\1\173\107\0\1\174\105\0\1\175\73\0"+
    "\1\176\61\0\1\177\124\0\1\200\102\0\1\201\112\0"+
    "\1\202\71\0\1\203\122\0\1\204\72\0\1\205\70\0"+
    "\1\206\107\0\1\207\110\0\1\210\75\0\1\211\106\0"+
    "\1\212\71\0\1\213\100\0\1\214\115\0\1\215\1\216"+
    "\100\0\1\217\71\0\1\220\115\0\1\221\53\0\1\222"+
    "\120\0\1\223\61\0\1\224\72\0\20\153\1\0\1\225"+
    "\2\0\57\153\31\0\1\226\101\0\1\227\114\0\1\230"+
    "\100\0\1\231\72\0\1\232\103\0\1\233\77\0\1\234"+
    "\123\0\1\235\72\0\1\236\74\0\1\237\102\0\1\240"+
    "\100\0\1\241\63\0\1\242\125\0\1\243\106\0\1\244"+
    "\53\0\1\245\120\0\1\246\103\0\1\247\124\0\1\250"+
    "\63\0\1\251\60\0\1\252\134\0\1\253\75\0\1\254"+
    "\111\0\1\255\71\0\1\256\75\0\1\257\64\0\1\260"+
    "\141\0\1\261\62\0\1\262\105\0\1\263\12\0\1\264"+
    "\72\0\1\265\121\0\1\266\2\0\1\267\1\270\1\271"+
    "\56\0\1\272\56\0\1\273\121\0\1\274\134\0\1\275"+
    "\20\0\20\153\1\0\1\276\2\0\57\153\27\0\1\277"+
    "\105\0\1\300\111\0\1\301\72\0\1\302\101\0\1\303"+
    "\104\0\1\304\105\0\1\305\116\0\1\306\60\0\1\307"+
    "\101\0\1\310\116\0\1\311\67\0\1\312\124\0\1\313"+
    "\75\0\1\314\70\0\1\315\101\0\1\316\102\0\1\317"+
    "\100\0\1\320\116\0\1\321\70\0\1\322\100\0\1\323"+
    "\63\0\1\324\134\0\1\325\72\0\1\326\105\0\1\327"+
    "\74\0\1\330\114\0\1\331\72\0\1\332\65\0\1\333"+
    "\115\0\1\334\53\0\20\153\1\0\1\335\2\0\57\153"+
    "\51\0\1\336\70\0\1\337\73\0\1\340\104\0\1\341"+
    "\103\0\1\342\75\0\1\343\105\0\1\344\103\0\1\345"+
    "\117\0\1\346\43\0\1\347\102\0\1\350\126\0\1\351"+
    "\75\0\1\352\107\0\1\353\75\0\1\354\114\0\1\355"+
    "\71\0\1\356\113\0\1\357\56\0\1\360\114\0\1\361"+
    "\101\0\1\362\113\0\1\363\75\0\1\364\120\0\1\365"+
    "\61\0\1\366\104\0\1\367\126\0\1\370\35\0\1\371"+
    "\134\0\1\372\75\0\1\373\55\0\1\374\134\0\1\375"+
    "\71\0\1\376\102\0\1\377\127\0\1\u0100\53\0\1\u0101"+
    "\105\0\1\u0102\101\0\1\u0103\62\0\1\u0104\123\0\1\u0105"+
    "\103\0\1\u0106\124\0\1\u0107\76\0\1\u0108\41\0\1\u0109"+
    "\104\0\1\u010a\121\0\1\u010b\127\0\1\u010c\101\0\1\u010d"+
    "\57\0\1\u010e\63\0\1\u010f\145\0\1\u0110\101\0\1\u0111"+
    "\36\0\1\u0112\147\0\1\u0113\40\0\1\u0114\70\0\1\u0115"+
    "\111\0\1\u0116\107\0\1\u0117\74\0\1\374\4\0\1\360"+
    "\65\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13735];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\2\11\1\1\5\11\1\1\11\11"+
    "\1\0\4\1\4\0\2\11\2\0\1\11\17\0\1\11"+
    "\10\0\1\11\1\0\1\11\12\0\2\11\3\0\1\11"+
    "\12\0\1\11\5\0\2\11\11\0\1\11\4\0\1\11"+
    "\12\0\1\11\2\0\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\16\0\1\11"+
    "\1\0\1\11\6\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\0\2\11\2\0\1\11\6\0\1\11\1\0\1\11"+
    "\1\1\1\11\1\0\2\11\1\0\2\11\1\0\1\11"+
    "\4\0\1\11\4\0\1\1\1\0\1\11\1\0\2\11"+
    "\1\0\1\11\6\0\1\11\1\0\1\11\5\0\1\11"+
    "\4\0\2\11\3\0\1\11\2\0\1\11\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol symbol(int type) {
    	return new Symbol(type, yyline + 1, yycolumn + 1);
    }

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline + 1, yycolumn + 1, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OcarinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Return an error message*/
            }
          case 79: break;
          case 2: 
            { return symbol(INTLITERAL, new BigInteger(yytext()));
            }
          case 80: break;
          case 3: 
            { return symbol(PLUS);
            }
          case 81: break;
          case 4: 
            { return symbol(DOT);
            }
          case 82: break;
          case 5: 
            { return symbol(MINUS);
            }
          case 83: break;
          case 6: 
            { /*Do nothing*/
            }
          case 84: break;
          case 7: 
            { return symbol(LPAREN);
            }
          case 85: break;
          case 8: 
            { return symbol(RPAREN);
            }
          case 86: break;
          case 9: 
            { return symbol(GTHAN);
            }
          case 87: break;
          case 10: 
            { return symbol(BANG);
            }
          case 88: break;
          case 11: 
            { return symbol(MULT);
            }
          case 89: break;
          case 12: 
            { return symbol(POWER);
            }
          case 90: break;
          case 13: 
            { return symbol(DIV);
            }
          case 91: break;
          case 14: 
            { return symbol(EQUAL);
            }
          case 92: break;
          case 15: 
            { return symbol(LTHAN);
            }
          case 93: break;
          case 16: 
            { return symbol(LBRACKET);
            }
          case 94: break;
          case 17: 
            { return symbol(RBRACKET);
            }
          case 95: break;
          case 18: 
            { return symbol(LBRACE);
            }
          case 96: break;
          case 19: 
            { return symbol(RBRACE);
            }
          case 97: break;
          case 20: 
            { return symbol(SEMICOLON);
            }
          case 98: break;
          case 21: 
            { return symbol(COLON);
            }
          case 99: break;
          case 22: 
            { return symbol(AT);
            }
          case 100: break;
          case 23: 
            { return symbol(COMMA);
            }
          case 101: break;
          case 24: 
            { return symbol(MOD);
            }
          case 102: break;
          case 25: 
            { return symbol(FLOATLITERAL, new BigDecimal(yytext()));
            }
          case 103: break;
          case 26: 
            { return symbol(POINTER);
            }
          case 104: break;
          case 27: 
            { return symbol(STRINGLITERAL, yytext());
            }
          case 105: break;
          case 28: 
            { return symbol(DO);
            }
          case 106: break;
          case 29: 
            { return symbol(OR);
            }
          case 107: break;
          case 30: 
            { return symbol(IF);
            }
          case 108: break;
          case 31: 
            { return symbol(GTHANE);
            }
          case 109: break;
          case 32: 
            { return symbol(LTHANE);
            }
          case 110: break;
          case 33: 
            { return symbol(AND);
            }
          case 111: break;
          case 34: 
            { return symbol(END);
            }
          case 112: break;
          case 35: 
            { return symbol(NOR);
            }
          case 113: break;
          case 36: 
            { return symbol(NIL);
            }
          case 114: break;
          case 37: 
            { return symbol(INT);
            }
          case 115: break;
          case 38: 
            { return symbol(FOR);
            }
          case 116: break;
          case 39: 
            { return symbol(SAGE);
            }
          case 117: break;
          case 40: 
            { return symbol(STUB);
            }
          case 118: break;
          case 41: 
            { return symbol(TRUE);
            }
          case 119: break;
          case 42: 
            { return symbol(THIS);
            }
          case 120: break;
          case 43: 
            { return symbol(ELSE);
            }
          case 121: break;
          case 44: 
            { return symbol(EXIT);
            }
          case 122: break;
          case 45: 
            { return symbol(NAND);
            }
          case 123: break;
          case 46: 
            { return symbol(MOCK);
            }
          case 124: break;
          case 47: 
            { return symbol(VOID);
            }
          case 125: break;
          case 48: 
            { return symbol(ARRAY);
            }
          case 126: break;
          case 49: 
            { return symbol(START);
            }
          case 127: break;
          case 50: 
            { return symbol(DEBUG);
            }
          case 128: break;
          case 51: 
            { return symbol(CLASS);
            }
          case 129: break;
          case 52: 
            { return symbol(USING);
            }
          case 130: break;
          case 53: 
            { return symbol(BREAK);
            }
          case 131: break;
          case 54: 
            { return symbol(BEGIN);
            }
          case 132: break;
          case 55: 
            { return symbol(FALSE);
            }
          case 133: break;
          case 56: 
            { return symbol(FLOAT);
            }
          case 134: break;
          case 57: 
            { return symbol(PRINT);
            }
          case 135: break;
          case 58: 
            { return symbol(WHILE);
            }
          case 136: break;
          case 59: 
            { return symbol(ASSERT);
            }
          case 137: break;
          case 60: 
            { return symbol(STRING);
            }
          case 138: break;
          case 61: 
            { return symbol(RATHER);
            }
          case 139: break;
          case 62: 
            { return symbol(RETURN);
            }
          case 140: break;
          case 63: 
            { return symbol(EQUALS);
            }
          case 141: break;
          case 64: 
            { return symbol(CREATE);
            }
          case 142: break;
          case 65: 
            { return symbol(LENGTH);
            }
          case 143: break;
          case 66: 
            { return symbol(PUBLIC);
            }
          case 144: break;
          case 67: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 145: break;
          case 68: 
            { return symbol(EXTENDS);
            }
          case 146: break;
          case 69: 
            { return symbol(BOOLEAN);
            }
          case 147: break;
          case 70: 
            { return symbol(HASHMAP);
            }
          case 148: break;
          case 71: 
            { return symbol(PRIVATE);
            }
          case 149: break;
          case 72: 
            { return symbol(CONTINUE);
            }
          case 150: break;
          case 73: 
            { return symbol(GETINT);
            }
          case 151: break;
          case 74: 
            { return symbol(PROTECTED);
            }
          case 152: break;
          case 75: 
            { return sybmol(SUBROUTINE);
            }
          case 153: break;
          case 76: 
            { return symbol(GETFLOAT);
            }
          case 154: break;
          case 77: 
            { return symbol(GETSTRING);
            }
          case 155: break;
          case 78: 
            { return symbol(GETBOOLEAN);
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
